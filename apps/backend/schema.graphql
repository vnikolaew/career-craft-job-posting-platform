# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  access_token: String
  createdAt: DateTimeISO!
  expires_at: Int
  id_token: String
  metadata: JSON
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  updatedAt: DateTimeISO!
  user: User!
  userId: String!
}

type AccountAvgAggregate {
  expires_at: Float
}

input AccountAvgOrderByAggregateInput {
  expires_at: SortOrder
}

type AccountCountAggregate {
  _all: Int!
  access_token: Int!
  createdAt: Int!
  expires_at: Int!
  id_token: Int!
  metadata: Int!
  provider: Int!
  providerAccountId: Int!
  refresh_token: Int!
  scope: Int!
  session_state: Int!
  token_type: Int!
  type: Int!
  updatedAt: Int!
  userId: Int!
}

input AccountCountOrderByAggregateInput {
  access_token: SortOrder
  createdAt: SortOrder
  expires_at: SortOrder
  id_token: SortOrder
  metadata: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  userId: SortOrder
}

input AccountCreateInput {
  access_token: String
  createdAt: DateTimeISO
  expires_at: Int
  id_token: String
  metadata: JSON
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  user: UserCreateNestedOneWithoutAccountsInput!
}

input AccountCreateManyInput {
  access_token: String
  createdAt: DateTimeISO
  expires_at: Int
  id_token: String
  metadata: JSON
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  userId: String!
}

input AccountCreateManyUserInput {
  access_token: String
  createdAt: DateTimeISO
  expires_at: Int
  id_token: String
  metadata: JSON
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
}

input AccountCreateManyUserInputEnvelope {
  data: [AccountCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input AccountCreateNestedManyWithoutUserInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  create: [AccountCreateWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
}

input AccountCreateOrConnectWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateWithoutUserInput {
  access_token: String
  createdAt: DateTimeISO
  expires_at: Int
  id_token: String
  metadata: JSON
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
}

type AccountGroupBy {
  _avg: AccountAvgAggregate
  _count: AccountCountAggregate
  _max: AccountMaxAggregate
  _min: AccountMinAggregate
  _sum: AccountSumAggregate
  access_token: String
  createdAt: DateTimeISO!
  expires_at: Int
  id_token: String
  metadata: JSON
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  updatedAt: DateTimeISO!
  userId: String!
}

input AccountListRelationFilter {
  every: AccountWhereInput
  none: AccountWhereInput
  some: AccountWhereInput
}

type AccountMaxAggregate {
  access_token: String
  createdAt: DateTimeISO
  expires_at: Int
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  updatedAt: DateTimeISO
  userId: String
}

input AccountMaxOrderByAggregateInput {
  access_token: SortOrder
  createdAt: SortOrder
  expires_at: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  userId: SortOrder
}

type AccountMinAggregate {
  access_token: String
  createdAt: DateTimeISO
  expires_at: Int
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  updatedAt: DateTimeISO
  userId: String
}

input AccountMinOrderByAggregateInput {
  access_token: SortOrder
  createdAt: SortOrder
  expires_at: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  userId: SortOrder
}

input AccountOrderByRelationAggregateInput {
  _count: SortOrder
}

enum AccountOrderByRelevanceFieldEnum {
  access_token
  id_token
  provider
  providerAccountId
  refresh_token
  scope
  session_state
  token_type
  type
  userId
}

input AccountOrderByRelevanceInput {
  fields: [AccountOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input AccountOrderByWithAggregationInput {
  _avg: AccountAvgOrderByAggregateInput
  _count: AccountCountOrderByAggregateInput
  _max: AccountMaxOrderByAggregateInput
  _min: AccountMinOrderByAggregateInput
  _sum: AccountSumOrderByAggregateInput
  access_token: SortOrderInput
  createdAt: SortOrder
  expires_at: SortOrderInput
  id_token: SortOrderInput
  metadata: SortOrderInput
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrderInput
  scope: SortOrderInput
  session_state: SortOrderInput
  token_type: SortOrderInput
  type: SortOrder
  userId: SortOrder
}

input AccountOrderByWithRelationInput {
  _relevance: AccountOrderByRelevanceInput
  access_token: SortOrderInput
  createdAt: SortOrder
  expires_at: SortOrderInput
  id_token: SortOrderInput
  metadata: SortOrderInput
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrderInput
  scope: SortOrderInput
  session_state: SortOrderInput
  token_type: SortOrderInput
  type: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input AccountProviderProviderAccountIdCompoundUniqueInput {
  provider: String!
  providerAccountId: String!
}

enum AccountScalarFieldEnum {
  access_token
  createdAt
  expires_at
  id_token
  metadata
  provider
  providerAccountId
  refresh_token
  scope
  session_state
  token_type
  type
  updatedAt
  userId
}

input AccountScalarWhereInput {
  AND: [AccountScalarWhereInput!]
  NOT: [AccountScalarWhereInput!]
  OR: [AccountScalarWhereInput!]
  access_token: StringNullableFilter
  createdAt: DateTimeFilter
  expires_at: IntNullableFilter
  id_token: StringNullableFilter
  metadata: JsonNullableFilter
  provider: StringFilter
  providerAccountId: StringFilter
  refresh_token: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
  token_type: StringNullableFilter
  type: StringFilter
  userId: StringFilter
}

input AccountScalarWhereWithAggregatesInput {
  AND: [AccountScalarWhereWithAggregatesInput!]
  NOT: [AccountScalarWhereWithAggregatesInput!]
  OR: [AccountScalarWhereWithAggregatesInput!]
  access_token: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  expires_at: IntNullableWithAggregatesFilter
  id_token: StringNullableWithAggregatesFilter
  metadata: JsonNullableWithAggregatesFilter
  provider: StringWithAggregatesFilter
  providerAccountId: StringWithAggregatesFilter
  refresh_token: StringNullableWithAggregatesFilter
  scope: StringNullableWithAggregatesFilter
  session_state: StringNullableWithAggregatesFilter
  token_type: StringNullableWithAggregatesFilter
  type: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type AccountSumAggregate {
  expires_at: Int
}

input AccountSumOrderByAggregateInput {
  expires_at: SortOrder
}

input AccountUpdateInput {
  access_token: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  metadata: JSON
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAccountsNestedInput
}

input AccountUpdateManyMutationInput {
  access_token: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  metadata: JSON
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input AccountUpdateManyWithWhereWithoutUserInput {
  data: AccountUpdateManyMutationInput!
  where: AccountScalarWhereInput!
}

input AccountUpdateManyWithoutUserNestedInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  create: [AccountCreateWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
  delete: [AccountWhereUniqueInput!]
  deleteMany: [AccountScalarWhereInput!]
  disconnect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
  update: [AccountUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AccountUpdateManyWithWhereWithoutUserInput!]
  upsert: [AccountUpsertWithWhereUniqueWithoutUserInput!]
}

input AccountUpdateWithWhereUniqueWithoutUserInput {
  data: AccountUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountUpdateWithoutUserInput {
  access_token: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  metadata: JSON
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input AccountUpsertWithWhereUniqueWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  update: AccountUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  access_token: StringNullableFilter
  createdAt: DateTimeFilter
  expires_at: IntNullableFilter
  id_token: StringNullableFilter
  metadata: JsonNullableFilter
  provider: StringFilter
  providerAccountId: StringFilter
  refresh_token: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
  token_type: StringNullableFilter
  type: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input AccountWhereUniqueInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  access_token: StringNullableFilter
  createdAt: DateTimeFilter
  expires_at: IntNullableFilter
  id_token: StringNullableFilter
  metadata: JsonNullableFilter
  provider: StringFilter
  providerAccountId: StringFilter
  provider_providerAccountId: AccountProviderProviderAccountIdCompoundUniqueInput
  refresh_token: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
  token_type: StringNullableFilter
  type: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

type AffectedRowsOutput {
  count: Int!
}

type AggregateAccount {
  _avg: AccountAvgAggregate
  _count: AccountCountAggregate
  _max: AccountMaxAggregate
  _min: AccountMinAggregate
  _sum: AccountSumAggregate
}

type AggregateCompany {
  _count: CompanyCountAggregate
  _max: CompanyMaxAggregate
  _min: CompanyMinAggregate
}

type AggregateCompanyCategory {
  _count: CompanyCategoryCountAggregate
  _max: CompanyCategoryMaxAggregate
  _min: CompanyCategoryMinAggregate
}

type AggregateJobListing {
  _count: JobListingCountAggregate
  _max: JobListingMaxAggregate
  _min: JobListingMinAggregate
}

type AggregateJobListingCategory {
  _count: JobListingCategoryCountAggregate
  _max: JobListingCategoryMaxAggregate
  _min: JobListingCategoryMinAggregate
}

type AggregateJobListingSubscription {
  _count: JobListingSubscriptionCountAggregate
  _max: JobListingSubscriptionMaxAggregate
  _min: JobListingSubscriptionMinAggregate
}

type AggregateSavedListing {
  _count: SavedListingCountAggregate
  _max: SavedListingMaxAggregate
  _min: SavedListingMinAggregate
}

type AggregateSession {
  _count: SessionCountAggregate
  _max: SessionMaxAggregate
  _min: SessionMinAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

type AggregateVerificationToken {
  _count: VerificationTokenCountAggregate
  _max: VerificationTokenMaxAggregate
  _min: VerificationTokenMinAggregate
}

type CategoryOnCompany {
  category_id: String!
  company_id: String!
  createdAt: DateTimeISO!
  updatedAt: DateTimeISO!
}

input CategoryOnCompanyCompany_idCategory_idCompoundUniqueInput {
  category_id: String!
  company_id: String!
}

input CategoryOnCompanyCreateManyCategoryInput {
  company_id: String!
  createdAt: DateTimeISO
}

input CategoryOnCompanyCreateManyCategoryInputEnvelope {
  data: [CategoryOnCompanyCreateManyCategoryInput!]!
  skipDuplicates: Boolean
}

input CategoryOnCompanyCreateManyCompanyInput {
  category_id: String!
  createdAt: DateTimeISO
}

input CategoryOnCompanyCreateManyCompanyInputEnvelope {
  data: [CategoryOnCompanyCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input CategoryOnCompanyCreateNestedManyWithoutCategoryInput {
  connect: [CategoryOnCompanyWhereUniqueInput!]
  connectOrCreate: [CategoryOnCompanyCreateOrConnectWithoutCategoryInput!]
  create: [CategoryOnCompanyCreateWithoutCategoryInput!]
  createMany: CategoryOnCompanyCreateManyCategoryInputEnvelope
}

input CategoryOnCompanyCreateNestedManyWithoutCompanyInput {
  connect: [CategoryOnCompanyWhereUniqueInput!]
  connectOrCreate: [CategoryOnCompanyCreateOrConnectWithoutCompanyInput!]
  create: [CategoryOnCompanyCreateWithoutCompanyInput!]
  createMany: CategoryOnCompanyCreateManyCompanyInputEnvelope
}

input CategoryOnCompanyCreateOrConnectWithoutCategoryInput {
  create: CategoryOnCompanyCreateWithoutCategoryInput!
  where: CategoryOnCompanyWhereUniqueInput!
}

input CategoryOnCompanyCreateOrConnectWithoutCompanyInput {
  create: CategoryOnCompanyCreateWithoutCompanyInput!
  where: CategoryOnCompanyWhereUniqueInput!
}

input CategoryOnCompanyCreateWithoutCategoryInput {
  company: CompanyCreateNestedOneWithoutCategoriesInput!
  createdAt: DateTimeISO
}

input CategoryOnCompanyCreateWithoutCompanyInput {
  category: CompanyCategoryCreateNestedOneWithoutCompaniesInput!
  createdAt: DateTimeISO
}

input CategoryOnCompanyListRelationFilter {
  every: CategoryOnCompanyWhereInput
  none: CategoryOnCompanyWhereInput
  some: CategoryOnCompanyWhereInput
}

input CategoryOnCompanyOrderByRelationAggregateInput {
  _count: SortOrder
}

enum CategoryOnCompanyOrderByRelevanceFieldEnum {
  category_id
  company_id
}

input CategoryOnCompanyOrderByRelevanceInput {
  fields: [CategoryOnCompanyOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input CategoryOnCompanyOrderByWithRelationInput {
  _relevance: CategoryOnCompanyOrderByRelevanceInput
  category: CompanyCategoryOrderByWithRelationInput
  category_id: SortOrder
  company: CompanyOrderByWithRelationInput
  company_id: SortOrder
  createdAt: SortOrder
}

enum CategoryOnCompanyScalarFieldEnum {
  category_id
  company_id
  createdAt
  updatedAt
}

input CategoryOnCompanyScalarWhereInput {
  AND: [CategoryOnCompanyScalarWhereInput!]
  NOT: [CategoryOnCompanyScalarWhereInput!]
  OR: [CategoryOnCompanyScalarWhereInput!]
  category_id: StringFilter
  company_id: StringFilter
  createdAt: DateTimeFilter
}

input CategoryOnCompanyUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input CategoryOnCompanyUpdateManyWithWhereWithoutCategoryInput {
  data: CategoryOnCompanyUpdateManyMutationInput!
  where: CategoryOnCompanyScalarWhereInput!
}

input CategoryOnCompanyUpdateManyWithWhereWithoutCompanyInput {
  data: CategoryOnCompanyUpdateManyMutationInput!
  where: CategoryOnCompanyScalarWhereInput!
}

input CategoryOnCompanyUpdateManyWithoutCategoryNestedInput {
  connect: [CategoryOnCompanyWhereUniqueInput!]
  connectOrCreate: [CategoryOnCompanyCreateOrConnectWithoutCategoryInput!]
  create: [CategoryOnCompanyCreateWithoutCategoryInput!]
  createMany: CategoryOnCompanyCreateManyCategoryInputEnvelope
  delete: [CategoryOnCompanyWhereUniqueInput!]
  deleteMany: [CategoryOnCompanyScalarWhereInput!]
  disconnect: [CategoryOnCompanyWhereUniqueInput!]
  set: [CategoryOnCompanyWhereUniqueInput!]
  update: [CategoryOnCompanyUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [CategoryOnCompanyUpdateManyWithWhereWithoutCategoryInput!]
  upsert: [CategoryOnCompanyUpsertWithWhereUniqueWithoutCategoryInput!]
}

input CategoryOnCompanyUpdateManyWithoutCompanyNestedInput {
  connect: [CategoryOnCompanyWhereUniqueInput!]
  connectOrCreate: [CategoryOnCompanyCreateOrConnectWithoutCompanyInput!]
  create: [CategoryOnCompanyCreateWithoutCompanyInput!]
  createMany: CategoryOnCompanyCreateManyCompanyInputEnvelope
  delete: [CategoryOnCompanyWhereUniqueInput!]
  deleteMany: [CategoryOnCompanyScalarWhereInput!]
  disconnect: [CategoryOnCompanyWhereUniqueInput!]
  set: [CategoryOnCompanyWhereUniqueInput!]
  update: [CategoryOnCompanyUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [CategoryOnCompanyUpdateManyWithWhereWithoutCompanyInput!]
  upsert: [CategoryOnCompanyUpsertWithWhereUniqueWithoutCompanyInput!]
}

input CategoryOnCompanyUpdateWithWhereUniqueWithoutCategoryInput {
  data: CategoryOnCompanyUpdateWithoutCategoryInput!
  where: CategoryOnCompanyWhereUniqueInput!
}

input CategoryOnCompanyUpdateWithWhereUniqueWithoutCompanyInput {
  data: CategoryOnCompanyUpdateWithoutCompanyInput!
  where: CategoryOnCompanyWhereUniqueInput!
}

input CategoryOnCompanyUpdateWithoutCategoryInput {
  company: CompanyUpdateOneRequiredWithoutCategoriesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input CategoryOnCompanyUpdateWithoutCompanyInput {
  category: CompanyCategoryUpdateOneRequiredWithoutCompaniesNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input CategoryOnCompanyUpsertWithWhereUniqueWithoutCategoryInput {
  create: CategoryOnCompanyCreateWithoutCategoryInput!
  update: CategoryOnCompanyUpdateWithoutCategoryInput!
  where: CategoryOnCompanyWhereUniqueInput!
}

input CategoryOnCompanyUpsertWithWhereUniqueWithoutCompanyInput {
  create: CategoryOnCompanyCreateWithoutCompanyInput!
  update: CategoryOnCompanyUpdateWithoutCompanyInput!
  where: CategoryOnCompanyWhereUniqueInput!
}

input CategoryOnCompanyWhereInput {
  AND: [CategoryOnCompanyWhereInput!]
  NOT: [CategoryOnCompanyWhereInput!]
  OR: [CategoryOnCompanyWhereInput!]
  category: CompanyCategoryRelationFilter
  category_id: StringFilter
  company: CompanyRelationFilter
  company_id: StringFilter
  createdAt: DateTimeFilter
}

input CategoryOnCompanyWhereUniqueInput {
  AND: [CategoryOnCompanyWhereInput!]
  NOT: [CategoryOnCompanyWhereInput!]
  OR: [CategoryOnCompanyWhereInput!]
  category: CompanyCategoryRelationFilter
  category_id: StringFilter
  company: CompanyRelationFilter
  company_id: StringFilter
  company_id_category_id: CategoryOnCompanyCompany_idCategory_idCompoundUniqueInput
  createdAt: DateTimeFilter
}

type CategoryOnJobListing {
  category_id: String!
  createdAt: DateTimeISO!
  listing_id: String!
  updatedAt: DateTimeISO!
}

input CategoryOnJobListingCreateManyCategoryInput {
  createdAt: DateTimeISO
  listing_id: String!
}

input CategoryOnJobListingCreateManyCategoryInputEnvelope {
  data: [CategoryOnJobListingCreateManyCategoryInput!]!
  skipDuplicates: Boolean
}

input CategoryOnJobListingCreateManyListingInput {
  category_id: String!
  createdAt: DateTimeISO
}

input CategoryOnJobListingCreateManyListingInputEnvelope {
  data: [CategoryOnJobListingCreateManyListingInput!]!
  skipDuplicates: Boolean
}

input CategoryOnJobListingCreateNestedManyWithoutCategoryInput {
  connect: [CategoryOnJobListingWhereUniqueInput!]
  connectOrCreate: [CategoryOnJobListingCreateOrConnectWithoutCategoryInput!]
  create: [CategoryOnJobListingCreateWithoutCategoryInput!]
  createMany: CategoryOnJobListingCreateManyCategoryInputEnvelope
}

input CategoryOnJobListingCreateNestedManyWithoutListingInput {
  connect: [CategoryOnJobListingWhereUniqueInput!]
  connectOrCreate: [CategoryOnJobListingCreateOrConnectWithoutListingInput!]
  create: [CategoryOnJobListingCreateWithoutListingInput!]
  createMany: CategoryOnJobListingCreateManyListingInputEnvelope
}

input CategoryOnJobListingCreateOrConnectWithoutCategoryInput {
  create: CategoryOnJobListingCreateWithoutCategoryInput!
  where: CategoryOnJobListingWhereUniqueInput!
}

input CategoryOnJobListingCreateOrConnectWithoutListingInput {
  create: CategoryOnJobListingCreateWithoutListingInput!
  where: CategoryOnJobListingWhereUniqueInput!
}

input CategoryOnJobListingCreateWithoutCategoryInput {
  createdAt: DateTimeISO
  listing: JobListingCreateNestedOneWithoutCategoriesInput!
}

input CategoryOnJobListingCreateWithoutListingInput {
  category: JobListingCategoryCreateNestedOneWithoutListingsInput!
  createdAt: DateTimeISO
}

input CategoryOnJobListingListRelationFilter {
  every: CategoryOnJobListingWhereInput
  none: CategoryOnJobListingWhereInput
  some: CategoryOnJobListingWhereInput
}

input CategoryOnJobListingListing_idCategory_idCompoundUniqueInput {
  category_id: String!
  listing_id: String!
}

input CategoryOnJobListingOrderByRelationAggregateInput {
  _count: SortOrder
}

enum CategoryOnJobListingOrderByRelevanceFieldEnum {
  category_id
  listing_id
}

input CategoryOnJobListingOrderByRelevanceInput {
  fields: [CategoryOnJobListingOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input CategoryOnJobListingOrderByWithRelationInput {
  _relevance: CategoryOnJobListingOrderByRelevanceInput
  category: JobListingCategoryOrderByWithRelationInput
  category_id: SortOrder
  createdAt: SortOrder
  listing: JobListingOrderByWithRelationInput
  listing_id: SortOrder
}

enum CategoryOnJobListingScalarFieldEnum {
  category_id
  createdAt
  listing_id
  updatedAt
}

input CategoryOnJobListingScalarWhereInput {
  AND: [CategoryOnJobListingScalarWhereInput!]
  NOT: [CategoryOnJobListingScalarWhereInput!]
  OR: [CategoryOnJobListingScalarWhereInput!]
  category_id: StringFilter
  createdAt: DateTimeFilter
  listing_id: StringFilter
}

input CategoryOnJobListingUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input CategoryOnJobListingUpdateManyWithWhereWithoutCategoryInput {
  data: CategoryOnJobListingUpdateManyMutationInput!
  where: CategoryOnJobListingScalarWhereInput!
}

input CategoryOnJobListingUpdateManyWithWhereWithoutListingInput {
  data: CategoryOnJobListingUpdateManyMutationInput!
  where: CategoryOnJobListingScalarWhereInput!
}

input CategoryOnJobListingUpdateManyWithoutCategoryNestedInput {
  connect: [CategoryOnJobListingWhereUniqueInput!]
  connectOrCreate: [CategoryOnJobListingCreateOrConnectWithoutCategoryInput!]
  create: [CategoryOnJobListingCreateWithoutCategoryInput!]
  createMany: CategoryOnJobListingCreateManyCategoryInputEnvelope
  delete: [CategoryOnJobListingWhereUniqueInput!]
  deleteMany: [CategoryOnJobListingScalarWhereInput!]
  disconnect: [CategoryOnJobListingWhereUniqueInput!]
  set: [CategoryOnJobListingWhereUniqueInput!]
  update: [CategoryOnJobListingUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [CategoryOnJobListingUpdateManyWithWhereWithoutCategoryInput!]
  upsert: [CategoryOnJobListingUpsertWithWhereUniqueWithoutCategoryInput!]
}

input CategoryOnJobListingUpdateManyWithoutListingNestedInput {
  connect: [CategoryOnJobListingWhereUniqueInput!]
  connectOrCreate: [CategoryOnJobListingCreateOrConnectWithoutListingInput!]
  create: [CategoryOnJobListingCreateWithoutListingInput!]
  createMany: CategoryOnJobListingCreateManyListingInputEnvelope
  delete: [CategoryOnJobListingWhereUniqueInput!]
  deleteMany: [CategoryOnJobListingScalarWhereInput!]
  disconnect: [CategoryOnJobListingWhereUniqueInput!]
  set: [CategoryOnJobListingWhereUniqueInput!]
  update: [CategoryOnJobListingUpdateWithWhereUniqueWithoutListingInput!]
  updateMany: [CategoryOnJobListingUpdateManyWithWhereWithoutListingInput!]
  upsert: [CategoryOnJobListingUpsertWithWhereUniqueWithoutListingInput!]
}

input CategoryOnJobListingUpdateWithWhereUniqueWithoutCategoryInput {
  data: CategoryOnJobListingUpdateWithoutCategoryInput!
  where: CategoryOnJobListingWhereUniqueInput!
}

input CategoryOnJobListingUpdateWithWhereUniqueWithoutListingInput {
  data: CategoryOnJobListingUpdateWithoutListingInput!
  where: CategoryOnJobListingWhereUniqueInput!
}

input CategoryOnJobListingUpdateWithoutCategoryInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  listing: JobListingUpdateOneRequiredWithoutCategoriesNestedInput
}

input CategoryOnJobListingUpdateWithoutListingInput {
  category: JobListingCategoryUpdateOneRequiredWithoutListingsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input CategoryOnJobListingUpsertWithWhereUniqueWithoutCategoryInput {
  create: CategoryOnJobListingCreateWithoutCategoryInput!
  update: CategoryOnJobListingUpdateWithoutCategoryInput!
  where: CategoryOnJobListingWhereUniqueInput!
}

input CategoryOnJobListingUpsertWithWhereUniqueWithoutListingInput {
  create: CategoryOnJobListingCreateWithoutListingInput!
  update: CategoryOnJobListingUpdateWithoutListingInput!
  where: CategoryOnJobListingWhereUniqueInput!
}

input CategoryOnJobListingWhereInput {
  AND: [CategoryOnJobListingWhereInput!]
  NOT: [CategoryOnJobListingWhereInput!]
  OR: [CategoryOnJobListingWhereInput!]
  category: JobListingCategoryRelationFilter
  category_id: StringFilter
  createdAt: DateTimeFilter
  listing: JobListingRelationFilter
  listing_id: StringFilter
}

input CategoryOnJobListingWhereUniqueInput {
  AND: [CategoryOnJobListingWhereInput!]
  NOT: [CategoryOnJobListingWhereInput!]
  OR: [CategoryOnJobListingWhereInput!]
  category: JobListingCategoryRelationFilter
  category_id: StringFilter
  createdAt: DateTimeFilter
  listing: JobListingRelationFilter
  listing_id: StringFilter
  listing_id_category_id: CategoryOnJobListingListing_idCategory_idCompoundUniqueInput
}

type Company {
  _count: CompanyCount
  about_raw: String!
  banner_image_url: URL
  benefits: [String!]!
  brand_image_url: URL
  career_description_raw: String!
  companyCategories: [CompanyCategory!]
  company_values: [String!]!
  contacts: CompanyContacts
  createdAt: DateTimeISO!
  email: EmailAddress!
  hiring_process: [String!]!
  id: ID!
  listings(cursor: JobListingWhereUniqueInput, distinct: [JobListingScalarFieldEnum!], orderBy: [JobListingOrderByWithRelationInput!], skip: Int, take: Int, where: JobListingWhereInput): [JobListing!]!
  listingsCount: Int!
  local_info: CompanyLocalInfo
  metadata: JSONObject
  name: String!
  subscriptions(cursor: JobListingSubscriptionWhereUniqueInput, distinct: [JobListingSubscriptionScalarFieldEnum!], orderBy: [JobListingSubscriptionOrderByWithRelationInput!], skip: Int, take: Int, where: JobListingSubscriptionWhereInput): [JobListingSubscription!]!
  updatedAt: DateTimeISO!
  work_environment: [String!]!
  worldwide_info: CompanyWorldwideInfo
}

type CompanyCategory {
  _count: CompanyCategoryCount
  companies(cursor: CategoryOnCompanyWhereUniqueInput, distinct: [CategoryOnCompanyScalarFieldEnum!], orderBy: [CategoryOnCompanyOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryOnCompanyWhereInput): [CategoryOnCompany!]!
  description: String!
  id: ID!
  name: String!
  subscriptions(cursor: JobListingSubscriptionWhereUniqueInput, distinct: [JobListingSubscriptionScalarFieldEnum!], orderBy: [JobListingSubscriptionOrderByWithRelationInput!], skip: Int, take: Int, where: JobListingSubscriptionWhereInput): [JobListingSubscription!]!
}

type CompanyCategoryCount {
  companies(where: CategoryOnCompanyWhereInput): Int!
  subscriptions(where: JobListingSubscriptionWhereInput): Int!
}

type CompanyCategoryCountAggregate {
  _all: Int!
  description: Int!
  id: Int!
  name: Int!
}

input CompanyCategoryCountOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

input CompanyCategoryCreateInput {
  companies: CategoryOnCompanyCreateNestedManyWithoutCategoryInput
  description: String!
  id: String
  name: String!
  subscriptions: JobListingSubscriptionCreateNestedManyWithoutCategoriesInput
}

input CompanyCategoryCreateManyInput {
  description: String!
  id: String
  name: String!
}

input CompanyCategoryCreateNestedManyWithoutSubscriptionsInput {
  connect: [CompanyCategoryWhereUniqueInput!]
  connectOrCreate: [CompanyCategoryCreateOrConnectWithoutSubscriptionsInput!]
  create: [CompanyCategoryCreateWithoutSubscriptionsInput!]
}

input CompanyCategoryCreateNestedOneWithoutCompaniesInput {
  connect: CompanyCategoryWhereUniqueInput
  connectOrCreate: CompanyCategoryCreateOrConnectWithoutCompaniesInput
  create: CompanyCategoryCreateWithoutCompaniesInput
}

input CompanyCategoryCreateOrConnectWithoutCompaniesInput {
  create: CompanyCategoryCreateWithoutCompaniesInput!
  where: CompanyCategoryWhereUniqueInput!
}

input CompanyCategoryCreateOrConnectWithoutSubscriptionsInput {
  create: CompanyCategoryCreateWithoutSubscriptionsInput!
  where: CompanyCategoryWhereUniqueInput!
}

input CompanyCategoryCreateWithoutCompaniesInput {
  description: String!
  id: String
  name: String!
  subscriptions: JobListingSubscriptionCreateNestedManyWithoutCategoriesInput
}

input CompanyCategoryCreateWithoutSubscriptionsInput {
  companies: CategoryOnCompanyCreateNestedManyWithoutCategoryInput
  description: String!
  id: String
  name: String!
}

type CompanyCategoryGroupBy {
  _count: CompanyCategoryCountAggregate
  _max: CompanyCategoryMaxAggregate
  _min: CompanyCategoryMinAggregate
  description: String!
  id: String!
  name: String!
}

input CompanyCategoryInput {
  id: String!
  name: String!
}

input CompanyCategoryListRelationFilter {
  every: CompanyCategoryWhereInput
  none: CompanyCategoryWhereInput
  some: CompanyCategoryWhereInput
}

type CompanyCategoryMaxAggregate {
  description: String
  id: String
  name: String
}

input CompanyCategoryMaxOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

type CompanyCategoryMinAggregate {
  description: String
  id: String
  name: String
}

input CompanyCategoryMinOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

input CompanyCategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

enum CompanyCategoryOrderByRelevanceFieldEnum {
  description
  id
  name
}

input CompanyCategoryOrderByRelevanceInput {
  fields: [CompanyCategoryOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input CompanyCategoryOrderByWithAggregationInput {
  _count: CompanyCategoryCountOrderByAggregateInput
  _max: CompanyCategoryMaxOrderByAggregateInput
  _min: CompanyCategoryMinOrderByAggregateInput
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

input CompanyCategoryOrderByWithRelationInput {
  _relevance: CompanyCategoryOrderByRelevanceInput
  companies: CategoryOnCompanyOrderByRelationAggregateInput
  description: SortOrder
  id: SortOrder
  name: SortOrder
  subscriptions: JobListingSubscriptionOrderByRelationAggregateInput
}

input CompanyCategoryRelationFilter {
  is: CompanyCategoryWhereInput
  isNot: CompanyCategoryWhereInput
}

enum CompanyCategoryScalarFieldEnum {
  description
  id
  name
}

input CompanyCategoryScalarWhereInput {
  AND: [CompanyCategoryScalarWhereInput!]
  NOT: [CompanyCategoryScalarWhereInput!]
  OR: [CompanyCategoryScalarWhereInput!]
  description: StringFilter
  id: StringFilter
  name: StringFilter
}

input CompanyCategoryScalarWhereWithAggregatesInput {
  AND: [CompanyCategoryScalarWhereWithAggregatesInput!]
  NOT: [CompanyCategoryScalarWhereWithAggregatesInput!]
  OR: [CompanyCategoryScalarWhereWithAggregatesInput!]
  description: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input CompanyCategoryUpdateInput {
  companies: CategoryOnCompanyUpdateManyWithoutCategoryNestedInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  subscriptions: JobListingSubscriptionUpdateManyWithoutCategoriesNestedInput
}

input CompanyCategoryUpdateManyMutationInput {
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input CompanyCategoryUpdateManyWithWhereWithoutSubscriptionsInput {
  data: CompanyCategoryUpdateManyMutationInput!
  where: CompanyCategoryScalarWhereInput!
}

input CompanyCategoryUpdateManyWithoutSubscriptionsNestedInput {
  connect: [CompanyCategoryWhereUniqueInput!]
  connectOrCreate: [CompanyCategoryCreateOrConnectWithoutSubscriptionsInput!]
  create: [CompanyCategoryCreateWithoutSubscriptionsInput!]
  delete: [CompanyCategoryWhereUniqueInput!]
  deleteMany: [CompanyCategoryScalarWhereInput!]
  disconnect: [CompanyCategoryWhereUniqueInput!]
  set: [CompanyCategoryWhereUniqueInput!]
  update: [CompanyCategoryUpdateWithWhereUniqueWithoutSubscriptionsInput!]
  updateMany: [CompanyCategoryUpdateManyWithWhereWithoutSubscriptionsInput!]
  upsert: [CompanyCategoryUpsertWithWhereUniqueWithoutSubscriptionsInput!]
}

input CompanyCategoryUpdateOneRequiredWithoutCompaniesNestedInput {
  connect: CompanyCategoryWhereUniqueInput
  connectOrCreate: CompanyCategoryCreateOrConnectWithoutCompaniesInput
  create: CompanyCategoryCreateWithoutCompaniesInput
  update: CompanyCategoryUpdateToOneWithWhereWithoutCompaniesInput
  upsert: CompanyCategoryUpsertWithoutCompaniesInput
}

input CompanyCategoryUpdateToOneWithWhereWithoutCompaniesInput {
  data: CompanyCategoryUpdateWithoutCompaniesInput!
  where: CompanyCategoryWhereInput
}

input CompanyCategoryUpdateWithWhereUniqueWithoutSubscriptionsInput {
  data: CompanyCategoryUpdateWithoutSubscriptionsInput!
  where: CompanyCategoryWhereUniqueInput!
}

input CompanyCategoryUpdateWithoutCompaniesInput {
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  subscriptions: JobListingSubscriptionUpdateManyWithoutCategoriesNestedInput
}

input CompanyCategoryUpdateWithoutSubscriptionsInput {
  companies: CategoryOnCompanyUpdateManyWithoutCategoryNestedInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input CompanyCategoryUpsertWithWhereUniqueWithoutSubscriptionsInput {
  create: CompanyCategoryCreateWithoutSubscriptionsInput!
  update: CompanyCategoryUpdateWithoutSubscriptionsInput!
  where: CompanyCategoryWhereUniqueInput!
}

input CompanyCategoryUpsertWithoutCompaniesInput {
  create: CompanyCategoryCreateWithoutCompaniesInput!
  update: CompanyCategoryUpdateWithoutCompaniesInput!
  where: CompanyCategoryWhereInput
}

input CompanyCategoryWhereInput {
  AND: [CompanyCategoryWhereInput!]
  NOT: [CompanyCategoryWhereInput!]
  OR: [CompanyCategoryWhereInput!]
  companies: CategoryOnCompanyListRelationFilter
  description: StringFilter
  id: StringFilter
  name: StringFilter
  subscriptions: JobListingSubscriptionListRelationFilter
}

input CompanyCategoryWhereUniqueInput {
  AND: [CompanyCategoryWhereInput!]
  NOT: [CompanyCategoryWhereInput!]
  OR: [CompanyCategoryWhereInput!]
  companies: CategoryOnCompanyListRelationFilter
  description: StringFilter
  id: String
  name: StringFilter
  subscriptions: JobListingSubscriptionListRelationFilter
}

type CompanyContact {
  address: String!
  city: String!
  coordinates: Coordinates
  phone_number: String!
}

type CompanyContacts {
  address: String!
  company_bulstat: String!
  contacts: [CompanyContact!]!
  email: EmailAddress!
  facebook_url: URL!
  linkedin_url: URL!
  name: String!
  phone_number: String!
  twitter_url: URL!
  website_url: URL!
  youtube_url: URL!
}

type CompanyCount {
  categories(where: CategoryOnCompanyWhereInput): Int!
  listings(where: JobListingWhereInput): Int!
  subscriptions(where: JobListingSubscriptionWhereInput): Int!
}

type CompanyCountAggregate {
  _all: Int!
  about_raw: Int!
  banner_image_url: Int!
  benefits: Int!
  brand_image_url: Int!
  career_description_raw: Int!
  company_values: Int!
  contacts: Int!
  createdAt: Int!
  email: Int!
  hiring_process: Int!
  id: Int!
  local_info: Int!
  metadata: Int!
  name: Int!
  updatedAt: Int!
  work_environment: Int!
  worldwide_info: Int!
}

input CompanyCountOrderByAggregateInput {
  about_raw: SortOrder
  banner_image_url: SortOrder
  benefits: SortOrder
  brand_image_url: SortOrder
  career_description_raw: SortOrder
  company_values: SortOrder
  contacts: SortOrder
  createdAt: SortOrder
  email: SortOrder
  hiring_process: SortOrder
  id: SortOrder
  local_info: SortOrder
  metadata: SortOrder
  name: SortOrder
  work_environment: SortOrder
  worldwide_info: SortOrder
}

input CompanyCreateInput {
  about_raw: String!
  banner_image_url: String
  benefits: CompanyCreatebenefitsInput
  brand_image_url: String
  career_description_raw: String!
  categories: CategoryOnCompanyCreateNestedManyWithoutCompanyInput
  company_values: CompanyCreatecompany_valuesInput
  contacts: JSON
  createdAt: DateTimeISO
  email: String!
  hiring_process: CompanyCreatehiring_processInput
  id: String
  listings: JobListingCreateNestedManyWithoutCompanyInput
  local_info: JSON
  metadata: JSON
  name: String!
  subscriptions: JobListingSubscriptionCreateNestedManyWithoutCompanyInput
  work_environment: CompanyCreatework_environmentInput
  worldwide_info: JSON
}

input CompanyCreateManyInput {
  about_raw: String!
  banner_image_url: String
  benefits: CompanyCreatebenefitsInput
  brand_image_url: String
  career_description_raw: String!
  company_values: CompanyCreatecompany_valuesInput
  contacts: JSON
  createdAt: DateTimeISO
  email: String!
  hiring_process: CompanyCreatehiring_processInput
  id: String
  local_info: JSON
  metadata: JSON
  name: String!
  work_environment: CompanyCreatework_environmentInput
  worldwide_info: JSON
}

input CompanyCreateNestedOneWithoutCategoriesInput {
  connect: CompanyWhereUniqueInput
  connectOrCreate: CompanyCreateOrConnectWithoutCategoriesInput
  create: CompanyCreateWithoutCategoriesInput
}

input CompanyCreateNestedOneWithoutListingsInput {
  connect: CompanyWhereUniqueInput
  connectOrCreate: CompanyCreateOrConnectWithoutListingsInput
  create: CompanyCreateWithoutListingsInput
}

input CompanyCreateNestedOneWithoutSubscriptionsInput {
  connect: CompanyWhereUniqueInput
  connectOrCreate: CompanyCreateOrConnectWithoutSubscriptionsInput
  create: CompanyCreateWithoutSubscriptionsInput
}

input CompanyCreateOrConnectWithoutCategoriesInput {
  create: CompanyCreateWithoutCategoriesInput!
  where: CompanyWhereUniqueInput!
}

input CompanyCreateOrConnectWithoutListingsInput {
  create: CompanyCreateWithoutListingsInput!
  where: CompanyWhereUniqueInput!
}

input CompanyCreateOrConnectWithoutSubscriptionsInput {
  create: CompanyCreateWithoutSubscriptionsInput!
  where: CompanyWhereUniqueInput!
}

input CompanyCreateWithoutCategoriesInput {
  about_raw: String!
  banner_image_url: String
  benefits: CompanyCreatebenefitsInput
  brand_image_url: String
  career_description_raw: String!
  company_values: CompanyCreatecompany_valuesInput
  contacts: JSON
  createdAt: DateTimeISO
  email: String!
  hiring_process: CompanyCreatehiring_processInput
  id: String
  listings: JobListingCreateNestedManyWithoutCompanyInput
  local_info: JSON
  metadata: JSON
  name: String!
  subscriptions: JobListingSubscriptionCreateNestedManyWithoutCompanyInput
  work_environment: CompanyCreatework_environmentInput
  worldwide_info: JSON
}

input CompanyCreateWithoutListingsInput {
  about_raw: String!
  banner_image_url: String
  benefits: CompanyCreatebenefitsInput
  brand_image_url: String
  career_description_raw: String!
  categories: CategoryOnCompanyCreateNestedManyWithoutCompanyInput
  company_values: CompanyCreatecompany_valuesInput
  contacts: JSON
  createdAt: DateTimeISO
  email: String!
  hiring_process: CompanyCreatehiring_processInput
  id: String
  local_info: JSON
  metadata: JSON
  name: String!
  subscriptions: JobListingSubscriptionCreateNestedManyWithoutCompanyInput
  work_environment: CompanyCreatework_environmentInput
  worldwide_info: JSON
}

input CompanyCreateWithoutSubscriptionsInput {
  about_raw: String!
  banner_image_url: String
  benefits: CompanyCreatebenefitsInput
  brand_image_url: String
  career_description_raw: String!
  categories: CategoryOnCompanyCreateNestedManyWithoutCompanyInput
  company_values: CompanyCreatecompany_valuesInput
  contacts: JSON
  createdAt: DateTimeISO
  email: String!
  hiring_process: CompanyCreatehiring_processInput
  id: String
  listings: JobListingCreateNestedManyWithoutCompanyInput
  local_info: JSON
  metadata: JSON
  name: String!
  work_environment: CompanyCreatework_environmentInput
  worldwide_info: JSON
}

input CompanyCreatebenefitsInput {
  set: [String!]!
}

input CompanyCreatecompany_valuesInput {
  set: [String!]!
}

input CompanyCreatehiring_processInput {
  set: [String!]!
}

input CompanyCreatework_environmentInput {
  set: [String!]!
}

type CompanyGroupBy {
  _count: CompanyCountAggregate
  _max: CompanyMaxAggregate
  _min: CompanyMinAggregate
  about_raw: String!
  banner_image_url: String
  benefits: [String!]
  brand_image_url: String
  career_description_raw: String!
  company_values: [String!]
  contacts: JSON!
  createdAt: DateTimeISO!
  email: String!
  hiring_process: [String!]
  id: String!
  local_info: JSON!
  metadata: JSON
  name: String!
  updatedAt: DateTimeISO!
  work_environment: [String!]
  worldwide_info: JSON!
}

type CompanyLocalInfo {
  employeeCount: Int
  locations: [String!]!
  since: DateTimeISO
}

type CompanyMaxAggregate {
  about_raw: String
  banner_image_url: String
  brand_image_url: String
  career_description_raw: String
  createdAt: DateTimeISO
  email: String
  id: String
  name: String
  updatedAt: DateTimeISO
}

input CompanyMaxOrderByAggregateInput {
  about_raw: SortOrder
  banner_image_url: SortOrder
  brand_image_url: SortOrder
  career_description_raw: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
}

type CompanyMinAggregate {
  about_raw: String
  banner_image_url: String
  brand_image_url: String
  career_description_raw: String
  createdAt: DateTimeISO
  email: String
  id: String
  name: String
  updatedAt: DateTimeISO
}

input CompanyMinOrderByAggregateInput {
  about_raw: SortOrder
  banner_image_url: SortOrder
  brand_image_url: SortOrder
  career_description_raw: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
}

input CompanyNullableRelationFilter {
  is: CompanyWhereInput
  isNot: CompanyWhereInput
}

enum CompanyOrderByRelevanceFieldEnum {
  about_raw
  banner_image_url
  benefits
  brand_image_url
  career_description_raw
  company_values
  email
  hiring_process
  id
  name
  work_environment
}

input CompanyOrderByRelevanceInput {
  fields: [CompanyOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input CompanyOrderByWithAggregationInput {
  _count: CompanyCountOrderByAggregateInput
  _max: CompanyMaxOrderByAggregateInput
  _min: CompanyMinOrderByAggregateInput
  about_raw: SortOrder
  banner_image_url: SortOrderInput
  benefits: SortOrder
  brand_image_url: SortOrderInput
  career_description_raw: SortOrder
  company_values: SortOrder
  contacts: SortOrder
  createdAt: SortOrder
  email: SortOrder
  hiring_process: SortOrder
  id: SortOrder
  local_info: SortOrder
  metadata: SortOrderInput
  name: SortOrder
  work_environment: SortOrder
  worldwide_info: SortOrder
}

input CompanyOrderByWithRelationInput {
  _relevance: CompanyOrderByRelevanceInput
  about_raw: SortOrder
  banner_image_url: SortOrderInput
  benefits: SortOrder
  brand_image_url: SortOrderInput
  career_description_raw: SortOrder
  categories: CategoryOnCompanyOrderByRelationAggregateInput
  company_values: SortOrder
  contacts: SortOrder
  createdAt: SortOrder
  email: SortOrder
  hiring_process: SortOrder
  id: SortOrder
  listings: JobListingOrderByRelationAggregateInput
  local_info: SortOrder
  metadata: SortOrderInput
  name: SortOrder
  subscriptions: JobListingSubscriptionOrderByRelationAggregateInput
  work_environment: SortOrder
  worldwide_info: SortOrder
}

input CompanyRelationFilter {
  is: CompanyWhereInput
  isNot: CompanyWhereInput
}

enum CompanyScalarFieldEnum {
  about_raw
  banner_image_url
  benefits
  brand_image_url
  career_description_raw
  company_values
  contacts
  createdAt
  email
  hiring_process
  id
  local_info
  metadata
  name
  updatedAt
  work_environment
  worldwide_info
}

input CompanyScalarWhereWithAggregatesInput {
  AND: [CompanyScalarWhereWithAggregatesInput!]
  NOT: [CompanyScalarWhereWithAggregatesInput!]
  OR: [CompanyScalarWhereWithAggregatesInput!]
  about_raw: StringWithAggregatesFilter
  banner_image_url: StringNullableWithAggregatesFilter
  benefits: StringNullableListFilter
  brand_image_url: StringNullableWithAggregatesFilter
  career_description_raw: StringWithAggregatesFilter
  company_values: StringNullableListFilter
  contacts: JsonWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  hiring_process: StringNullableListFilter
  id: StringWithAggregatesFilter
  local_info: JsonWithAggregatesFilter
  metadata: JsonNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  work_environment: StringNullableListFilter
  worldwide_info: JsonWithAggregatesFilter
}

input CompanyUpdateInput {
  about_raw: StringFieldUpdateOperationsInput
  banner_image_url: NullableStringFieldUpdateOperationsInput
  benefits: CompanyUpdatebenefitsInput
  brand_image_url: NullableStringFieldUpdateOperationsInput
  career_description_raw: StringFieldUpdateOperationsInput
  categories: CategoryOnCompanyUpdateManyWithoutCompanyNestedInput
  company_values: CompanyUpdatecompany_valuesInput
  contacts: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  hiring_process: CompanyUpdatehiring_processInput
  id: StringFieldUpdateOperationsInput
  listings: JobListingUpdateManyWithoutCompanyNestedInput
  local_info: JSON
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  subscriptions: JobListingSubscriptionUpdateManyWithoutCompanyNestedInput
  work_environment: CompanyUpdatework_environmentInput
  worldwide_info: JSON
}

input CompanyUpdateManyMutationInput {
  about_raw: StringFieldUpdateOperationsInput
  banner_image_url: NullableStringFieldUpdateOperationsInput
  benefits: CompanyUpdatebenefitsInput
  brand_image_url: NullableStringFieldUpdateOperationsInput
  career_description_raw: StringFieldUpdateOperationsInput
  company_values: CompanyUpdatecompany_valuesInput
  contacts: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  hiring_process: CompanyUpdatehiring_processInput
  id: StringFieldUpdateOperationsInput
  local_info: JSON
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  work_environment: CompanyUpdatework_environmentInput
  worldwide_info: JSON
}

input CompanyUpdateOneRequiredWithoutCategoriesNestedInput {
  connect: CompanyWhereUniqueInput
  connectOrCreate: CompanyCreateOrConnectWithoutCategoriesInput
  create: CompanyCreateWithoutCategoriesInput
  update: CompanyUpdateToOneWithWhereWithoutCategoriesInput
  upsert: CompanyUpsertWithoutCategoriesInput
}

input CompanyUpdateOneRequiredWithoutListingsNestedInput {
  connect: CompanyWhereUniqueInput
  connectOrCreate: CompanyCreateOrConnectWithoutListingsInput
  create: CompanyCreateWithoutListingsInput
  update: CompanyUpdateToOneWithWhereWithoutListingsInput
  upsert: CompanyUpsertWithoutListingsInput
}

input CompanyUpdateOneWithoutSubscriptionsNestedInput {
  connect: CompanyWhereUniqueInput
  connectOrCreate: CompanyCreateOrConnectWithoutSubscriptionsInput
  create: CompanyCreateWithoutSubscriptionsInput
  delete: CompanyWhereInput
  disconnect: CompanyWhereInput
  update: CompanyUpdateToOneWithWhereWithoutSubscriptionsInput
  upsert: CompanyUpsertWithoutSubscriptionsInput
}

input CompanyUpdateToOneWithWhereWithoutCategoriesInput {
  data: CompanyUpdateWithoutCategoriesInput!
  where: CompanyWhereInput
}

input CompanyUpdateToOneWithWhereWithoutListingsInput {
  data: CompanyUpdateWithoutListingsInput!
  where: CompanyWhereInput
}

input CompanyUpdateToOneWithWhereWithoutSubscriptionsInput {
  data: CompanyUpdateWithoutSubscriptionsInput!
  where: CompanyWhereInput
}

input CompanyUpdateWithoutCategoriesInput {
  about_raw: StringFieldUpdateOperationsInput
  banner_image_url: NullableStringFieldUpdateOperationsInput
  benefits: CompanyUpdatebenefitsInput
  brand_image_url: NullableStringFieldUpdateOperationsInput
  career_description_raw: StringFieldUpdateOperationsInput
  company_values: CompanyUpdatecompany_valuesInput
  contacts: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  hiring_process: CompanyUpdatehiring_processInput
  id: StringFieldUpdateOperationsInput
  listings: JobListingUpdateManyWithoutCompanyNestedInput
  local_info: JSON
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  subscriptions: JobListingSubscriptionUpdateManyWithoutCompanyNestedInput
  work_environment: CompanyUpdatework_environmentInput
  worldwide_info: JSON
}

input CompanyUpdateWithoutListingsInput {
  about_raw: StringFieldUpdateOperationsInput
  banner_image_url: NullableStringFieldUpdateOperationsInput
  benefits: CompanyUpdatebenefitsInput
  brand_image_url: NullableStringFieldUpdateOperationsInput
  career_description_raw: StringFieldUpdateOperationsInput
  categories: CategoryOnCompanyUpdateManyWithoutCompanyNestedInput
  company_values: CompanyUpdatecompany_valuesInput
  contacts: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  hiring_process: CompanyUpdatehiring_processInput
  id: StringFieldUpdateOperationsInput
  local_info: JSON
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  subscriptions: JobListingSubscriptionUpdateManyWithoutCompanyNestedInput
  work_environment: CompanyUpdatework_environmentInput
  worldwide_info: JSON
}

input CompanyUpdateWithoutSubscriptionsInput {
  about_raw: StringFieldUpdateOperationsInput
  banner_image_url: NullableStringFieldUpdateOperationsInput
  benefits: CompanyUpdatebenefitsInput
  brand_image_url: NullableStringFieldUpdateOperationsInput
  career_description_raw: StringFieldUpdateOperationsInput
  categories: CategoryOnCompanyUpdateManyWithoutCompanyNestedInput
  company_values: CompanyUpdatecompany_valuesInput
  contacts: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  hiring_process: CompanyUpdatehiring_processInput
  id: StringFieldUpdateOperationsInput
  listings: JobListingUpdateManyWithoutCompanyNestedInput
  local_info: JSON
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  work_environment: CompanyUpdatework_environmentInput
  worldwide_info: JSON
}

input CompanyUpdatebenefitsInput {
  push: [String!]
  set: [String!]
}

input CompanyUpdatecompany_valuesInput {
  push: [String!]
  set: [String!]
}

input CompanyUpdatehiring_processInput {
  push: [String!]
  set: [String!]
}

input CompanyUpdatework_environmentInput {
  push: [String!]
  set: [String!]
}

input CompanyUpsertWithoutCategoriesInput {
  create: CompanyCreateWithoutCategoriesInput!
  update: CompanyUpdateWithoutCategoriesInput!
  where: CompanyWhereInput
}

input CompanyUpsertWithoutListingsInput {
  create: CompanyCreateWithoutListingsInput!
  update: CompanyUpdateWithoutListingsInput!
  where: CompanyWhereInput
}

input CompanyUpsertWithoutSubscriptionsInput {
  create: CompanyCreateWithoutSubscriptionsInput!
  update: CompanyUpdateWithoutSubscriptionsInput!
  where: CompanyWhereInput
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  about_raw: StringFilter
  banner_image_url: StringNullableFilter
  benefits: StringNullableListFilter
  brand_image_url: StringNullableFilter
  career_description_raw: StringFilter
  categories: CategoryOnCompanyListRelationFilter
  company_values: StringNullableListFilter
  contacts: JsonFilter
  createdAt: DateTimeFilter
  email: StringFilter
  hiring_process: StringNullableListFilter
  id: StringFilter
  listings: JobListingListRelationFilter
  local_info: JsonFilter
  metadata: JsonNullableFilter
  name: StringFilter
  subscriptions: JobListingSubscriptionListRelationFilter
  work_environment: StringNullableListFilter
  worldwide_info: JsonFilter
}

input CompanyWhereUniqueInput {
  AND: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  about_raw: StringFilter
  banner_image_url: StringNullableFilter
  benefits: StringNullableListFilter
  brand_image_url: StringNullableFilter
  career_description_raw: StringFilter
  categories: CategoryOnCompanyListRelationFilter
  company_values: StringNullableListFilter
  contacts: JsonFilter
  createdAt: DateTimeFilter
  email: String
  hiring_process: StringNullableListFilter
  id: String
  listings: JobListingListRelationFilter
  local_info: JsonFilter
  metadata: JsonNullableFilter
  name: StringFilter
  subscriptions: JobListingSubscriptionListRelationFilter
  work_environment: StringNullableListFilter
  worldwide_info: JsonFilter
}

type CompanyWorldwideInfo {
  employeeCount: Int
  founded: DateTimeISO
  headquarters: String!
  locations: [String!]!
}

type Coordinates {
  latitude: Latitude
  longitude: Longitude
}

"""
A field whose value is a Currency: https://en.wikipedia.org/wiki/ISO_4217.
"""
scalar Currency @specifiedBy(url: "https://en.wikipedia.org/wiki/ISO_4217")

input DateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input DateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DateTimeNullableFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableFilter
  notIn: [DateTimeISO!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

type DeleteAllSubscriptionsResponse {
  deleted_count: Int!
  success: Boolean!
}

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

input EnumJobListingEmploymentTypeNullableFilter {
  equals: JobListingEmploymentType
  in: [JobListingEmploymentType!]
  not: NestedEnumJobListingEmploymentTypeNullableFilter
  notIn: [JobListingEmploymentType!]
}

input EnumJobListingEmploymentTypeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumJobListingEmploymentTypeNullableFilter
  _min: NestedEnumJobListingEmploymentTypeNullableFilter
  equals: JobListingEmploymentType
  in: [JobListingEmploymentType!]
  not: NestedEnumJobListingEmploymentTypeNullableWithAggregatesFilter
  notIn: [JobListingEmploymentType!]
}

input EnumJobListingLevelNullableFilter {
  equals: JobListingLevel
  in: [JobListingLevel!]
  not: NestedEnumJobListingLevelNullableFilter
  notIn: [JobListingLevel!]
}

input EnumJobListingLevelNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumJobListingLevelNullableFilter
  _min: NestedEnumJobListingLevelNullableFilter
  equals: JobListingLevel
  in: [JobListingLevel!]
  not: NestedEnumJobListingLevelNullableWithAggregatesFilter
  notIn: [JobListingLevel!]
}

input EnumJobListingSubscriptionNotificationFrequencyFieldUpdateOperationsInput {
  set: JobListingSubscriptionNotificationFrequency
}

input EnumJobListingSubscriptionNotificationFrequencyFilter {
  equals: JobListingSubscriptionNotificationFrequency
  in: [JobListingSubscriptionNotificationFrequency!]
  not: NestedEnumJobListingSubscriptionNotificationFrequencyFilter
  notIn: [JobListingSubscriptionNotificationFrequency!]
}

input EnumJobListingSubscriptionNotificationFrequencyWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumJobListingSubscriptionNotificationFrequencyFilter
  _min: NestedEnumJobListingSubscriptionNotificationFrequencyFilter
  equals: JobListingSubscriptionNotificationFrequency
  in: [JobListingSubscriptionNotificationFrequency!]
  not: NestedEnumJobListingSubscriptionNotificationFrequencyWithAggregatesFilter
  notIn: [JobListingSubscriptionNotificationFrequency!]
}

input EnumWorkFromHomeNullableFilter {
  equals: WorkFromHome
  in: [WorkFromHome!]
  not: NestedEnumWorkFromHomeNullableFilter
  notIn: [WorkFromHome!]
}

input EnumWorkFromHomeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumWorkFromHomeNullableFilter
  _min: NestedEnumWorkFromHomeNullableFilter
  equals: WorkFromHome
  in: [WorkFromHome!]
  not: NestedEnumWorkFromHomeNullableWithAggregatesFilter
  notIn: [WorkFromHome!]
}

enum FurloughPeriod {
  ThirtyPlus
  TwentyFiveToThirty
  TwentyOneToTwentyFive
}

input GetSubscriptionsInput {
  limit: Int = 10
  skip: Int = 0
}

input GetTopCompaniesInput {
  limit: Int = 10
  skip: Int = 0
}

input GetTopListingCategoriesInput {
  limit: Int! = 10
  skip: Int! = 0
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JobCategoryInput {
  id: String!
  name: String!
}

type JobListing {
  _count: JobListingCount
  categories(cursor: CategoryOnJobListingWhereUniqueInput, distinct: [CategoryOnJobListingScalarFieldEnum!], orderBy: [CategoryOnJobListingOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryOnJobListingWhereInput): [CategoryOnJobListing!]!
  company: Company!
  company_id: String!
  createdAt: DateTimeISO!
  description_raw: String!
  external_application_url: String
  id: ID!
  isSaved: Boolean
  keywords: [String!]!
  languages: [String!]!
  level: JobListingLevel
  location: String!
  name: String!

  """[JobListingParameters]"""
  parameters: JSON!
  saves(cursor: SavedListingWhereUniqueInput, distinct: [SavedListingScalarFieldEnum!], orderBy: [SavedListingOrderByWithRelationInput!], skip: Int, take: Int, where: SavedListingWhereInput): [SavedListing!]!
  type: JobListingEmploymentType
  updatedAt: DateTimeISO!
  work_from: WorkFromHome
}

type JobListingCategory {
  _count: JobListingCategoryCount
  description: String!
  id: ID!
  listings(cursor: CategoryOnJobListingWhereUniqueInput, distinct: [CategoryOnJobListingScalarFieldEnum!], orderBy: [CategoryOnJobListingOrderByWithRelationInput!], skip: Int, take: Int, where: CategoryOnJobListingWhereInput): [CategoryOnJobListing!]!
  name: String!
  subscriptions(cursor: JobListingSubscriptionWhereUniqueInput, distinct: [JobListingSubscriptionScalarFieldEnum!], orderBy: [JobListingSubscriptionOrderByWithRelationInput!], skip: Int, take: Int, where: JobListingSubscriptionWhereInput): [JobListingSubscription!]!
}

type JobListingCategoryCount {
  listings(where: CategoryOnJobListingWhereInput): Int!
  subscriptions(where: JobListingSubscriptionWhereInput): Int!
}

type JobListingCategoryCountAggregate {
  _all: Int!
  description: Int!
  id: Int!
  name: Int!
}

input JobListingCategoryCountOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

input JobListingCategoryCreateInput {
  description: String!
  id: String
  listings: CategoryOnJobListingCreateNestedManyWithoutCategoryInput
  name: String!
  subscriptions: JobListingSubscriptionCreateNestedManyWithoutJob_categoriesInput
}

input JobListingCategoryCreateManyInput {
  description: String!
  id: String
  name: String!
}

input JobListingCategoryCreateNestedManyWithoutSubscriptionsInput {
  connect: [JobListingCategoryWhereUniqueInput!]
  connectOrCreate: [JobListingCategoryCreateOrConnectWithoutSubscriptionsInput!]
  create: [JobListingCategoryCreateWithoutSubscriptionsInput!]
}

input JobListingCategoryCreateNestedOneWithoutListingsInput {
  connect: JobListingCategoryWhereUniqueInput
  connectOrCreate: JobListingCategoryCreateOrConnectWithoutListingsInput
  create: JobListingCategoryCreateWithoutListingsInput
}

input JobListingCategoryCreateOrConnectWithoutListingsInput {
  create: JobListingCategoryCreateWithoutListingsInput!
  where: JobListingCategoryWhereUniqueInput!
}

input JobListingCategoryCreateOrConnectWithoutSubscriptionsInput {
  create: JobListingCategoryCreateWithoutSubscriptionsInput!
  where: JobListingCategoryWhereUniqueInput!
}

input JobListingCategoryCreateWithoutListingsInput {
  description: String!
  id: String
  name: String!
  subscriptions: JobListingSubscriptionCreateNestedManyWithoutJob_categoriesInput
}

input JobListingCategoryCreateWithoutSubscriptionsInput {
  description: String!
  id: String
  listings: CategoryOnJobListingCreateNestedManyWithoutCategoryInput
  name: String!
}

type JobListingCategoryGroupBy {
  _count: JobListingCategoryCountAggregate
  _max: JobListingCategoryMaxAggregate
  _min: JobListingCategoryMinAggregate
  description: String!
  id: String!
  name: String!
}

input JobListingCategoryListRelationFilter {
  every: JobListingCategoryWhereInput
  none: JobListingCategoryWhereInput
  some: JobListingCategoryWhereInput
}

type JobListingCategoryMaxAggregate {
  description: String
  id: String
  name: String
}

input JobListingCategoryMaxOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

type JobListingCategoryMinAggregate {
  description: String
  id: String
  name: String
}

input JobListingCategoryMinOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

input JobListingCategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

enum JobListingCategoryOrderByRelevanceFieldEnum {
  description
  id
  name
}

input JobListingCategoryOrderByRelevanceInput {
  fields: [JobListingCategoryOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input JobListingCategoryOrderByWithAggregationInput {
  _count: JobListingCategoryCountOrderByAggregateInput
  _max: JobListingCategoryMaxOrderByAggregateInput
  _min: JobListingCategoryMinOrderByAggregateInput
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

input JobListingCategoryOrderByWithRelationInput {
  _relevance: JobListingCategoryOrderByRelevanceInput
  description: SortOrder
  id: SortOrder
  listings: CategoryOnJobListingOrderByRelationAggregateInput
  name: SortOrder
  subscriptions: JobListingSubscriptionOrderByRelationAggregateInput
}

input JobListingCategoryRelationFilter {
  is: JobListingCategoryWhereInput
  isNot: JobListingCategoryWhereInput
}

enum JobListingCategoryScalarFieldEnum {
  description
  id
  name
}

input JobListingCategoryScalarWhereInput {
  AND: [JobListingCategoryScalarWhereInput!]
  NOT: [JobListingCategoryScalarWhereInput!]
  OR: [JobListingCategoryScalarWhereInput!]
  description: StringFilter
  id: StringFilter
  name: StringFilter
}

input JobListingCategoryScalarWhereWithAggregatesInput {
  AND: [JobListingCategoryScalarWhereWithAggregatesInput!]
  NOT: [JobListingCategoryScalarWhereWithAggregatesInput!]
  OR: [JobListingCategoryScalarWhereWithAggregatesInput!]
  description: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input JobListingCategoryUpdateInput {
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  listings: CategoryOnJobListingUpdateManyWithoutCategoryNestedInput
  name: StringFieldUpdateOperationsInput
  subscriptions: JobListingSubscriptionUpdateManyWithoutJob_categoriesNestedInput
}

input JobListingCategoryUpdateManyMutationInput {
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input JobListingCategoryUpdateManyWithWhereWithoutSubscriptionsInput {
  data: JobListingCategoryUpdateManyMutationInput!
  where: JobListingCategoryScalarWhereInput!
}

input JobListingCategoryUpdateManyWithoutSubscriptionsNestedInput {
  connect: [JobListingCategoryWhereUniqueInput!]
  connectOrCreate: [JobListingCategoryCreateOrConnectWithoutSubscriptionsInput!]
  create: [JobListingCategoryCreateWithoutSubscriptionsInput!]
  delete: [JobListingCategoryWhereUniqueInput!]
  deleteMany: [JobListingCategoryScalarWhereInput!]
  disconnect: [JobListingCategoryWhereUniqueInput!]
  set: [JobListingCategoryWhereUniqueInput!]
  update: [JobListingCategoryUpdateWithWhereUniqueWithoutSubscriptionsInput!]
  updateMany: [JobListingCategoryUpdateManyWithWhereWithoutSubscriptionsInput!]
  upsert: [JobListingCategoryUpsertWithWhereUniqueWithoutSubscriptionsInput!]
}

input JobListingCategoryUpdateOneRequiredWithoutListingsNestedInput {
  connect: JobListingCategoryWhereUniqueInput
  connectOrCreate: JobListingCategoryCreateOrConnectWithoutListingsInput
  create: JobListingCategoryCreateWithoutListingsInput
  update: JobListingCategoryUpdateToOneWithWhereWithoutListingsInput
  upsert: JobListingCategoryUpsertWithoutListingsInput
}

input JobListingCategoryUpdateToOneWithWhereWithoutListingsInput {
  data: JobListingCategoryUpdateWithoutListingsInput!
  where: JobListingCategoryWhereInput
}

input JobListingCategoryUpdateWithWhereUniqueWithoutSubscriptionsInput {
  data: JobListingCategoryUpdateWithoutSubscriptionsInput!
  where: JobListingCategoryWhereUniqueInput!
}

input JobListingCategoryUpdateWithoutListingsInput {
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  subscriptions: JobListingSubscriptionUpdateManyWithoutJob_categoriesNestedInput
}

input JobListingCategoryUpdateWithoutSubscriptionsInput {
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  listings: CategoryOnJobListingUpdateManyWithoutCategoryNestedInput
  name: StringFieldUpdateOperationsInput
}

input JobListingCategoryUpsertWithWhereUniqueWithoutSubscriptionsInput {
  create: JobListingCategoryCreateWithoutSubscriptionsInput!
  update: JobListingCategoryUpdateWithoutSubscriptionsInput!
  where: JobListingCategoryWhereUniqueInput!
}

input JobListingCategoryUpsertWithoutListingsInput {
  create: JobListingCategoryCreateWithoutListingsInput!
  update: JobListingCategoryUpdateWithoutListingsInput!
  where: JobListingCategoryWhereInput
}

input JobListingCategoryWhereInput {
  AND: [JobListingCategoryWhereInput!]
  NOT: [JobListingCategoryWhereInput!]
  OR: [JobListingCategoryWhereInput!]
  description: StringFilter
  id: StringFilter
  listings: CategoryOnJobListingListRelationFilter
  name: StringFilter
  subscriptions: JobListingSubscriptionListRelationFilter
}

input JobListingCategoryWhereUniqueInput {
  AND: [JobListingCategoryWhereInput!]
  NOT: [JobListingCategoryWhereInput!]
  OR: [JobListingCategoryWhereInput!]
  description: StringFilter
  id: String
  listings: CategoryOnJobListingListRelationFilter
  name: StringFilter
  subscriptions: JobListingSubscriptionListRelationFilter
}

type JobListingCount {
  categories(where: CategoryOnJobListingWhereInput): Int!
  saves(where: SavedListingWhereInput): Int!
}

type JobListingCountAggregate {
  _all: Int!
  company_id: Int!
  createdAt: Int!
  description_raw: Int!
  external_application_url: Int!
  id: Int!
  keywords: Int!
  languages: Int!
  level: Int!
  location: Int!
  name: Int!
  parameters: Int!
  type: Int!
  updatedAt: Int!
  work_from: Int!
}

input JobListingCountOrderByAggregateInput {
  company_id: SortOrder
  createdAt: SortOrder
  description_raw: SortOrder
  external_application_url: SortOrder
  id: SortOrder
  keywords: SortOrder
  languages: SortOrder
  level: SortOrder
  location: SortOrder
  name: SortOrder
  parameters: SortOrder
  type: SortOrder
  work_from: SortOrder
}

input JobListingCreateInput {
  categories: CategoryOnJobListingCreateNestedManyWithoutListingInput
  company: CompanyCreateNestedOneWithoutListingsInput!
  createdAt: DateTimeISO
  description_raw: String!
  external_application_url: String
  id: String
  keywords: JobListingCreatekeywordsInput
  languages: JobListingCreatelanguagesInput
  level: JobListingLevel
  location: String!
  name: String!
  parameters: JSON
  saves: SavedListingCreateNestedManyWithoutListingInput
  type: JobListingEmploymentType
  work_from: WorkFromHome
}

input JobListingCreateManyCompanyInput {
  createdAt: DateTimeISO
  description_raw: String!
  external_application_url: String
  id: String
  keywords: JobListingCreatekeywordsInput
  languages: JobListingCreatelanguagesInput
  level: JobListingLevel
  location: String!
  name: String!
  parameters: JSON
  type: JobListingEmploymentType
  work_from: WorkFromHome
}

input JobListingCreateManyCompanyInputEnvelope {
  data: [JobListingCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input JobListingCreateManyInput {
  company_id: String!
  createdAt: DateTimeISO
  description_raw: String!
  external_application_url: String
  id: String
  keywords: JobListingCreatekeywordsInput
  languages: JobListingCreatelanguagesInput
  level: JobListingLevel
  location: String!
  name: String!
  parameters: JSON
  type: JobListingEmploymentType
  work_from: WorkFromHome
}

input JobListingCreateNestedManyWithoutCompanyInput {
  connect: [JobListingWhereUniqueInput!]
  connectOrCreate: [JobListingCreateOrConnectWithoutCompanyInput!]
  create: [JobListingCreateWithoutCompanyInput!]
  createMany: JobListingCreateManyCompanyInputEnvelope
}

input JobListingCreateNestedOneWithoutCategoriesInput {
  connect: JobListingWhereUniqueInput
  connectOrCreate: JobListingCreateOrConnectWithoutCategoriesInput
  create: JobListingCreateWithoutCategoriesInput
}

input JobListingCreateNestedOneWithoutSavesInput {
  connect: JobListingWhereUniqueInput
  connectOrCreate: JobListingCreateOrConnectWithoutSavesInput
  create: JobListingCreateWithoutSavesInput
}

input JobListingCreateOrConnectWithoutCategoriesInput {
  create: JobListingCreateWithoutCategoriesInput!
  where: JobListingWhereUniqueInput!
}

input JobListingCreateOrConnectWithoutCompanyInput {
  create: JobListingCreateWithoutCompanyInput!
  where: JobListingWhereUniqueInput!
}

input JobListingCreateOrConnectWithoutSavesInput {
  create: JobListingCreateWithoutSavesInput!
  where: JobListingWhereUniqueInput!
}

input JobListingCreateWithoutCategoriesInput {
  company: CompanyCreateNestedOneWithoutListingsInput!
  createdAt: DateTimeISO
  description_raw: String!
  external_application_url: String
  id: String
  keywords: JobListingCreatekeywordsInput
  languages: JobListingCreatelanguagesInput
  level: JobListingLevel
  location: String!
  name: String!
  parameters: JSON
  saves: SavedListingCreateNestedManyWithoutListingInput
  type: JobListingEmploymentType
  work_from: WorkFromHome
}

input JobListingCreateWithoutCompanyInput {
  categories: CategoryOnJobListingCreateNestedManyWithoutListingInput
  createdAt: DateTimeISO
  description_raw: String!
  external_application_url: String
  id: String
  keywords: JobListingCreatekeywordsInput
  languages: JobListingCreatelanguagesInput
  level: JobListingLevel
  location: String!
  name: String!
  parameters: JSON
  saves: SavedListingCreateNestedManyWithoutListingInput
  type: JobListingEmploymentType
  work_from: WorkFromHome
}

input JobListingCreateWithoutSavesInput {
  categories: CategoryOnJobListingCreateNestedManyWithoutListingInput
  company: CompanyCreateNestedOneWithoutListingsInput!
  createdAt: DateTimeISO
  description_raw: String!
  external_application_url: String
  id: String
  keywords: JobListingCreatekeywordsInput
  languages: JobListingCreatelanguagesInput
  level: JobListingLevel
  location: String!
  name: String!
  parameters: JSON
  type: JobListingEmploymentType
  work_from: WorkFromHome
}

input JobListingCreatekeywordsInput {
  set: [String!]!
}

input JobListingCreatelanguagesInput {
  set: [String!]!
}

enum JobListingEmploymentType {
  FlexibleTime
  ForStudents
  FreelanceProject
  FullTime
  PartTime
  Permanent
  RefugeeStatus
  Temporary
}

enum JobListingFrom {
  Agencies
  DirectEmployer
}

type JobListingGroupBy {
  _count: JobListingCountAggregate
  _max: JobListingMaxAggregate
  _min: JobListingMinAggregate
  company_id: String!
  createdAt: DateTimeISO!
  description_raw: String!
  external_application_url: String
  id: String!
  keywords: [String!]
  languages: [String!]
  level: JobListingLevel
  location: String!
  name: String!
  parameters: JSON!
  type: JobListingEmploymentType
  updatedAt: DateTimeISO!
  work_from: WorkFromHome
}

enum JobListingLevel {
  Experts
  Management
  Staff
}

input JobListingListRelationFilter {
  every: JobListingWhereInput
  none: JobListingWhereInput
  some: JobListingWhereInput
}

type JobListingMaxAggregate {
  company_id: String
  createdAt: DateTimeISO
  description_raw: String
  external_application_url: String
  id: String
  level: JobListingLevel
  location: String
  name: String
  type: JobListingEmploymentType
  updatedAt: DateTimeISO
  work_from: WorkFromHome
}

input JobListingMaxOrderByAggregateInput {
  company_id: SortOrder
  createdAt: SortOrder
  description_raw: SortOrder
  external_application_url: SortOrder
  id: SortOrder
  level: SortOrder
  location: SortOrder
  name: SortOrder
  type: SortOrder
  work_from: SortOrder
}

type JobListingMinAggregate {
  company_id: String
  createdAt: DateTimeISO
  description_raw: String
  external_application_url: String
  id: String
  level: JobListingLevel
  location: String
  name: String
  type: JobListingEmploymentType
  updatedAt: DateTimeISO
  work_from: WorkFromHome
}

input JobListingMinOrderByAggregateInput {
  company_id: SortOrder
  createdAt: SortOrder
  description_raw: SortOrder
  external_application_url: SortOrder
  id: SortOrder
  level: SortOrder
  location: SortOrder
  name: SortOrder
  type: SortOrder
  work_from: SortOrder
}

input JobListingOrderByRelationAggregateInput {
  _count: SortOrder
}

enum JobListingOrderByRelevanceFieldEnum {
  company_id
  description_raw
  external_application_url
  id
  keywords
  languages
  location
  name
}

input JobListingOrderByRelevanceInput {
  fields: [JobListingOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input JobListingOrderByWithAggregationInput {
  _count: JobListingCountOrderByAggregateInput
  _max: JobListingMaxOrderByAggregateInput
  _min: JobListingMinOrderByAggregateInput
  company_id: SortOrder
  createdAt: SortOrder
  description_raw: SortOrder
  external_application_url: SortOrderInput
  id: SortOrder
  keywords: SortOrder
  languages: SortOrder
  level: SortOrderInput
  location: SortOrder
  name: SortOrder
  parameters: SortOrder
  type: SortOrderInput
  work_from: SortOrderInput
}

input JobListingOrderByWithRelationInput {
  _relevance: JobListingOrderByRelevanceInput
  categories: CategoryOnJobListingOrderByRelationAggregateInput
  company: CompanyOrderByWithRelationInput
  company_id: SortOrder
  createdAt: SortOrder
  description_raw: SortOrder
  external_application_url: SortOrderInput
  id: SortOrder
  keywords: SortOrder
  languages: SortOrder
  level: SortOrderInput
  location: SortOrder
  name: SortOrder
  parameters: SortOrder
  saves: SavedListingOrderByRelationAggregateInput
  type: SortOrderInput
  work_from: SortOrderInput
}

input JobListingParameters {
  from: JobListingFrom
  furlough: FurloughPeriod
  internship: Boolean
  remoteInterview: Boolean
  salary: JobListingSalary
}

input JobListingRelationFilter {
  is: JobListingWhereInput
  isNot: JobListingWhereInput
}

input JobListingSalary {
  currency: Currency!
}

enum JobListingScalarFieldEnum {
  company_id
  createdAt
  description_raw
  external_application_url
  id
  keywords
  languages
  level
  location
  name
  parameters
  type
  updatedAt
  work_from
}

input JobListingScalarWhereInput {
  AND: [JobListingScalarWhereInput!]
  NOT: [JobListingScalarWhereInput!]
  OR: [JobListingScalarWhereInput!]
  company_id: StringFilter
  createdAt: DateTimeFilter
  description_raw: StringFilter
  external_application_url: StringNullableFilter
  id: StringFilter
  keywords: StringNullableListFilter
  languages: StringNullableListFilter
  level: EnumJobListingLevelNullableFilter
  location: StringFilter
  name: StringFilter
  parameters: JsonFilter
  type: EnumJobListingEmploymentTypeNullableFilter
  work_from: EnumWorkFromHomeNullableFilter
}

input JobListingScalarWhereWithAggregatesInput {
  AND: [JobListingScalarWhereWithAggregatesInput!]
  NOT: [JobListingScalarWhereWithAggregatesInput!]
  OR: [JobListingScalarWhereWithAggregatesInput!]
  company_id: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  description_raw: StringWithAggregatesFilter
  external_application_url: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  keywords: StringNullableListFilter
  languages: StringNullableListFilter
  level: EnumJobListingLevelNullableWithAggregatesFilter
  location: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  parameters: JsonWithAggregatesFilter
  type: EnumJobListingEmploymentTypeNullableWithAggregatesFilter
  work_from: EnumWorkFromHomeNullableWithAggregatesFilter
}

type JobListingSubscription {
  _count: JobListingSubscriptionCount
  categories(cursor: CompanyCategoryWhereUniqueInput, distinct: [CompanyCategoryScalarFieldEnum!], orderBy: [CompanyCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CompanyCategoryWhereInput): [CompanyCategory!]!
  company(where: CompanyWhereInput): Company
  company_id: String
  createdAt: DateTimeISO!
  description: String!
  id: ID!
  job_categories(cursor: JobListingCategoryWhereUniqueInput, distinct: [JobListingCategoryScalarFieldEnum!], orderBy: [JobListingCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: JobListingCategoryWhereInput): [JobListingCategory!]!
  keywords: [String!]!
  languages: [String!]!
  level: JobListingLevel
  location: String
  metadata: JSON
  notification_frequency: JobListingSubscriptionNotificationFrequency!

  """[JobListingParameters]"""
  parameters: JSON!
  type: JobListingEmploymentType
  updatedAt: DateTimeISO!
  user(where: UserWhereInput): User
  user_id: String
  work_from: WorkFromHome
}

type JobListingSubscriptionCount {
  categories(where: CompanyCategoryWhereInput): Int!
  job_categories(where: JobListingCategoryWhereInput): Int!
}

type JobListingSubscriptionCountAggregate {
  _all: Int!
  company_id: Int!
  createdAt: Int!
  id: Int!
  keywords: Int!
  languages: Int!
  level: Int!
  location: Int!
  metadata: Int!
  notification_frequency: Int!
  parameters: Int!
  type: Int!
  updatedAt: Int!
  user_id: Int!
  work_from: Int!
}

input JobListingSubscriptionCountOrderByAggregateInput {
  company_id: SortOrder
  createdAt: SortOrder
  id: SortOrder
  keywords: SortOrder
  languages: SortOrder
  level: SortOrder
  location: SortOrder
  metadata: SortOrder
  notification_frequency: SortOrder
  parameters: SortOrder
  type: SortOrder
  user_id: SortOrder
  work_from: SortOrder
}

input JobListingSubscriptionCreateInput {
  categories: CompanyCategoryCreateNestedManyWithoutSubscriptionsInput
  company: CompanyCreateNestedOneWithoutSubscriptionsInput
  createdAt: DateTimeISO
  id: String
  job_categories: JobListingCategoryCreateNestedManyWithoutSubscriptionsInput
  keywords: JobListingSubscriptionCreatekeywordsInput
  languages: JobListingSubscriptionCreatelanguagesInput
  level: JobListingLevel
  location: String
  metadata: JSON
  notification_frequency: JobListingSubscriptionNotificationFrequency!
  parameters: JSON
  type: JobListingEmploymentType
  user: UserCreateNestedOneWithoutSubscriptionsInput
  work_from: WorkFromHome
}

input JobListingSubscriptionCreateManyCompanyInput {
  createdAt: DateTimeISO
  id: String
  keywords: JobListingSubscriptionCreatekeywordsInput
  languages: JobListingSubscriptionCreatelanguagesInput
  level: JobListingLevel
  location: String
  metadata: JSON
  notification_frequency: JobListingSubscriptionNotificationFrequency!
  parameters: JSON
  type: JobListingEmploymentType
  user_id: String
  work_from: WorkFromHome
}

input JobListingSubscriptionCreateManyCompanyInputEnvelope {
  data: [JobListingSubscriptionCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input JobListingSubscriptionCreateManyInput {
  company_id: String
  createdAt: DateTimeISO
  id: String
  keywords: JobListingSubscriptionCreatekeywordsInput
  languages: JobListingSubscriptionCreatelanguagesInput
  level: JobListingLevel
  location: String
  metadata: JSON
  notification_frequency: JobListingSubscriptionNotificationFrequency!
  parameters: JSON
  type: JobListingEmploymentType
  user_id: String
  work_from: WorkFromHome
}

input JobListingSubscriptionCreateManyUserInput {
  company_id: String
  createdAt: DateTimeISO
  id: String
  keywords: JobListingSubscriptionCreatekeywordsInput
  languages: JobListingSubscriptionCreatelanguagesInput
  level: JobListingLevel
  location: String
  metadata: JSON
  notification_frequency: JobListingSubscriptionNotificationFrequency!
  parameters: JSON
  type: JobListingEmploymentType
  work_from: WorkFromHome
}

input JobListingSubscriptionCreateManyUserInputEnvelope {
  data: [JobListingSubscriptionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input JobListingSubscriptionCreateNestedManyWithoutCategoriesInput {
  connect: [JobListingSubscriptionWhereUniqueInput!]
  connectOrCreate: [JobListingSubscriptionCreateOrConnectWithoutCategoriesInput!]
  create: [JobListingSubscriptionCreateWithoutCategoriesInput!]
}

input JobListingSubscriptionCreateNestedManyWithoutCompanyInput {
  connect: [JobListingSubscriptionWhereUniqueInput!]
  connectOrCreate: [JobListingSubscriptionCreateOrConnectWithoutCompanyInput!]
  create: [JobListingSubscriptionCreateWithoutCompanyInput!]
  createMany: JobListingSubscriptionCreateManyCompanyInputEnvelope
}

input JobListingSubscriptionCreateNestedManyWithoutJob_categoriesInput {
  connect: [JobListingSubscriptionWhereUniqueInput!]
  connectOrCreate: [JobListingSubscriptionCreateOrConnectWithoutJob_categoriesInput!]
  create: [JobListingSubscriptionCreateWithoutJob_categoriesInput!]
}

input JobListingSubscriptionCreateNestedManyWithoutUserInput {
  connect: [JobListingSubscriptionWhereUniqueInput!]
  connectOrCreate: [JobListingSubscriptionCreateOrConnectWithoutUserInput!]
  create: [JobListingSubscriptionCreateWithoutUserInput!]
  createMany: JobListingSubscriptionCreateManyUserInputEnvelope
}

input JobListingSubscriptionCreateOrConnectWithoutCategoriesInput {
  create: JobListingSubscriptionCreateWithoutCategoriesInput!
  where: JobListingSubscriptionWhereUniqueInput!
}

input JobListingSubscriptionCreateOrConnectWithoutCompanyInput {
  create: JobListingSubscriptionCreateWithoutCompanyInput!
  where: JobListingSubscriptionWhereUniqueInput!
}

input JobListingSubscriptionCreateOrConnectWithoutJob_categoriesInput {
  create: JobListingSubscriptionCreateWithoutJob_categoriesInput!
  where: JobListingSubscriptionWhereUniqueInput!
}

input JobListingSubscriptionCreateOrConnectWithoutUserInput {
  create: JobListingSubscriptionCreateWithoutUserInput!
  where: JobListingSubscriptionWhereUniqueInput!
}

input JobListingSubscriptionCreateWithoutCategoriesInput {
  company: CompanyCreateNestedOneWithoutSubscriptionsInput
  createdAt: DateTimeISO
  id: String
  job_categories: JobListingCategoryCreateNestedManyWithoutSubscriptionsInput
  keywords: JobListingSubscriptionCreatekeywordsInput
  languages: JobListingSubscriptionCreatelanguagesInput
  level: JobListingLevel
  location: String
  metadata: JSON
  notification_frequency: JobListingSubscriptionNotificationFrequency!
  parameters: JSON
  type: JobListingEmploymentType
  user: UserCreateNestedOneWithoutSubscriptionsInput
  work_from: WorkFromHome
}

input JobListingSubscriptionCreateWithoutCompanyInput {
  categories: CompanyCategoryCreateNestedManyWithoutSubscriptionsInput
  createdAt: DateTimeISO
  id: String
  job_categories: JobListingCategoryCreateNestedManyWithoutSubscriptionsInput
  keywords: JobListingSubscriptionCreatekeywordsInput
  languages: JobListingSubscriptionCreatelanguagesInput
  level: JobListingLevel
  location: String
  metadata: JSON
  notification_frequency: JobListingSubscriptionNotificationFrequency!
  parameters: JSON
  type: JobListingEmploymentType
  user: UserCreateNestedOneWithoutSubscriptionsInput
  work_from: WorkFromHome
}

input JobListingSubscriptionCreateWithoutJob_categoriesInput {
  categories: CompanyCategoryCreateNestedManyWithoutSubscriptionsInput
  company: CompanyCreateNestedOneWithoutSubscriptionsInput
  createdAt: DateTimeISO
  id: String
  keywords: JobListingSubscriptionCreatekeywordsInput
  languages: JobListingSubscriptionCreatelanguagesInput
  level: JobListingLevel
  location: String
  metadata: JSON
  notification_frequency: JobListingSubscriptionNotificationFrequency!
  parameters: JSON
  type: JobListingEmploymentType
  user: UserCreateNestedOneWithoutSubscriptionsInput
  work_from: WorkFromHome
}

input JobListingSubscriptionCreateWithoutUserInput {
  categories: CompanyCategoryCreateNestedManyWithoutSubscriptionsInput
  company: CompanyCreateNestedOneWithoutSubscriptionsInput
  createdAt: DateTimeISO
  id: String
  job_categories: JobListingCategoryCreateNestedManyWithoutSubscriptionsInput
  keywords: JobListingSubscriptionCreatekeywordsInput
  languages: JobListingSubscriptionCreatelanguagesInput
  level: JobListingLevel
  location: String
  metadata: JSON
  notification_frequency: JobListingSubscriptionNotificationFrequency!
  parameters: JSON
  type: JobListingEmploymentType
  work_from: WorkFromHome
}

input JobListingSubscriptionCreatekeywordsInput {
  set: [String!]!
}

input JobListingSubscriptionCreatelanguagesInput {
  set: [String!]!
}

type JobListingSubscriptionGroupBy {
  _count: JobListingSubscriptionCountAggregate
  _max: JobListingSubscriptionMaxAggregate
  _min: JobListingSubscriptionMinAggregate
  company_id: String
  createdAt: DateTimeISO!
  id: String!
  keywords: [String!]
  languages: [String!]
  level: JobListingLevel
  location: String
  metadata: JSON
  notification_frequency: JobListingSubscriptionNotificationFrequency!
  parameters: JSON!
  type: JobListingEmploymentType
  updatedAt: DateTimeISO!
  user_id: String
  work_from: WorkFromHome
}

input JobListingSubscriptionListRelationFilter {
  every: JobListingSubscriptionWhereInput
  none: JobListingSubscriptionWhereInput
  some: JobListingSubscriptionWhereInput
}

type JobListingSubscriptionMaxAggregate {
  company_id: String
  createdAt: DateTimeISO
  id: String
  level: JobListingLevel
  location: String
  notification_frequency: JobListingSubscriptionNotificationFrequency
  type: JobListingEmploymentType
  updatedAt: DateTimeISO
  user_id: String
  work_from: WorkFromHome
}

input JobListingSubscriptionMaxOrderByAggregateInput {
  company_id: SortOrder
  createdAt: SortOrder
  id: SortOrder
  level: SortOrder
  location: SortOrder
  notification_frequency: SortOrder
  type: SortOrder
  user_id: SortOrder
  work_from: SortOrder
}

type JobListingSubscriptionMinAggregate {
  company_id: String
  createdAt: DateTimeISO
  id: String
  level: JobListingLevel
  location: String
  notification_frequency: JobListingSubscriptionNotificationFrequency
  type: JobListingEmploymentType
  updatedAt: DateTimeISO
  user_id: String
  work_from: WorkFromHome
}

input JobListingSubscriptionMinOrderByAggregateInput {
  company_id: SortOrder
  createdAt: SortOrder
  id: SortOrder
  level: SortOrder
  location: SortOrder
  notification_frequency: SortOrder
  type: SortOrder
  user_id: SortOrder
  work_from: SortOrder
}

enum JobListingSubscriptionNotificationFrequency {
  Daily
  Weekly
}

input JobListingSubscriptionOrderByRelationAggregateInput {
  _count: SortOrder
}

enum JobListingSubscriptionOrderByRelevanceFieldEnum {
  company_id
  id
  keywords
  languages
  location
  user_id
}

input JobListingSubscriptionOrderByRelevanceInput {
  fields: [JobListingSubscriptionOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input JobListingSubscriptionOrderByWithAggregationInput {
  _count: JobListingSubscriptionCountOrderByAggregateInput
  _max: JobListingSubscriptionMaxOrderByAggregateInput
  _min: JobListingSubscriptionMinOrderByAggregateInput
  company_id: SortOrderInput
  createdAt: SortOrder
  id: SortOrder
  keywords: SortOrder
  languages: SortOrder
  level: SortOrderInput
  location: SortOrderInput
  metadata: SortOrderInput
  notification_frequency: SortOrder
  parameters: SortOrder
  type: SortOrderInput
  user_id: SortOrderInput
  work_from: SortOrderInput
}

input JobListingSubscriptionOrderByWithRelationInput {
  _relevance: JobListingSubscriptionOrderByRelevanceInput
  categories: CompanyCategoryOrderByRelationAggregateInput
  company: CompanyOrderByWithRelationInput
  company_id: SortOrderInput
  createdAt: SortOrder
  id: SortOrder
  job_categories: JobListingCategoryOrderByRelationAggregateInput
  keywords: SortOrder
  languages: SortOrder
  level: SortOrderInput
  location: SortOrderInput
  metadata: SortOrderInput
  notification_frequency: SortOrder
  parameters: SortOrder
  type: SortOrderInput
  user: UserOrderByWithRelationInput
  user_id: SortOrderInput
  work_from: SortOrderInput
}

enum JobListingSubscriptionScalarFieldEnum {
  company_id
  createdAt
  id
  keywords
  languages
  level
  location
  metadata
  notification_frequency
  parameters
  type
  updatedAt
  user_id
  work_from
}

input JobListingSubscriptionScalarWhereInput {
  AND: [JobListingSubscriptionScalarWhereInput!]
  NOT: [JobListingSubscriptionScalarWhereInput!]
  OR: [JobListingSubscriptionScalarWhereInput!]
  company_id: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  keywords: StringNullableListFilter
  languages: StringNullableListFilter
  level: EnumJobListingLevelNullableFilter
  location: StringNullableFilter
  metadata: JsonNullableFilter
  notification_frequency: EnumJobListingSubscriptionNotificationFrequencyFilter
  parameters: JsonFilter
  type: EnumJobListingEmploymentTypeNullableFilter
  user_id: StringNullableFilter
  work_from: EnumWorkFromHomeNullableFilter
}

input JobListingSubscriptionScalarWhereWithAggregatesInput {
  AND: [JobListingSubscriptionScalarWhereWithAggregatesInput!]
  NOT: [JobListingSubscriptionScalarWhereWithAggregatesInput!]
  OR: [JobListingSubscriptionScalarWhereWithAggregatesInput!]
  company_id: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  keywords: StringNullableListFilter
  languages: StringNullableListFilter
  level: EnumJobListingLevelNullableWithAggregatesFilter
  location: StringNullableWithAggregatesFilter
  metadata: JsonNullableWithAggregatesFilter
  notification_frequency: EnumJobListingSubscriptionNotificationFrequencyWithAggregatesFilter
  parameters: JsonWithAggregatesFilter
  type: EnumJobListingEmploymentTypeNullableWithAggregatesFilter
  user_id: StringNullableWithAggregatesFilter
  work_from: EnumWorkFromHomeNullableWithAggregatesFilter
}

input JobListingSubscriptionUpdateInput {
  categories: CompanyCategoryUpdateManyWithoutSubscriptionsNestedInput
  company: CompanyUpdateOneWithoutSubscriptionsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  job_categories: JobListingCategoryUpdateManyWithoutSubscriptionsNestedInput
  keywords: JobListingSubscriptionUpdatekeywordsInput
  languages: JobListingSubscriptionUpdatelanguagesInput
  level: NullableEnumJobListingLevelFieldUpdateOperationsInput
  location: NullableStringFieldUpdateOperationsInput
  metadata: JSON
  notification_frequency: EnumJobListingSubscriptionNotificationFrequencyFieldUpdateOperationsInput
  parameters: JSON
  type: NullableEnumJobListingEmploymentTypeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutSubscriptionsNestedInput
  work_from: NullableEnumWorkFromHomeFieldUpdateOperationsInput
}

input JobListingSubscriptionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  keywords: JobListingSubscriptionUpdatekeywordsInput
  languages: JobListingSubscriptionUpdatelanguagesInput
  level: NullableEnumJobListingLevelFieldUpdateOperationsInput
  location: NullableStringFieldUpdateOperationsInput
  metadata: JSON
  notification_frequency: EnumJobListingSubscriptionNotificationFrequencyFieldUpdateOperationsInput
  parameters: JSON
  type: NullableEnumJobListingEmploymentTypeFieldUpdateOperationsInput
  work_from: NullableEnumWorkFromHomeFieldUpdateOperationsInput
}

input JobListingSubscriptionUpdateManyWithWhereWithoutCategoriesInput {
  data: JobListingSubscriptionUpdateManyMutationInput!
  where: JobListingSubscriptionScalarWhereInput!
}

input JobListingSubscriptionUpdateManyWithWhereWithoutCompanyInput {
  data: JobListingSubscriptionUpdateManyMutationInput!
  where: JobListingSubscriptionScalarWhereInput!
}

input JobListingSubscriptionUpdateManyWithWhereWithoutJob_categoriesInput {
  data: JobListingSubscriptionUpdateManyMutationInput!
  where: JobListingSubscriptionScalarWhereInput!
}

input JobListingSubscriptionUpdateManyWithWhereWithoutUserInput {
  data: JobListingSubscriptionUpdateManyMutationInput!
  where: JobListingSubscriptionScalarWhereInput!
}

input JobListingSubscriptionUpdateManyWithoutCategoriesNestedInput {
  connect: [JobListingSubscriptionWhereUniqueInput!]
  connectOrCreate: [JobListingSubscriptionCreateOrConnectWithoutCategoriesInput!]
  create: [JobListingSubscriptionCreateWithoutCategoriesInput!]
  delete: [JobListingSubscriptionWhereUniqueInput!]
  deleteMany: [JobListingSubscriptionScalarWhereInput!]
  disconnect: [JobListingSubscriptionWhereUniqueInput!]
  set: [JobListingSubscriptionWhereUniqueInput!]
  update: [JobListingSubscriptionUpdateWithWhereUniqueWithoutCategoriesInput!]
  updateMany: [JobListingSubscriptionUpdateManyWithWhereWithoutCategoriesInput!]
  upsert: [JobListingSubscriptionUpsertWithWhereUniqueWithoutCategoriesInput!]
}

input JobListingSubscriptionUpdateManyWithoutCompanyNestedInput {
  connect: [JobListingSubscriptionWhereUniqueInput!]
  connectOrCreate: [JobListingSubscriptionCreateOrConnectWithoutCompanyInput!]
  create: [JobListingSubscriptionCreateWithoutCompanyInput!]
  createMany: JobListingSubscriptionCreateManyCompanyInputEnvelope
  delete: [JobListingSubscriptionWhereUniqueInput!]
  deleteMany: [JobListingSubscriptionScalarWhereInput!]
  disconnect: [JobListingSubscriptionWhereUniqueInput!]
  set: [JobListingSubscriptionWhereUniqueInput!]
  update: [JobListingSubscriptionUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [JobListingSubscriptionUpdateManyWithWhereWithoutCompanyInput!]
  upsert: [JobListingSubscriptionUpsertWithWhereUniqueWithoutCompanyInput!]
}

input JobListingSubscriptionUpdateManyWithoutJob_categoriesNestedInput {
  connect: [JobListingSubscriptionWhereUniqueInput!]
  connectOrCreate: [JobListingSubscriptionCreateOrConnectWithoutJob_categoriesInput!]
  create: [JobListingSubscriptionCreateWithoutJob_categoriesInput!]
  delete: [JobListingSubscriptionWhereUniqueInput!]
  deleteMany: [JobListingSubscriptionScalarWhereInput!]
  disconnect: [JobListingSubscriptionWhereUniqueInput!]
  set: [JobListingSubscriptionWhereUniqueInput!]
  update: [JobListingSubscriptionUpdateWithWhereUniqueWithoutJob_categoriesInput!]
  updateMany: [JobListingSubscriptionUpdateManyWithWhereWithoutJob_categoriesInput!]
  upsert: [JobListingSubscriptionUpsertWithWhereUniqueWithoutJob_categoriesInput!]
}

input JobListingSubscriptionUpdateManyWithoutUserNestedInput {
  connect: [JobListingSubscriptionWhereUniqueInput!]
  connectOrCreate: [JobListingSubscriptionCreateOrConnectWithoutUserInput!]
  create: [JobListingSubscriptionCreateWithoutUserInput!]
  createMany: JobListingSubscriptionCreateManyUserInputEnvelope
  delete: [JobListingSubscriptionWhereUniqueInput!]
  deleteMany: [JobListingSubscriptionScalarWhereInput!]
  disconnect: [JobListingSubscriptionWhereUniqueInput!]
  set: [JobListingSubscriptionWhereUniqueInput!]
  update: [JobListingSubscriptionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [JobListingSubscriptionUpdateManyWithWhereWithoutUserInput!]
  upsert: [JobListingSubscriptionUpsertWithWhereUniqueWithoutUserInput!]
}

input JobListingSubscriptionUpdateWithWhereUniqueWithoutCategoriesInput {
  data: JobListingSubscriptionUpdateWithoutCategoriesInput!
  where: JobListingSubscriptionWhereUniqueInput!
}

input JobListingSubscriptionUpdateWithWhereUniqueWithoutCompanyInput {
  data: JobListingSubscriptionUpdateWithoutCompanyInput!
  where: JobListingSubscriptionWhereUniqueInput!
}

input JobListingSubscriptionUpdateWithWhereUniqueWithoutJob_categoriesInput {
  data: JobListingSubscriptionUpdateWithoutJob_categoriesInput!
  where: JobListingSubscriptionWhereUniqueInput!
}

input JobListingSubscriptionUpdateWithWhereUniqueWithoutUserInput {
  data: JobListingSubscriptionUpdateWithoutUserInput!
  where: JobListingSubscriptionWhereUniqueInput!
}

input JobListingSubscriptionUpdateWithoutCategoriesInput {
  company: CompanyUpdateOneWithoutSubscriptionsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  job_categories: JobListingCategoryUpdateManyWithoutSubscriptionsNestedInput
  keywords: JobListingSubscriptionUpdatekeywordsInput
  languages: JobListingSubscriptionUpdatelanguagesInput
  level: NullableEnumJobListingLevelFieldUpdateOperationsInput
  location: NullableStringFieldUpdateOperationsInput
  metadata: JSON
  notification_frequency: EnumJobListingSubscriptionNotificationFrequencyFieldUpdateOperationsInput
  parameters: JSON
  type: NullableEnumJobListingEmploymentTypeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutSubscriptionsNestedInput
  work_from: NullableEnumWorkFromHomeFieldUpdateOperationsInput
}

input JobListingSubscriptionUpdateWithoutCompanyInput {
  categories: CompanyCategoryUpdateManyWithoutSubscriptionsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  job_categories: JobListingCategoryUpdateManyWithoutSubscriptionsNestedInput
  keywords: JobListingSubscriptionUpdatekeywordsInput
  languages: JobListingSubscriptionUpdatelanguagesInput
  level: NullableEnumJobListingLevelFieldUpdateOperationsInput
  location: NullableStringFieldUpdateOperationsInput
  metadata: JSON
  notification_frequency: EnumJobListingSubscriptionNotificationFrequencyFieldUpdateOperationsInput
  parameters: JSON
  type: NullableEnumJobListingEmploymentTypeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutSubscriptionsNestedInput
  work_from: NullableEnumWorkFromHomeFieldUpdateOperationsInput
}

input JobListingSubscriptionUpdateWithoutJob_categoriesInput {
  categories: CompanyCategoryUpdateManyWithoutSubscriptionsNestedInput
  company: CompanyUpdateOneWithoutSubscriptionsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  keywords: JobListingSubscriptionUpdatekeywordsInput
  languages: JobListingSubscriptionUpdatelanguagesInput
  level: NullableEnumJobListingLevelFieldUpdateOperationsInput
  location: NullableStringFieldUpdateOperationsInput
  metadata: JSON
  notification_frequency: EnumJobListingSubscriptionNotificationFrequencyFieldUpdateOperationsInput
  parameters: JSON
  type: NullableEnumJobListingEmploymentTypeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutSubscriptionsNestedInput
  work_from: NullableEnumWorkFromHomeFieldUpdateOperationsInput
}

input JobListingSubscriptionUpdateWithoutUserInput {
  categories: CompanyCategoryUpdateManyWithoutSubscriptionsNestedInput
  company: CompanyUpdateOneWithoutSubscriptionsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  job_categories: JobListingCategoryUpdateManyWithoutSubscriptionsNestedInput
  keywords: JobListingSubscriptionUpdatekeywordsInput
  languages: JobListingSubscriptionUpdatelanguagesInput
  level: NullableEnumJobListingLevelFieldUpdateOperationsInput
  location: NullableStringFieldUpdateOperationsInput
  metadata: JSON
  notification_frequency: EnumJobListingSubscriptionNotificationFrequencyFieldUpdateOperationsInput
  parameters: JSON
  type: NullableEnumJobListingEmploymentTypeFieldUpdateOperationsInput
  work_from: NullableEnumWorkFromHomeFieldUpdateOperationsInput
}

input JobListingSubscriptionUpdatekeywordsInput {
  push: [String!]
  set: [String!]
}

input JobListingSubscriptionUpdatelanguagesInput {
  push: [String!]
  set: [String!]
}

input JobListingSubscriptionUpsertWithWhereUniqueWithoutCategoriesInput {
  create: JobListingSubscriptionCreateWithoutCategoriesInput!
  update: JobListingSubscriptionUpdateWithoutCategoriesInput!
  where: JobListingSubscriptionWhereUniqueInput!
}

input JobListingSubscriptionUpsertWithWhereUniqueWithoutCompanyInput {
  create: JobListingSubscriptionCreateWithoutCompanyInput!
  update: JobListingSubscriptionUpdateWithoutCompanyInput!
  where: JobListingSubscriptionWhereUniqueInput!
}

input JobListingSubscriptionUpsertWithWhereUniqueWithoutJob_categoriesInput {
  create: JobListingSubscriptionCreateWithoutJob_categoriesInput!
  update: JobListingSubscriptionUpdateWithoutJob_categoriesInput!
  where: JobListingSubscriptionWhereUniqueInput!
}

input JobListingSubscriptionUpsertWithWhereUniqueWithoutUserInput {
  create: JobListingSubscriptionCreateWithoutUserInput!
  update: JobListingSubscriptionUpdateWithoutUserInput!
  where: JobListingSubscriptionWhereUniqueInput!
}

input JobListingSubscriptionWhereInput {
  AND: [JobListingSubscriptionWhereInput!]
  NOT: [JobListingSubscriptionWhereInput!]
  OR: [JobListingSubscriptionWhereInput!]
  categories: CompanyCategoryListRelationFilter
  company: CompanyNullableRelationFilter
  company_id: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  job_categories: JobListingCategoryListRelationFilter
  keywords: StringNullableListFilter
  languages: StringNullableListFilter
  level: EnumJobListingLevelNullableFilter
  location: StringNullableFilter
  metadata: JsonNullableFilter
  notification_frequency: EnumJobListingSubscriptionNotificationFrequencyFilter
  parameters: JsonFilter
  type: EnumJobListingEmploymentTypeNullableFilter
  user: UserNullableRelationFilter
  user_id: StringNullableFilter
  work_from: EnumWorkFromHomeNullableFilter
}

input JobListingSubscriptionWhereUniqueInput {
  AND: [JobListingSubscriptionWhereInput!]
  NOT: [JobListingSubscriptionWhereInput!]
  OR: [JobListingSubscriptionWhereInput!]
  categories: CompanyCategoryListRelationFilter
  company: CompanyNullableRelationFilter
  company_id: StringNullableFilter
  createdAt: DateTimeFilter
  id: String
  job_categories: JobListingCategoryListRelationFilter
  keywords: StringNullableListFilter
  languages: StringNullableListFilter
  level: EnumJobListingLevelNullableFilter
  location: StringNullableFilter
  metadata: JsonNullableFilter
  notification_frequency: EnumJobListingSubscriptionNotificationFrequencyFilter
  parameters: JsonFilter
  type: EnumJobListingEmploymentTypeNullableFilter
  user: UserNullableRelationFilter
  user_id: StringNullableFilter
  work_from: EnumWorkFromHomeNullableFilter
}

input JobListingUpdateInput {
  categories: CategoryOnJobListingUpdateManyWithoutListingNestedInput
  company: CompanyUpdateOneRequiredWithoutListingsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description_raw: StringFieldUpdateOperationsInput
  external_application_url: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  keywords: JobListingUpdatekeywordsInput
  languages: JobListingUpdatelanguagesInput
  level: NullableEnumJobListingLevelFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  parameters: JSON
  saves: SavedListingUpdateManyWithoutListingNestedInput
  type: NullableEnumJobListingEmploymentTypeFieldUpdateOperationsInput
  work_from: NullableEnumWorkFromHomeFieldUpdateOperationsInput
}

input JobListingUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description_raw: StringFieldUpdateOperationsInput
  external_application_url: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  keywords: JobListingUpdatekeywordsInput
  languages: JobListingUpdatelanguagesInput
  level: NullableEnumJobListingLevelFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  parameters: JSON
  type: NullableEnumJobListingEmploymentTypeFieldUpdateOperationsInput
  work_from: NullableEnumWorkFromHomeFieldUpdateOperationsInput
}

input JobListingUpdateManyWithWhereWithoutCompanyInput {
  data: JobListingUpdateManyMutationInput!
  where: JobListingScalarWhereInput!
}

input JobListingUpdateManyWithoutCompanyNestedInput {
  connect: [JobListingWhereUniqueInput!]
  connectOrCreate: [JobListingCreateOrConnectWithoutCompanyInput!]
  create: [JobListingCreateWithoutCompanyInput!]
  createMany: JobListingCreateManyCompanyInputEnvelope
  delete: [JobListingWhereUniqueInput!]
  deleteMany: [JobListingScalarWhereInput!]
  disconnect: [JobListingWhereUniqueInput!]
  set: [JobListingWhereUniqueInput!]
  update: [JobListingUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [JobListingUpdateManyWithWhereWithoutCompanyInput!]
  upsert: [JobListingUpsertWithWhereUniqueWithoutCompanyInput!]
}

input JobListingUpdateOneRequiredWithoutCategoriesNestedInput {
  connect: JobListingWhereUniqueInput
  connectOrCreate: JobListingCreateOrConnectWithoutCategoriesInput
  create: JobListingCreateWithoutCategoriesInput
  update: JobListingUpdateToOneWithWhereWithoutCategoriesInput
  upsert: JobListingUpsertWithoutCategoriesInput
}

input JobListingUpdateOneRequiredWithoutSavesNestedInput {
  connect: JobListingWhereUniqueInput
  connectOrCreate: JobListingCreateOrConnectWithoutSavesInput
  create: JobListingCreateWithoutSavesInput
  update: JobListingUpdateToOneWithWhereWithoutSavesInput
  upsert: JobListingUpsertWithoutSavesInput
}

input JobListingUpdateToOneWithWhereWithoutCategoriesInput {
  data: JobListingUpdateWithoutCategoriesInput!
  where: JobListingWhereInput
}

input JobListingUpdateToOneWithWhereWithoutSavesInput {
  data: JobListingUpdateWithoutSavesInput!
  where: JobListingWhereInput
}

input JobListingUpdateWithWhereUniqueWithoutCompanyInput {
  data: JobListingUpdateWithoutCompanyInput!
  where: JobListingWhereUniqueInput!
}

input JobListingUpdateWithoutCategoriesInput {
  company: CompanyUpdateOneRequiredWithoutListingsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description_raw: StringFieldUpdateOperationsInput
  external_application_url: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  keywords: JobListingUpdatekeywordsInput
  languages: JobListingUpdatelanguagesInput
  level: NullableEnumJobListingLevelFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  parameters: JSON
  saves: SavedListingUpdateManyWithoutListingNestedInput
  type: NullableEnumJobListingEmploymentTypeFieldUpdateOperationsInput
  work_from: NullableEnumWorkFromHomeFieldUpdateOperationsInput
}

input JobListingUpdateWithoutCompanyInput {
  categories: CategoryOnJobListingUpdateManyWithoutListingNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description_raw: StringFieldUpdateOperationsInput
  external_application_url: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  keywords: JobListingUpdatekeywordsInput
  languages: JobListingUpdatelanguagesInput
  level: NullableEnumJobListingLevelFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  parameters: JSON
  saves: SavedListingUpdateManyWithoutListingNestedInput
  type: NullableEnumJobListingEmploymentTypeFieldUpdateOperationsInput
  work_from: NullableEnumWorkFromHomeFieldUpdateOperationsInput
}

input JobListingUpdateWithoutSavesInput {
  categories: CategoryOnJobListingUpdateManyWithoutListingNestedInput
  company: CompanyUpdateOneRequiredWithoutListingsNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description_raw: StringFieldUpdateOperationsInput
  external_application_url: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  keywords: JobListingUpdatekeywordsInput
  languages: JobListingUpdatelanguagesInput
  level: NullableEnumJobListingLevelFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  parameters: JSON
  type: NullableEnumJobListingEmploymentTypeFieldUpdateOperationsInput
  work_from: NullableEnumWorkFromHomeFieldUpdateOperationsInput
}

input JobListingUpdatekeywordsInput {
  push: [String!]
  set: [String!]
}

input JobListingUpdatelanguagesInput {
  push: [String!]
  set: [String!]
}

input JobListingUpsertWithWhereUniqueWithoutCompanyInput {
  create: JobListingCreateWithoutCompanyInput!
  update: JobListingUpdateWithoutCompanyInput!
  where: JobListingWhereUniqueInput!
}

input JobListingUpsertWithoutCategoriesInput {
  create: JobListingCreateWithoutCategoriesInput!
  update: JobListingUpdateWithoutCategoriesInput!
  where: JobListingWhereInput
}

input JobListingUpsertWithoutSavesInput {
  create: JobListingCreateWithoutSavesInput!
  update: JobListingUpdateWithoutSavesInput!
  where: JobListingWhereInput
}

input JobListingWhereInput {
  AND: [JobListingWhereInput!]
  NOT: [JobListingWhereInput!]
  OR: [JobListingWhereInput!]
  categories: CategoryOnJobListingListRelationFilter
  company: CompanyRelationFilter
  company_id: StringFilter
  createdAt: DateTimeFilter
  description_raw: StringFilter
  external_application_url: StringNullableFilter
  id: StringFilter
  keywords: StringNullableListFilter
  languages: StringNullableListFilter
  level: EnumJobListingLevelNullableFilter
  location: StringFilter
  name: StringFilter
  parameters: JsonFilter
  saves: SavedListingListRelationFilter
  type: EnumJobListingEmploymentTypeNullableFilter
  work_from: EnumWorkFromHomeNullableFilter
}

input JobListingWhereUniqueInput {
  AND: [JobListingWhereInput!]
  NOT: [JobListingWhereInput!]
  OR: [JobListingWhereInput!]
  categories: CategoryOnJobListingListRelationFilter
  company: CompanyRelationFilter
  company_id: StringFilter
  createdAt: DateTimeFilter
  description_raw: StringFilter
  external_application_url: StringNullableFilter
  id: String
  keywords: StringNullableListFilter
  languages: StringNullableListFilter
  level: EnumJobListingLevelNullableFilter
  location: StringFilter
  name: StringFilter
  parameters: JsonFilter
  saves: SavedListingListRelationFilter
  type: EnumJobListingEmploymentTypeNullableFilter
  work_from: EnumWorkFromHomeNullableFilter
}

input JsonFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input JsonNullableFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input JsonNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedJsonNullableFilter
  _min: NestedJsonNullableFilter
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input JsonWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedJsonFilter
  _min: NestedJsonFilter
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

"""
A field whose value is a valid decimal degrees latitude number (53.471): https://en.wikipedia.org/wiki/Latitude
"""
scalar Latitude

"""
A field whose value is a valid decimal degrees longitude number (53.471): https://en.wikipedia.org/wiki/Longitude
"""
scalar Longitude

type Mutation {
  confirmJobListingSubscription(subscriptionId: String!, subscriptionKey: String!): JobListingSubscription
  createManyAccount(data: [AccountCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyCompany(data: [CompanyCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyCompanyCategory(data: [CompanyCategoryCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyJobListing(data: [JobListingCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyJobListingCategory(data: [JobListingCategoryCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyJobListingSubscription(data: [JobListingSubscriptionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManySavedListing(data: [SavedListingCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManySession(data: [SessionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyVerificationToken(data: [VerificationTokenCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneAccount(data: AccountCreateInput!, relationLoadStrategy: RelationLoadStrategy): Account!
  createOneCompany(data: CompanyCreateInput!, relationLoadStrategy: RelationLoadStrategy): Company!
  createOneCompanyCategory(data: CompanyCategoryCreateInput!, relationLoadStrategy: RelationLoadStrategy): CompanyCategory!
  createOneJobListing(data: JobListingCreateInput!, relationLoadStrategy: RelationLoadStrategy): JobListing!
  createOneJobListingCategory(data: JobListingCategoryCreateInput!, relationLoadStrategy: RelationLoadStrategy): JobListingCategory!
  createOneJobListingSubscription(data: JobListingSubscriptionCreateInput!, relationLoadStrategy: RelationLoadStrategy): JobListingSubscription!
  createOneSavedListing(data: SavedListingCreateInput!, relationLoadStrategy: RelationLoadStrategy): SavedListing!
  createOneSession(data: SessionCreateInput!, relationLoadStrategy: RelationLoadStrategy): Session!
  createOneUser(data: UserCreateInput!, relationLoadStrategy: RelationLoadStrategy): User!
  createOneVerificationToken(data: VerificationTokenCreateInput!, relationLoadStrategy: RelationLoadStrategy): VerificationToken!
  deleteAllSubscriptions: DeleteAllSubscriptionsResponse!
  deleteManyAccount(where: AccountWhereInput): AffectedRowsOutput!
  deleteManyCompany(where: CompanyWhereInput): AffectedRowsOutput!
  deleteManyCompanyCategory(where: CompanyCategoryWhereInput): AffectedRowsOutput!
  deleteManyJobListing(where: JobListingWhereInput): AffectedRowsOutput!
  deleteManyJobListingCategory(where: JobListingCategoryWhereInput): AffectedRowsOutput!
  deleteManyJobListingSubscription(where: JobListingSubscriptionWhereInput): AffectedRowsOutput!
  deleteManySavedListing(where: SavedListingWhereInput): AffectedRowsOutput!
  deleteManySession(where: SessionWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteManyVerificationToken(where: VerificationTokenWhereInput): AffectedRowsOutput!
  deleteOneAccount(relationLoadStrategy: RelationLoadStrategy, where: AccountWhereUniqueInput!): Account
  deleteOneCompany(relationLoadStrategy: RelationLoadStrategy, where: CompanyWhereUniqueInput!): Company
  deleteOneCompanyCategory(relationLoadStrategy: RelationLoadStrategy, where: CompanyCategoryWhereUniqueInput!): CompanyCategory
  deleteOneJobListing(relationLoadStrategy: RelationLoadStrategy, where: JobListingWhereUniqueInput!): JobListing
  deleteOneJobListingCategory(relationLoadStrategy: RelationLoadStrategy, where: JobListingCategoryWhereUniqueInput!): JobListingCategory
  deleteOneJobListingSubscription(relationLoadStrategy: RelationLoadStrategy, where: JobListingSubscriptionWhereUniqueInput!): JobListingSubscription
  deleteOneSavedListing(relationLoadStrategy: RelationLoadStrategy, where: SavedListingWhereUniqueInput!): SavedListing
  deleteOneSession(relationLoadStrategy: RelationLoadStrategy, where: SessionWhereUniqueInput!): Session
  deleteOneUser(relationLoadStrategy: RelationLoadStrategy, where: UserWhereUniqueInput!): User
  deleteOneVerificationToken(relationLoadStrategy: RelationLoadStrategy, where: VerificationTokenWhereUniqueInput!): VerificationToken
  fileUpload(file: Upload!): Boolean!
  generateSignUpEmailCode(email: EmailAddress!): SignUpWithEmailCodeResponse!
  saveJobListing(listingId: String!): SavedListing
  sendVerificationEmail: SendVerificationEmailResponse!
  signIn(signInModel: UserSignInInput!): User
  signInWithEmailCode(code: Int!, email: EmailAddress!, identifier: String!): User
  signOut: Boolean!
  signUp(signUpModel: UserSignUpInput!): User!
  signUpWithEmailCode(code: Int!, email: EmailAddress!, firstName: String!, identifier: String!, lastName: String!): User!
  subscribeToCompanyListings(input: SubscribeToJobListingsInput!): JobListingSubscription
  unSaveJobListing(listingId: String!): Boolean
  unSubscribeToJobListings(subscriptionId: String!): Boolean!
  updateManyAccount(data: AccountUpdateManyMutationInput!, where: AccountWhereInput): AffectedRowsOutput!
  updateManyCompany(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): AffectedRowsOutput!
  updateManyCompanyCategory(data: CompanyCategoryUpdateManyMutationInput!, where: CompanyCategoryWhereInput): AffectedRowsOutput!
  updateManyJobListing(data: JobListingUpdateManyMutationInput!, where: JobListingWhereInput): AffectedRowsOutput!
  updateManyJobListingCategory(data: JobListingCategoryUpdateManyMutationInput!, where: JobListingCategoryWhereInput): AffectedRowsOutput!
  updateManyJobListingSubscription(data: JobListingSubscriptionUpdateManyMutationInput!, where: JobListingSubscriptionWhereInput): AffectedRowsOutput!
  updateManySavedListing(data: SavedListingUpdateManyMutationInput!, where: SavedListingWhereInput): AffectedRowsOutput!
  updateManySession(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateManyVerificationToken(data: VerificationTokenUpdateManyMutationInput!, where: VerificationTokenWhereInput): AffectedRowsOutput!
  updateOneAccount(data: AccountUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: AccountWhereUniqueInput!): Account
  updateOneCompany(data: CompanyUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: CompanyWhereUniqueInput!): Company
  updateOneCompanyCategory(data: CompanyCategoryUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: CompanyCategoryWhereUniqueInput!): CompanyCategory
  updateOneJobListing(data: JobListingUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: JobListingWhereUniqueInput!): JobListing
  updateOneJobListingCategory(data: JobListingCategoryUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: JobListingCategoryWhereUniqueInput!): JobListingCategory
  updateOneJobListingSubscription(data: JobListingSubscriptionUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: JobListingSubscriptionWhereUniqueInput!): JobListingSubscription
  updateOneSavedListing(data: SavedListingUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: SavedListingWhereUniqueInput!): SavedListing
  updateOneSession(data: SessionUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: SessionWhereUniqueInput!): Session
  updateOneUser(data: UserUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: UserWhereUniqueInput!): User
  updateOneVerificationToken(data: VerificationTokenUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: VerificationTokenWhereUniqueInput!): VerificationToken
  upsertOneAccount(create: AccountCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account!
  upsertOneCompany(create: CompanyCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company!
  upsertOneCompanyCategory(create: CompanyCategoryCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: CompanyCategoryUpdateInput!, where: CompanyCategoryWhereUniqueInput!): CompanyCategory!
  upsertOneJobListing(create: JobListingCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: JobListingUpdateInput!, where: JobListingWhereUniqueInput!): JobListing!
  upsertOneJobListingCategory(create: JobListingCategoryCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: JobListingCategoryUpdateInput!, where: JobListingCategoryWhereUniqueInput!): JobListingCategory!
  upsertOneJobListingSubscription(create: JobListingSubscriptionCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: JobListingSubscriptionUpdateInput!, where: JobListingSubscriptionWhereUniqueInput!): JobListingSubscription!
  upsertOneSavedListing(create: SavedListingCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: SavedListingUpdateInput!, where: SavedListingWhereUniqueInput!): SavedListing!
  upsertOneSession(create: SessionCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session!
  upsertOneUser(create: UserCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertOneVerificationToken(create: VerificationTokenCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: VerificationTokenUpdateInput!, where: VerificationTokenWhereUniqueInput!): VerificationToken!
  verifyEmail: VerifyEmailResponse!
}

input NestedDateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeNullableFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedEnumJobListingEmploymentTypeNullableFilter {
  equals: JobListingEmploymentType
  in: [JobListingEmploymentType!]
  not: NestedEnumJobListingEmploymentTypeNullableFilter
  notIn: [JobListingEmploymentType!]
}

input NestedEnumJobListingEmploymentTypeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumJobListingEmploymentTypeNullableFilter
  _min: NestedEnumJobListingEmploymentTypeNullableFilter
  equals: JobListingEmploymentType
  in: [JobListingEmploymentType!]
  not: NestedEnumJobListingEmploymentTypeNullableWithAggregatesFilter
  notIn: [JobListingEmploymentType!]
}

input NestedEnumJobListingLevelNullableFilter {
  equals: JobListingLevel
  in: [JobListingLevel!]
  not: NestedEnumJobListingLevelNullableFilter
  notIn: [JobListingLevel!]
}

input NestedEnumJobListingLevelNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumJobListingLevelNullableFilter
  _min: NestedEnumJobListingLevelNullableFilter
  equals: JobListingLevel
  in: [JobListingLevel!]
  not: NestedEnumJobListingLevelNullableWithAggregatesFilter
  notIn: [JobListingLevel!]
}

input NestedEnumJobListingSubscriptionNotificationFrequencyFilter {
  equals: JobListingSubscriptionNotificationFrequency
  in: [JobListingSubscriptionNotificationFrequency!]
  not: NestedEnumJobListingSubscriptionNotificationFrequencyFilter
  notIn: [JobListingSubscriptionNotificationFrequency!]
}

input NestedEnumJobListingSubscriptionNotificationFrequencyWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumJobListingSubscriptionNotificationFrequencyFilter
  _min: NestedEnumJobListingSubscriptionNotificationFrequencyFilter
  equals: JobListingSubscriptionNotificationFrequency
  in: [JobListingSubscriptionNotificationFrequency!]
  not: NestedEnumJobListingSubscriptionNotificationFrequencyWithAggregatesFilter
  notIn: [JobListingSubscriptionNotificationFrequency!]
}

input NestedEnumWorkFromHomeNullableFilter {
  equals: WorkFromHome
  in: [WorkFromHome!]
  not: NestedEnumWorkFromHomeNullableFilter
  notIn: [WorkFromHome!]
}

input NestedEnumWorkFromHomeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumWorkFromHomeNullableFilter
  _min: NestedEnumWorkFromHomeNullableFilter
  equals: WorkFromHome
  in: [WorkFromHome!]
  not: NestedEnumWorkFromHomeNullableWithAggregatesFilter
  notIn: [WorkFromHome!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedJsonFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input NestedJsonNullableFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input NullableEnumJobListingEmploymentTypeFieldUpdateOperationsInput {
  set: JobListingEmploymentType
}

input NullableEnumJobListingLevelFieldUpdateOperationsInput {
  set: JobListingLevel
}

input NullableEnumWorkFromHomeFieldUpdateOperationsInput {
  set: WorkFromHome
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

type Query {
  account(relationLoadStrategy: RelationLoadStrategy, where: AccountWhereUniqueInput!): Account
  accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: AccountWhereInput): [Account!]!
  aggregateAccount(cursor: AccountWhereUniqueInput, orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): AggregateAccount!
  aggregateCompany(cursor: CompanyWhereUniqueInput, orderBy: [CompanyOrderByWithRelationInput!], skip: Int, take: Int, where: CompanyWhereInput): AggregateCompany!
  aggregateCompanyCategory(cursor: CompanyCategoryWhereUniqueInput, orderBy: [CompanyCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CompanyCategoryWhereInput): AggregateCompanyCategory!
  aggregateJobListing(cursor: JobListingWhereUniqueInput, orderBy: [JobListingOrderByWithRelationInput!], skip: Int, take: Int, where: JobListingWhereInput): AggregateJobListing!
  aggregateJobListingCategory(cursor: JobListingCategoryWhereUniqueInput, orderBy: [JobListingCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: JobListingCategoryWhereInput): AggregateJobListingCategory!
  aggregateJobListingSubscription(cursor: JobListingSubscriptionWhereUniqueInput, orderBy: [JobListingSubscriptionOrderByWithRelationInput!], skip: Int, take: Int, where: JobListingSubscriptionWhereInput): AggregateJobListingSubscription!
  aggregateSavedListing(cursor: SavedListingWhereUniqueInput, orderBy: [SavedListingOrderByWithRelationInput!], skip: Int, take: Int, where: SavedListingWhereInput): AggregateSavedListing!
  aggregateSession(cursor: SessionWhereUniqueInput, orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): AggregateSession!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  aggregateVerificationToken(cursor: VerificationTokenWhereUniqueInput, orderBy: [VerificationTokenOrderByWithRelationInput!], skip: Int, take: Int, where: VerificationTokenWhereInput): AggregateVerificationToken!
  companies(cursor: CompanyWhereUniqueInput, distinct: [CompanyScalarFieldEnum!], orderBy: [CompanyOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: CompanyWhereInput): [Company!]!
  company(relationLoadStrategy: RelationLoadStrategy, where: CompanyWhereUniqueInput!): Company
  companyCategories(cursor: CompanyCategoryWhereUniqueInput, distinct: [CompanyCategoryScalarFieldEnum!], orderBy: [CompanyCategoryOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: CompanyCategoryWhereInput): [CompanyCategory!]!
  companyCategory(relationLoadStrategy: RelationLoadStrategy, where: CompanyCategoryWhereUniqueInput!): CompanyCategory
  findById(id: String!): User!
  findFirstAccount(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: AccountWhereInput): Account
  findFirstAccountOrThrow(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: AccountWhereInput): Account
  findFirstCompany(cursor: CompanyWhereUniqueInput, distinct: [CompanyScalarFieldEnum!], orderBy: [CompanyOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: CompanyWhereInput): Company
  findFirstCompanyCategory(cursor: CompanyCategoryWhereUniqueInput, distinct: [CompanyCategoryScalarFieldEnum!], orderBy: [CompanyCategoryOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: CompanyCategoryWhereInput): CompanyCategory
  findFirstCompanyCategoryOrThrow(cursor: CompanyCategoryWhereUniqueInput, distinct: [CompanyCategoryScalarFieldEnum!], orderBy: [CompanyCategoryOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: CompanyCategoryWhereInput): CompanyCategory
  findFirstCompanyOrThrow(cursor: CompanyWhereUniqueInput, distinct: [CompanyScalarFieldEnum!], orderBy: [CompanyOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: CompanyWhereInput): Company
  findFirstJobListing(cursor: JobListingWhereUniqueInput, distinct: [JobListingScalarFieldEnum!], orderBy: [JobListingOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: JobListingWhereInput): JobListing
  findFirstJobListingCategory(cursor: JobListingCategoryWhereUniqueInput, distinct: [JobListingCategoryScalarFieldEnum!], orderBy: [JobListingCategoryOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: JobListingCategoryWhereInput): JobListingCategory
  findFirstJobListingCategoryOrThrow(cursor: JobListingCategoryWhereUniqueInput, distinct: [JobListingCategoryScalarFieldEnum!], orderBy: [JobListingCategoryOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: JobListingCategoryWhereInput): JobListingCategory
  findFirstJobListingOrThrow(cursor: JobListingWhereUniqueInput, distinct: [JobListingScalarFieldEnum!], orderBy: [JobListingOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: JobListingWhereInput): JobListing
  findFirstJobListingSubscription(cursor: JobListingSubscriptionWhereUniqueInput, distinct: [JobListingSubscriptionScalarFieldEnum!], orderBy: [JobListingSubscriptionOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: JobListingSubscriptionWhereInput): JobListingSubscription
  findFirstJobListingSubscriptionOrThrow(cursor: JobListingSubscriptionWhereUniqueInput, distinct: [JobListingSubscriptionScalarFieldEnum!], orderBy: [JobListingSubscriptionOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: JobListingSubscriptionWhereInput): JobListingSubscription
  findFirstSavedListing(cursor: SavedListingWhereUniqueInput, distinct: [SavedListingScalarFieldEnum!], orderBy: [SavedListingOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: SavedListingWhereInput): SavedListing
  findFirstSavedListingOrThrow(cursor: SavedListingWhereUniqueInput, distinct: [SavedListingScalarFieldEnum!], orderBy: [SavedListingOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: SavedListingWhereInput): SavedListing
  findFirstSession(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: SessionWhereInput): Session
  findFirstSessionOrThrow(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: SessionWhereInput): Session
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: UserWhereInput): User
  findFirstUserOrThrow(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: UserWhereInput): User
  findFirstVerificationToken(cursor: VerificationTokenWhereUniqueInput, distinct: [VerificationTokenScalarFieldEnum!], orderBy: [VerificationTokenOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: VerificationTokenWhereInput): VerificationToken
  findFirstVerificationTokenOrThrow(cursor: VerificationTokenWhereUniqueInput, distinct: [VerificationTokenScalarFieldEnum!], orderBy: [VerificationTokenOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: VerificationTokenWhereInput): VerificationToken
  getAccount(relationLoadStrategy: RelationLoadStrategy, where: AccountWhereUniqueInput!): Account
  getCompany(relationLoadStrategy: RelationLoadStrategy, where: CompanyWhereUniqueInput!): Company
  getCompanyCategory(relationLoadStrategy: RelationLoadStrategy, where: CompanyCategoryWhereUniqueInput!): CompanyCategory
  getJobListing(relationLoadStrategy: RelationLoadStrategy, where: JobListingWhereUniqueInput!): JobListing
  getJobListingCategory(relationLoadStrategy: RelationLoadStrategy, where: JobListingCategoryWhereUniqueInput!): JobListingCategory
  getJobListingSubscription(relationLoadStrategy: RelationLoadStrategy, where: JobListingSubscriptionWhereUniqueInput!): JobListingSubscription
  getSavedListing(relationLoadStrategy: RelationLoadStrategy, where: SavedListingWhereUniqueInput!): SavedListing
  getSession(relationLoadStrategy: RelationLoadStrategy, where: SessionWhereUniqueInput!): Session
  getTopCompanies(input: GetTopCompaniesInput!): [Company!]!
  getTopListingCategories(input: GetTopListingCategoriesInput!): [JobListingCategory!]!
  getUser(relationLoadStrategy: RelationLoadStrategy, where: UserWhereUniqueInput!): User
  getVerificationToken(relationLoadStrategy: RelationLoadStrategy, where: VerificationTokenWhereUniqueInput!): VerificationToken
  googleLoginUrl(redirect_url: String): String!
  groupByAccount(by: [AccountScalarFieldEnum!]!, having: AccountScalarWhereWithAggregatesInput, orderBy: [AccountOrderByWithAggregationInput!], skip: Int, take: Int, where: AccountWhereInput): [AccountGroupBy!]!
  groupByCompany(by: [CompanyScalarFieldEnum!]!, having: CompanyScalarWhereWithAggregatesInput, orderBy: [CompanyOrderByWithAggregationInput!], skip: Int, take: Int, where: CompanyWhereInput): [CompanyGroupBy!]!
  groupByCompanyCategory(by: [CompanyCategoryScalarFieldEnum!]!, having: CompanyCategoryScalarWhereWithAggregatesInput, orderBy: [CompanyCategoryOrderByWithAggregationInput!], skip: Int, take: Int, where: CompanyCategoryWhereInput): [CompanyCategoryGroupBy!]!
  groupByJobListing(by: [JobListingScalarFieldEnum!]!, having: JobListingScalarWhereWithAggregatesInput, orderBy: [JobListingOrderByWithAggregationInput!], skip: Int, take: Int, where: JobListingWhereInput): [JobListingGroupBy!]!
  groupByJobListingCategory(by: [JobListingCategoryScalarFieldEnum!]!, having: JobListingCategoryScalarWhereWithAggregatesInput, orderBy: [JobListingCategoryOrderByWithAggregationInput!], skip: Int, take: Int, where: JobListingCategoryWhereInput): [JobListingCategoryGroupBy!]!
  groupByJobListingSubscription(by: [JobListingSubscriptionScalarFieldEnum!]!, having: JobListingSubscriptionScalarWhereWithAggregatesInput, orderBy: [JobListingSubscriptionOrderByWithAggregationInput!], skip: Int, take: Int, where: JobListingSubscriptionWhereInput): [JobListingSubscriptionGroupBy!]!
  groupBySavedListing(by: [SavedListingScalarFieldEnum!]!, having: SavedListingScalarWhereWithAggregatesInput, orderBy: [SavedListingOrderByWithAggregationInput!], skip: Int, take: Int, where: SavedListingWhereInput): [SavedListingGroupBy!]!
  groupBySession(by: [SessionScalarFieldEnum!]!, having: SessionScalarWhereWithAggregatesInput, orderBy: [SessionOrderByWithAggregationInput!], skip: Int, take: Int, where: SessionWhereInput): [SessionGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  groupByVerificationToken(by: [VerificationTokenScalarFieldEnum!]!, having: VerificationTokenScalarWhereWithAggregatesInput, orderBy: [VerificationTokenOrderByWithAggregationInput!], skip: Int, take: Int, where: VerificationTokenWhereInput): [VerificationTokenGroupBy!]!
  jobListing(relationLoadStrategy: RelationLoadStrategy, where: JobListingWhereUniqueInput!): JobListing
  jobListingCategories(cursor: JobListingCategoryWhereUniqueInput, distinct: [JobListingCategoryScalarFieldEnum!], orderBy: [JobListingCategoryOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: JobListingCategoryWhereInput): [JobListingCategory!]!
  jobListingCategory(relationLoadStrategy: RelationLoadStrategy, where: JobListingCategoryWhereUniqueInput!): JobListingCategory
  jobListingSubscription(relationLoadStrategy: RelationLoadStrategy, where: JobListingSubscriptionWhereUniqueInput!): JobListingSubscription
  jobListingSubscriptions(cursor: JobListingSubscriptionWhereUniqueInput, distinct: [JobListingSubscriptionScalarFieldEnum!], orderBy: [JobListingSubscriptionOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: JobListingSubscriptionWhereInput): [JobListingSubscription!]!
  jobListings(cursor: JobListingWhereUniqueInput, distinct: [JobListingScalarFieldEnum!], orderBy: [JobListingOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: JobListingWhereInput): [JobListing!]!
  me: User
  mySubscriptions(input: GetSubscriptionsInput!): [JobListingSubscription!]!
  savedListing(relationLoadStrategy: RelationLoadStrategy, where: SavedListingWhereUniqueInput!): SavedListing
  savedListings(cursor: SavedListingWhereUniqueInput, distinct: [SavedListingScalarFieldEnum!], orderBy: [SavedListingOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: SavedListingWhereInput): [SavedListing!]!
  search(search: UsersSearchInput! = {limit: 10, search: ""}): [UserSearchResponse!]!
  session(relationLoadStrategy: RelationLoadStrategy, where: SessionWhereUniqueInput!): Session
  sessions(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: SessionWhereInput): [Session!]!
  user(relationLoadStrategy: RelationLoadStrategy, where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: UserWhereInput): [User!]!
  verificationToken(relationLoadStrategy: RelationLoadStrategy, where: VerificationTokenWhereUniqueInput!): VerificationToken
  verificationTokens(cursor: VerificationTokenWhereUniqueInput, distinct: [VerificationTokenScalarFieldEnum!], orderBy: [VerificationTokenOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: VerificationTokenWhereInput): [VerificationToken!]!
}

enum QueryMode {
  default
  insensitive
}

enum RelationLoadStrategy {
  join
  query
}

type SavedListing {
  createdAt: DateTimeISO!
  id: ID!
  listing: JobListing!
  listing_id: String!
  metadata: JSON
  updatedAt: DateTimeISO!
  user: User!
  userId: String!
}

type SavedListingCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  listing_id: Int!
  metadata: Int!
  updatedAt: Int!
  userId: Int!
}

input SavedListingCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  listing_id: SortOrder
  metadata: SortOrder
  userId: SortOrder
}

input SavedListingCreateInput {
  createdAt: DateTimeISO
  id: String
  listing: JobListingCreateNestedOneWithoutSavesInput!
  metadata: JSON
  user: UserCreateNestedOneWithoutSaved_listingsInput!
}

input SavedListingCreateManyInput {
  createdAt: DateTimeISO
  id: String
  listing_id: String!
  metadata: JSON
  userId: String!
}

input SavedListingCreateManyListingInput {
  createdAt: DateTimeISO
  id: String
  metadata: JSON
  userId: String!
}

input SavedListingCreateManyListingInputEnvelope {
  data: [SavedListingCreateManyListingInput!]!
  skipDuplicates: Boolean
}

input SavedListingCreateManyUserInput {
  createdAt: DateTimeISO
  id: String
  listing_id: String!
  metadata: JSON
}

input SavedListingCreateManyUserInputEnvelope {
  data: [SavedListingCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input SavedListingCreateNestedManyWithoutListingInput {
  connect: [SavedListingWhereUniqueInput!]
  connectOrCreate: [SavedListingCreateOrConnectWithoutListingInput!]
  create: [SavedListingCreateWithoutListingInput!]
  createMany: SavedListingCreateManyListingInputEnvelope
}

input SavedListingCreateNestedManyWithoutUserInput {
  connect: [SavedListingWhereUniqueInput!]
  connectOrCreate: [SavedListingCreateOrConnectWithoutUserInput!]
  create: [SavedListingCreateWithoutUserInput!]
  createMany: SavedListingCreateManyUserInputEnvelope
}

input SavedListingCreateOrConnectWithoutListingInput {
  create: SavedListingCreateWithoutListingInput!
  where: SavedListingWhereUniqueInput!
}

input SavedListingCreateOrConnectWithoutUserInput {
  create: SavedListingCreateWithoutUserInput!
  where: SavedListingWhereUniqueInput!
}

input SavedListingCreateWithoutListingInput {
  createdAt: DateTimeISO
  id: String
  metadata: JSON
  user: UserCreateNestedOneWithoutSaved_listingsInput!
}

input SavedListingCreateWithoutUserInput {
  createdAt: DateTimeISO
  id: String
  listing: JobListingCreateNestedOneWithoutSavesInput!
  metadata: JSON
}

type SavedListingGroupBy {
  _count: SavedListingCountAggregate
  _max: SavedListingMaxAggregate
  _min: SavedListingMinAggregate
  createdAt: DateTimeISO!
  id: String!
  listing_id: String!
  metadata: JSON
  updatedAt: DateTimeISO!
  userId: String!
}

input SavedListingListRelationFilter {
  every: SavedListingWhereInput
  none: SavedListingWhereInput
  some: SavedListingWhereInput
}

type SavedListingMaxAggregate {
  createdAt: DateTimeISO
  id: String
  listing_id: String
  updatedAt: DateTimeISO
  userId: String
}

input SavedListingMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  listing_id: SortOrder
  userId: SortOrder
}

type SavedListingMinAggregate {
  createdAt: DateTimeISO
  id: String
  listing_id: String
  updatedAt: DateTimeISO
  userId: String
}

input SavedListingMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  listing_id: SortOrder
  userId: SortOrder
}

input SavedListingOrderByRelationAggregateInput {
  _count: SortOrder
}

enum SavedListingOrderByRelevanceFieldEnum {
  id
  listing_id
  userId
}

input SavedListingOrderByRelevanceInput {
  fields: [SavedListingOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input SavedListingOrderByWithAggregationInput {
  _count: SavedListingCountOrderByAggregateInput
  _max: SavedListingMaxOrderByAggregateInput
  _min: SavedListingMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  listing_id: SortOrder
  metadata: SortOrderInput
  userId: SortOrder
}

input SavedListingOrderByWithRelationInput {
  _relevance: SavedListingOrderByRelevanceInput
  createdAt: SortOrder
  id: SortOrder
  listing: JobListingOrderByWithRelationInput
  listing_id: SortOrder
  metadata: SortOrderInput
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum SavedListingScalarFieldEnum {
  createdAt
  id
  listing_id
  metadata
  updatedAt
  userId
}

input SavedListingScalarWhereInput {
  AND: [SavedListingScalarWhereInput!]
  NOT: [SavedListingScalarWhereInput!]
  OR: [SavedListingScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  listing_id: StringFilter
  metadata: JsonNullableFilter
  userId: StringFilter
}

input SavedListingScalarWhereWithAggregatesInput {
  AND: [SavedListingScalarWhereWithAggregatesInput!]
  NOT: [SavedListingScalarWhereWithAggregatesInput!]
  OR: [SavedListingScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  listing_id: StringWithAggregatesFilter
  metadata: JsonNullableWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input SavedListingUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  listing: JobListingUpdateOneRequiredWithoutSavesNestedInput
  metadata: JSON
  user: UserUpdateOneRequiredWithoutSaved_listingsNestedInput
}

input SavedListingUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  metadata: JSON
}

input SavedListingUpdateManyWithWhereWithoutListingInput {
  data: SavedListingUpdateManyMutationInput!
  where: SavedListingScalarWhereInput!
}

input SavedListingUpdateManyWithWhereWithoutUserInput {
  data: SavedListingUpdateManyMutationInput!
  where: SavedListingScalarWhereInput!
}

input SavedListingUpdateManyWithoutListingNestedInput {
  connect: [SavedListingWhereUniqueInput!]
  connectOrCreate: [SavedListingCreateOrConnectWithoutListingInput!]
  create: [SavedListingCreateWithoutListingInput!]
  createMany: SavedListingCreateManyListingInputEnvelope
  delete: [SavedListingWhereUniqueInput!]
  deleteMany: [SavedListingScalarWhereInput!]
  disconnect: [SavedListingWhereUniqueInput!]
  set: [SavedListingWhereUniqueInput!]
  update: [SavedListingUpdateWithWhereUniqueWithoutListingInput!]
  updateMany: [SavedListingUpdateManyWithWhereWithoutListingInput!]
  upsert: [SavedListingUpsertWithWhereUniqueWithoutListingInput!]
}

input SavedListingUpdateManyWithoutUserNestedInput {
  connect: [SavedListingWhereUniqueInput!]
  connectOrCreate: [SavedListingCreateOrConnectWithoutUserInput!]
  create: [SavedListingCreateWithoutUserInput!]
  createMany: SavedListingCreateManyUserInputEnvelope
  delete: [SavedListingWhereUniqueInput!]
  deleteMany: [SavedListingScalarWhereInput!]
  disconnect: [SavedListingWhereUniqueInput!]
  set: [SavedListingWhereUniqueInput!]
  update: [SavedListingUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [SavedListingUpdateManyWithWhereWithoutUserInput!]
  upsert: [SavedListingUpsertWithWhereUniqueWithoutUserInput!]
}

input SavedListingUpdateWithWhereUniqueWithoutListingInput {
  data: SavedListingUpdateWithoutListingInput!
  where: SavedListingWhereUniqueInput!
}

input SavedListingUpdateWithWhereUniqueWithoutUserInput {
  data: SavedListingUpdateWithoutUserInput!
  where: SavedListingWhereUniqueInput!
}

input SavedListingUpdateWithoutListingInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  metadata: JSON
  user: UserUpdateOneRequiredWithoutSaved_listingsNestedInput
}

input SavedListingUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  listing: JobListingUpdateOneRequiredWithoutSavesNestedInput
  metadata: JSON
}

input SavedListingUpsertWithWhereUniqueWithoutListingInput {
  create: SavedListingCreateWithoutListingInput!
  update: SavedListingUpdateWithoutListingInput!
  where: SavedListingWhereUniqueInput!
}

input SavedListingUpsertWithWhereUniqueWithoutUserInput {
  create: SavedListingCreateWithoutUserInput!
  update: SavedListingUpdateWithoutUserInput!
  where: SavedListingWhereUniqueInput!
}

input SavedListingWhereInput {
  AND: [SavedListingWhereInput!]
  NOT: [SavedListingWhereInput!]
  OR: [SavedListingWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  listing: JobListingRelationFilter
  listing_id: StringFilter
  metadata: JsonNullableFilter
  user: UserRelationFilter
  userId: StringFilter
}

input SavedListingWhereUniqueInput {
  AND: [SavedListingWhereInput!]
  NOT: [SavedListingWhereInput!]
  OR: [SavedListingWhereInput!]
  createdAt: DateTimeFilter
  id: String
  listing: JobListingRelationFilter
  listing_id: StringFilter
  metadata: JsonNullableFilter
  user: UserRelationFilter
  userId: StringFilter
}

type SendVerificationEmailResponse {
  error: String
  success: Boolean!
}

type Session {
  createdAt: DateTimeISO!
  expiresAt: DateTimeISO!
  id: ID!
  sessionToken: String!
  updatedAt: DateTimeISO!
  user: User!
  userId: String!
}

type SessionCountAggregate {
  _all: Int!
  createdAt: Int!
  expiresAt: Int!
  id: Int!
  sessionToken: Int!
  updatedAt: Int!
  userId: Int!
}

input SessionCountOrderByAggregateInput {
  createdAt: SortOrder
  expiresAt: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  userId: SortOrder
}

input SessionCreateInput {
  createdAt: DateTimeISO
  expiresAt: DateTimeISO!
  id: String
  sessionToken: String!
  user: UserCreateNestedOneWithoutSessionsInput!
}

input SessionCreateManyInput {
  createdAt: DateTimeISO
  expiresAt: DateTimeISO!
  id: String
  sessionToken: String!
  userId: String!
}

input SessionCreateManyUserInput {
  createdAt: DateTimeISO
  expiresAt: DateTimeISO!
  id: String
  sessionToken: String!
}

input SessionCreateManyUserInputEnvelope {
  data: [SessionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input SessionCreateNestedManyWithoutUserInput {
  connect: [SessionWhereUniqueInput!]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput!]
  create: [SessionCreateWithoutUserInput!]
  createMany: SessionCreateManyUserInputEnvelope
}

input SessionCreateOrConnectWithoutUserInput {
  create: SessionCreateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionCreateWithoutUserInput {
  createdAt: DateTimeISO
  expiresAt: DateTimeISO!
  id: String
  sessionToken: String!
}

type SessionGroupBy {
  _count: SessionCountAggregate
  _max: SessionMaxAggregate
  _min: SessionMinAggregate
  createdAt: DateTimeISO!
  expiresAt: DateTimeISO!
  id: String!
  sessionToken: String!
  updatedAt: DateTimeISO!
  userId: String!
}

input SessionListRelationFilter {
  every: SessionWhereInput
  none: SessionWhereInput
  some: SessionWhereInput
}

type SessionMaxAggregate {
  createdAt: DateTimeISO
  expiresAt: DateTimeISO
  id: String
  sessionToken: String
  updatedAt: DateTimeISO
  userId: String
}

input SessionMaxOrderByAggregateInput {
  createdAt: SortOrder
  expiresAt: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  userId: SortOrder
}

type SessionMinAggregate {
  createdAt: DateTimeISO
  expiresAt: DateTimeISO
  id: String
  sessionToken: String
  updatedAt: DateTimeISO
  userId: String
}

input SessionMinOrderByAggregateInput {
  createdAt: SortOrder
  expiresAt: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  userId: SortOrder
}

input SessionOrderByRelationAggregateInput {
  _count: SortOrder
}

enum SessionOrderByRelevanceFieldEnum {
  id
  sessionToken
  userId
}

input SessionOrderByRelevanceInput {
  fields: [SessionOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input SessionOrderByWithAggregationInput {
  _count: SessionCountOrderByAggregateInput
  _max: SessionMaxOrderByAggregateInput
  _min: SessionMinOrderByAggregateInput
  createdAt: SortOrder
  expiresAt: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  userId: SortOrder
}

input SessionOrderByWithRelationInput {
  _relevance: SessionOrderByRelevanceInput
  createdAt: SortOrder
  expiresAt: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum SessionScalarFieldEnum {
  createdAt
  expiresAt
  id
  sessionToken
  updatedAt
  userId
}

input SessionScalarWhereInput {
  AND: [SessionScalarWhereInput!]
  NOT: [SessionScalarWhereInput!]
  OR: [SessionScalarWhereInput!]
  createdAt: DateTimeFilter
  expiresAt: DateTimeFilter
  id: StringFilter
  sessionToken: StringFilter
  userId: StringFilter
}

input SessionScalarWhereWithAggregatesInput {
  AND: [SessionScalarWhereWithAggregatesInput!]
  NOT: [SessionScalarWhereWithAggregatesInput!]
  OR: [SessionScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  expiresAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  sessionToken: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input SessionUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expiresAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutSessionsNestedInput
}

input SessionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expiresAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
}

input SessionUpdateManyWithWhereWithoutUserInput {
  data: SessionUpdateManyMutationInput!
  where: SessionScalarWhereInput!
}

input SessionUpdateManyWithoutUserNestedInput {
  connect: [SessionWhereUniqueInput!]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput!]
  create: [SessionCreateWithoutUserInput!]
  createMany: SessionCreateManyUserInputEnvelope
  delete: [SessionWhereUniqueInput!]
  deleteMany: [SessionScalarWhereInput!]
  disconnect: [SessionWhereUniqueInput!]
  set: [SessionWhereUniqueInput!]
  update: [SessionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [SessionUpdateManyWithWhereWithoutUserInput!]
  upsert: [SessionUpsertWithWhereUniqueWithoutUserInput!]
}

input SessionUpdateWithWhereUniqueWithoutUserInput {
  data: SessionUpdateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  expiresAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
}

input SessionUpsertWithWhereUniqueWithoutUserInput {
  create: SessionCreateWithoutUserInput!
  update: SessionUpdateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  createdAt: DateTimeFilter
  expiresAt: DateTimeFilter
  id: StringFilter
  sessionToken: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input SessionWhereUniqueInput {
  AND: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  createdAt: DateTimeFilter
  expiresAt: DateTimeFilter
  id: String
  sessionToken: String
  user: UserRelationFilter
  userId: StringFilter
}

type SignUpWithEmailCodeResponse {
  code: Int
  error: String
  expires: DateTimeISO
  identifier: String
  success: Boolean!
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input SubscribeToJobListingsInput {
  categories: [CompanyCategoryInput!]!
  companyId: String
  employmentType: JobListingEmploymentType
  frequency: JobListingSubscriptionNotificationFrequency!
  job_categories: [JobCategoryInput!]!
  keywords: [String!]!
  languages: [String!]!
  level: JobListingLevel
  location: String
  parameters: JobListingParameters
  workFromHome: WorkFromHome
}

type Subscription {
  randomNumber: Int!
  userSignedUp: User!
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""Always after the prisma-client-js generator"""
type User {
  _count: UserCount
  accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): [Account!]!
  cookieConsent: Boolean
  cookiePreferences: UserCookiePreferences
  createdAt: DateTimeISO!
  email: EmailAddress!
  emailVerified: DateTimeISO
  first_name: String!
  id: ID!
  image: String
  last_name: String!

  """[UserMetadata]"""
  metadata: JSON
  name: String!
  saved_listings(cursor: SavedListingWhereUniqueInput, distinct: [SavedListingScalarFieldEnum!], orderBy: [SavedListingOrderByWithRelationInput!], skip: Int, take: Int, where: SavedListingWhereInput): [SavedListing!]!
  sessions(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): [Session!]!
  subscriptions(cursor: JobListingSubscriptionWhereUniqueInput, distinct: [JobListingSubscriptionScalarFieldEnum!], orderBy: [JobListingSubscriptionOrderByWithRelationInput!], skip: Int, take: Int, where: JobListingSubscriptionWhereInput): [JobListingSubscription!]!
  updatedAt: DateTimeISO!
}

type UserCookiePreferences {
  functionality: Boolean!
  marketing: Boolean!
  necessary: Boolean!
  statistics: Boolean!
}

type UserCount {
  accounts(where: AccountWhereInput): Int!
  saved_listings(where: SavedListingWhereInput): Int!
  sessions(where: SessionWhereInput): Int!
  subscriptions(where: JobListingSubscriptionWhereInput): Int!
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  email: Int!
  emailVerified: Int!
  first_name: Int!
  id: Int!
  image: Int!
  last_name: Int!
  metadata: Int!
  name: Int!
  password: Int!
  updatedAt: Int!
}

input UserCountOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  first_name: SortOrder
  id: SortOrder
  image: SortOrder
  last_name: SortOrder
  metadata: SortOrder
  name: SortOrder
}

input UserCreateInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  createdAt: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  first_name: String!
  id: String
  image: String
  last_name: String!
  metadata: JSON
  name: String!
  saved_listings: SavedListingCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  subscriptions: JobListingSubscriptionCreateNestedManyWithoutUserInput
}

input UserCreateManyInput {
  createdAt: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  first_name: String!
  id: String
  image: String
  last_name: String!
  metadata: JSON
  name: String!
}

input UserCreateNestedOneWithoutAccountsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserCreateWithoutAccountsInput
}

input UserCreateNestedOneWithoutSaved_listingsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSaved_listingsInput
  create: UserCreateWithoutSaved_listingsInput
}

input UserCreateNestedOneWithoutSessionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSessionsInput
  create: UserCreateWithoutSessionsInput
}

input UserCreateNestedOneWithoutSubscriptionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSubscriptionsInput
  create: UserCreateWithoutSubscriptionsInput
}

input UserCreateOrConnectWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSaved_listingsInput {
  create: UserCreateWithoutSaved_listingsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSessionsInput {
  create: UserCreateWithoutSessionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSubscriptionsInput {
  create: UserCreateWithoutSubscriptionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAccountsInput {
  createdAt: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  first_name: String!
  id: String
  image: String
  last_name: String!
  metadata: JSON
  name: String!
  saved_listings: SavedListingCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  subscriptions: JobListingSubscriptionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutSaved_listingsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  createdAt: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  first_name: String!
  id: String
  image: String
  last_name: String!
  metadata: JSON
  name: String!
  sessions: SessionCreateNestedManyWithoutUserInput
  subscriptions: JobListingSubscriptionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutSessionsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  createdAt: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  first_name: String!
  id: String
  image: String
  last_name: String!
  metadata: JSON
  name: String!
  saved_listings: SavedListingCreateNestedManyWithoutUserInput
  subscriptions: JobListingSubscriptionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutSubscriptionsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  createdAt: DateTimeISO
  email: String!
  emailVerified: DateTimeISO
  first_name: String!
  id: String
  image: String
  last_name: String!
  metadata: JSON
  name: String!
  saved_listings: SavedListingCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  createdAt: DateTimeISO!
  email: String!
  emailVerified: DateTimeISO
  first_name: String!
  id: String!
  image: String
  last_name: String!
  metadata: JSON
  name: String!
  password: String
  updatedAt: DateTimeISO!
}

type UserMaxAggregate {
  createdAt: DateTimeISO
  email: String
  emailVerified: DateTimeISO
  first_name: String
  id: String
  image: String
  last_name: String
  name: String
  password: String
  updatedAt: DateTimeISO
}

input UserMaxOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  first_name: SortOrder
  id: SortOrder
  image: SortOrder
  last_name: SortOrder
  name: SortOrder
}

type UserMinAggregate {
  createdAt: DateTimeISO
  email: String
  emailVerified: DateTimeISO
  first_name: String
  id: String
  image: String
  last_name: String
  name: String
  password: String
  updatedAt: DateTimeISO
}

input UserMinOrderByAggregateInput {
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  first_name: SortOrder
  id: SortOrder
  image: SortOrder
  last_name: SortOrder
  name: SortOrder
}

input UserNullableRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserOrderByRelevanceFieldEnum {
  email
  first_name
  id
  image
  last_name
  name
  password
}

input UserOrderByRelevanceInput {
  fields: [UserOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrderInput
  first_name: SortOrder
  id: SortOrder
  image: SortOrderInput
  last_name: SortOrder
  metadata: SortOrderInput
  name: SortOrder
}

input UserOrderByWithRelationInput {
  _relevance: UserOrderByRelevanceInput
  accounts: AccountOrderByRelationAggregateInput
  createdAt: SortOrder
  email: SortOrder
  emailVerified: SortOrderInput
  first_name: SortOrder
  id: SortOrder
  image: SortOrderInput
  last_name: SortOrder
  metadata: SortOrderInput
  name: SortOrder
  saved_listings: SavedListingOrderByRelationAggregateInput
  sessions: SessionOrderByRelationAggregateInput
  subscriptions: JobListingSubscriptionOrderByRelationAggregateInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  email
  emailVerified
  first_name
  id
  image
  last_name
  metadata
  name
  password
  updatedAt
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  emailVerified: DateTimeNullableWithAggregatesFilter
  first_name: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  image: StringNullableWithAggregatesFilter
  last_name: StringWithAggregatesFilter
  metadata: JsonNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
}

type UserSearchResponse {
  _count: UserCount
  accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): [Account!]!
  cookieConsent: Boolean
  cookiePreferences: UserCookiePreferences
  createdAt: DateTimeISO!
  email: EmailAddress!
  emailVerified: DateTimeISO
  first_name: String!
  id: ID!
  image: String
  last_name: String!

  """[UserMetadata]"""
  metadata: JSON
  name: String!
  saved_listings(cursor: SavedListingWhereUniqueInput, distinct: [SavedListingScalarFieldEnum!], orderBy: [SavedListingOrderByWithRelationInput!], skip: Int, take: Int, where: SavedListingWhereInput): [SavedListing!]!
  sessions(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): [Session!]!
  subscriptions(cursor: JobListingSubscriptionWhereUniqueInput, distinct: [JobListingSubscriptionScalarFieldEnum!], orderBy: [JobListingSubscriptionOrderByWithRelationInput!], skip: Int, take: Int, where: JobListingSubscriptionWhereInput): [JobListingSubscription!]!
  updatedAt: DateTimeISO!
}

input UserSignInInput {
  email: String! = ""
  password: String! = ""
  username: String! = ""
}

input UserSignUpInput {
  email: String! = ""
  password: String! = ""
  username: String! = ""
}

input UserUpdateInput {
  accounts: AccountUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  first_name: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  last_name: StringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  saved_listings: SavedListingUpdateManyWithoutUserNestedInput
  sessions: SessionUpdateManyWithoutUserNestedInput
  subscriptions: JobListingSubscriptionUpdateManyWithoutUserNestedInput
}

input UserUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  first_name: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  last_name: StringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutAccountsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserCreateWithoutAccountsInput
  update: UserUpdateToOneWithWhereWithoutAccountsInput
  upsert: UserUpsertWithoutAccountsInput
}

input UserUpdateOneRequiredWithoutSaved_listingsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSaved_listingsInput
  create: UserCreateWithoutSaved_listingsInput
  update: UserUpdateToOneWithWhereWithoutSaved_listingsInput
  upsert: UserUpsertWithoutSaved_listingsInput
}

input UserUpdateOneRequiredWithoutSessionsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSessionsInput
  create: UserCreateWithoutSessionsInput
  update: UserUpdateToOneWithWhereWithoutSessionsInput
  upsert: UserUpsertWithoutSessionsInput
}

input UserUpdateOneWithoutSubscriptionsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSubscriptionsInput
  create: UserCreateWithoutSubscriptionsInput
  delete: UserWhereInput
  disconnect: UserWhereInput
  update: UserUpdateToOneWithWhereWithoutSubscriptionsInput
  upsert: UserUpsertWithoutSubscriptionsInput
}

input UserUpdateToOneWithWhereWithoutAccountsInput {
  data: UserUpdateWithoutAccountsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutSaved_listingsInput {
  data: UserUpdateWithoutSaved_listingsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutSessionsInput {
  data: UserUpdateWithoutSessionsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutSubscriptionsInput {
  data: UserUpdateWithoutSubscriptionsInput!
  where: UserWhereInput
}

input UserUpdateWithoutAccountsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  first_name: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  last_name: StringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  saved_listings: SavedListingUpdateManyWithoutUserNestedInput
  sessions: SessionUpdateManyWithoutUserNestedInput
  subscriptions: JobListingSubscriptionUpdateManyWithoutUserNestedInput
}

input UserUpdateWithoutSaved_listingsInput {
  accounts: AccountUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  first_name: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  last_name: StringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  sessions: SessionUpdateManyWithoutUserNestedInput
  subscriptions: JobListingSubscriptionUpdateManyWithoutUserNestedInput
}

input UserUpdateWithoutSessionsInput {
  accounts: AccountUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  first_name: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  last_name: StringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  saved_listings: SavedListingUpdateManyWithoutUserNestedInput
  subscriptions: JobListingSubscriptionUpdateManyWithoutUserNestedInput
}

input UserUpdateWithoutSubscriptionsInput {
  accounts: AccountUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  first_name: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  last_name: StringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  saved_listings: SavedListingUpdateManyWithoutUserNestedInput
  sessions: SessionUpdateManyWithoutUserNestedInput
}

input UserUpsertWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput!
  update: UserUpdateWithoutAccountsInput!
  where: UserWhereInput
}

input UserUpsertWithoutSaved_listingsInput {
  create: UserCreateWithoutSaved_listingsInput!
  update: UserUpdateWithoutSaved_listingsInput!
  where: UserWhereInput
}

input UserUpsertWithoutSessionsInput {
  create: UserCreateWithoutSessionsInput!
  update: UserUpdateWithoutSessionsInput!
  where: UserWhereInput
}

input UserUpsertWithoutSubscriptionsInput {
  create: UserCreateWithoutSubscriptionsInput!
  update: UserUpdateWithoutSubscriptionsInput!
  where: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  accounts: AccountListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  emailVerified: DateTimeNullableFilter
  first_name: StringFilter
  id: StringFilter
  image: StringNullableFilter
  last_name: StringFilter
  metadata: JsonNullableFilter
  name: StringFilter
  saved_listings: SavedListingListRelationFilter
  sessions: SessionListRelationFilter
  subscriptions: JobListingSubscriptionListRelationFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  accounts: AccountListRelationFilter
  createdAt: DateTimeFilter
  email: String
  emailVerified: DateTimeNullableFilter
  first_name: StringFilter
  id: String
  image: StringNullableFilter
  last_name: StringFilter
  metadata: JsonNullableFilter
  name: StringFilter
  saved_listings: SavedListingListRelationFilter
  sessions: SessionListRelationFilter
  subscriptions: JobListingSubscriptionListRelationFilter
}

input UsersSearchInput {
  limit: Int! = 10
  search: String! = ""
}

type VerificationToken {
  expires: DateTimeISO!
  identifier: String!
  token: String!
}

type VerificationTokenCountAggregate {
  _all: Int!
  expires: Int!
  identifier: Int!
  token: Int!
}

input VerificationTokenCountOrderByAggregateInput {
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

input VerificationTokenCreateInput {
  expires: DateTimeISO!
  identifier: String!
  token: String!
}

input VerificationTokenCreateManyInput {
  expires: DateTimeISO!
  identifier: String!
  token: String!
}

type VerificationTokenGroupBy {
  _count: VerificationTokenCountAggregate
  _max: VerificationTokenMaxAggregate
  _min: VerificationTokenMinAggregate
  expires: DateTimeISO!
  identifier: String!
  token: String!
}

input VerificationTokenIdentifierTokenCompoundUniqueInput {
  identifier: String!
  token: String!
}

type VerificationTokenMaxAggregate {
  expires: DateTimeISO
  identifier: String
  token: String
}

input VerificationTokenMaxOrderByAggregateInput {
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

type VerificationTokenMinAggregate {
  expires: DateTimeISO
  identifier: String
  token: String
}

input VerificationTokenMinOrderByAggregateInput {
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

enum VerificationTokenOrderByRelevanceFieldEnum {
  identifier
  token
}

input VerificationTokenOrderByRelevanceInput {
  fields: [VerificationTokenOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input VerificationTokenOrderByWithAggregationInput {
  _count: VerificationTokenCountOrderByAggregateInput
  _max: VerificationTokenMaxOrderByAggregateInput
  _min: VerificationTokenMinOrderByAggregateInput
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

input VerificationTokenOrderByWithRelationInput {
  _relevance: VerificationTokenOrderByRelevanceInput
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

enum VerificationTokenScalarFieldEnum {
  expires
  identifier
  token
}

input VerificationTokenScalarWhereWithAggregatesInput {
  AND: [VerificationTokenScalarWhereWithAggregatesInput!]
  NOT: [VerificationTokenScalarWhereWithAggregatesInput!]
  OR: [VerificationTokenScalarWhereWithAggregatesInput!]
  expires: DateTimeWithAggregatesFilter
  identifier: StringWithAggregatesFilter
  token: StringWithAggregatesFilter
}

input VerificationTokenUpdateInput {
  expires: DateTimeFieldUpdateOperationsInput
  identifier: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input VerificationTokenUpdateManyMutationInput {
  expires: DateTimeFieldUpdateOperationsInput
  identifier: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input VerificationTokenWhereInput {
  AND: [VerificationTokenWhereInput!]
  NOT: [VerificationTokenWhereInput!]
  OR: [VerificationTokenWhereInput!]
  expires: DateTimeFilter
  identifier: StringFilter
  token: StringFilter
}

input VerificationTokenWhereUniqueInput {
  AND: [VerificationTokenWhereInput!]
  NOT: [VerificationTokenWhereInput!]
  OR: [VerificationTokenWhereInput!]
  expires: DateTimeFilter
  identifier: StringFilter
  identifier_token: VerificationTokenIdentifierTokenCompoundUniqueInput
  token: StringFilter
}

type VerifyEmailResponse {
  error: String
  success: Boolean!
}

enum WorkFromHome {
  FullyRemote
  Hybrid
}