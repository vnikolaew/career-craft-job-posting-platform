generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "views", "fullTextSearch", "driverAdapters", "relationJoins"]
}

/// Always after the prisma-client-js generator
generator json {
  provider = "prisma-json-types-generator"
  // namespace = "PrismaJson"
  // clientOutput = "<finds it automatically>"
  // (./ -> relative to schema, or an importable path to require() it)
}

generator typegraphql {
  provider                 = "typegraphql-prisma"
  emitIdAsIDType           = true
  emitTranspiledCode       = true
  formatGeneratedCode      = true
  omitInputFieldsByDefault = ["createdAt", "updatedAt"]
  output                   = "../../node_modules/@generated"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto, pgvector(map: "vector", schema: "public"), pg_trgm, fuzzystrmatch()]
}

model User {
  id         String @id @default(cuid())
  first_name String
  last_name  String
  name       String
  email      String @unique

  /// @TypeGraphQL.omit(output: true, input: true)
  password      String?
  emailVerified DateTime?

  /// [UserMetadata]
  metadata Json?     @default("null") @db.JsonB
  image    String?
  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  metadata          Json?   @default("null") @db.JsonB

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Company {
  id   String @id @default(cuid())
  name String

  about_raw              String
  career_description_raw String

  email String @unique

  /// [CompanyMetadata]
  metadata         Json?   @default("null") @db.JsonB
  brand_image_url  String?
  banner_image_url String?

  /// [CompanyLocalInfo]
  local_info Json @default("null") @db.JsonB

  /// [CompanyWorldwideInfo]
  worldwide_info Json @default("null") @db.JsonB

  benefits         String[]
  company_values   String[]
  work_environment String[]
  hiring_process   String[]

  /// [CompanyContacts]
  contacts Json @default("null") @db.JsonB

  categories CompanyCategory[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  JobListing JobListing[]
}

model CompanyCategory {
  id          String @id @default(cuid())
  name        String
  description String

  companies Company[]
}

model JobListing {
  id   String @id @default(cuid())
  name String

  description_raw          String
  external_application_url String?

  level     JobListingLevel?
  work_from WorkFromHome?
  type      JobListingEmploymentType?

  location   String
  languages  String[]
  parameters Json     @default("null") @db.JsonB
  keywords   String[]

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum JobListingLevel {
  Staff
  Experts
  Management
}

enum JobListingEmploymentType {
  Permanent
  Temporary
  FreelanceProject
  FullTime
  PartTime
  ForStudents
  FlexibleTime
  RefugeeStatus
}

enum WorkFromHome {
  Hybrid
  FullyRemote
}
