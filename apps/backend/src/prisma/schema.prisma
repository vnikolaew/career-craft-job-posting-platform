generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "views", "fullTextSearch", "driverAdapters", "relationJoins"]
}

/// Always after the prisma-client-js generator
generator json {
  provider = "prisma-json-types-generator"
  // namespace = "PrismaJson"
  // clientOutput = "<finds it automatically>"
  // (./ -> relative to schema, or an importable path to require() it)
}

generator typegraphql {
  provider                 = "typegraphql-prisma"
  emitIdAsIDType           = true
  emitTranspiledCode       = true
  formatGeneratedCode      = true
  omitInputFieldsByDefault = ["updatedAt"]
  output                   = "../../node_modules/@generated"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pgcrypto, pgvector(map: "vector", schema: "public"), pg_trgm, fuzzystrmatch()]
}

model User {
  id         String @id @default(cuid())
  first_name String
  last_name  String
  name       String

  /// @TypeGraphQL.omit(output: true)
  email String @unique

  /// @TypeGraphQL.omit(output: true, input: true)
  password      String?
  emailVerified DateTime?

  /// [UserMetadata]
  metadata Json?     @default("null") @db.JsonB
  image    String?
  accounts Account[]
  sessions Session[]

  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  saved_listings SavedListing[]
  subscriptions  JobListingSubscription[]
}

model SavedListing {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  listing_id String
  listing    JobListing @relation(fields: [listing_id], references: [id], onDelete: Cascade)

  metadata Json? @default("null") @db.JsonB

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  metadata          Json?   @default("null") @db.JsonB

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String   @map("user_id")
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Company {
  id   String @id @default(cuid())
  name String

  about_raw              String
  career_description_raw String

  /// @TypeGraphQL.omit(output: true)
  email String @unique

  /// [CompanyMetadata]
  /// @TypeGraphQL.omit(output: true)
  metadata Json? @default("null") @db.JsonB

  /// @TypeGraphQL.omit(output: true)
  brand_image_url String?

  /// @TypeGraphQL.omit(output: true)
  banner_image_url String?

  /// [CompanyLocalInfo]
  /// @TypeGraphQL.omit(output: true)
  local_info Json @default("null") @db.JsonB

  /// [CompanyWorldwideInfo]
  /// @TypeGraphQL.omit(output: true)
  worldwide_info Json @default("null") @db.JsonB

  benefits         String[]
  company_values   String[]
  work_environment String[]
  hiring_process   String[]

  /// [CompanyContacts]
  /// @TypeGraphQL.omit(output: true)
  contacts Json @default("null") @db.JsonB

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  listings  JobListing[]

  /// @TypeGraphQL.omit(output: true)
  categories    CategoryOnCompany[]
  subscriptions JobListingSubscription[]
}

/// @@TypeGraphQL.omit(input: ["create", "update", "where", "orderBy"])
model CategoryOnCompany {
  company_id String
  company    Company @relation(fields: [company_id], references: [id])

  category_id String
  category    CompanyCategory @relation(fields: [category_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([company_id, category_id])
}

model CompanyCategory {
  id          String @id @default(cuid())
  name        String
  description String

  companies CategoryOnCompany[]

  subscriptions JobListingSubscription[]
}

/// @@TypeGraphQL.omit(input: ["create", "update", "where", "orderBy"])
model CategoryOnJobListing {
  listing_id String
  listing    JobListing @relation(fields: [listing_id], references: [id])

  category_id String
  category    JobListingCategory @relation(fields: [category_id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([listing_id, category_id])
}

model JobListingCategory {
  id          String @id @default(cuid())
  name        String
  description String

  listings CategoryOnJobListing[]
}

model JobListingSubscription {
  id String @id @default(cuid())

  company_id String?
  company    Company? @relation(fields: [company_id], references: [id])

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  metadata               Json?                                       @default("null") @db.JsonB
  notification_frequency JobListingSubscriptionNotificationFrequency

  categories CompanyCategory[]
  location   String?

  level     JobListingLevel?
  work_from WorkFromHome?
  type      JobListingEmploymentType?

  languages String[]

  /// [JobListingParameters]
  parameters Json     @default("null") @db.JsonB
  keywords   String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum JobListingSubscriptionNotificationFrequency {
  Daily
  Weekly
}

model JobListing {
  id   String @id @default(cuid())
  name String

  description_raw          String
  external_application_url String?

  level     JobListingLevel?
  work_from WorkFromHome?
  type      JobListingEmploymentType?

  location  String
  languages String[]

  /// [JobListingParameters]
  parameters Json     @default("null") @db.JsonB
  keywords   String[]

  company    Company @relation(fields: [company_id], references: [id])
  company_id String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  saves      SavedListing[]
  categories CategoryOnJobListing[]
}

enum JobListingLevel {
  Staff
  Experts
  Management
}

enum JobListingEmploymentType {
  Permanent
  Temporary
  FreelanceProject
  FullTime
  PartTime
  ForStudents
  FlexibleTime
  RefugeeStatus
}

enum WorkFromHome {
  Hybrid
  FullyRemote
}
