# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  access_token: String
  createdAt: DateTimeISO!
  expires_at: Int
  id_token: String
  metadata: JSON
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  updatedAt: DateTimeISO!
  userId: String!
}

type AccountAvgAggregate {
  expires_at: Float
}

input AccountAvgOrderByAggregateInput {
  expires_at: SortOrder
}

type AccountCountAggregate {
  _all: Int!
  access_token: Int!
  createdAt: Int!
  expires_at: Int!
  id_token: Int!
  metadata: Int!
  provider: Int!
  providerAccountId: Int!
  refresh_token: Int!
  scope: Int!
  session_state: Int!
  token_type: Int!
  type: Int!
  updatedAt: Int!
  userId: Int!
}

input AccountCountOrderByAggregateInput {
  access_token: SortOrder
  expires_at: SortOrder
  id_token: SortOrder
  metadata: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  userId: SortOrder
}

input AccountCreateInput {
  access_token: String
  expires_at: Int
  id_token: String
  metadata: JSON
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  user: UserCreateNestedOneWithoutAccountsInput!
}

input AccountCreateManyInput {
  access_token: String
  expires_at: Int
  id_token: String
  metadata: JSON
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  userId: String!
}

input AccountCreateManyUserInput {
  access_token: String
  expires_at: Int
  id_token: String
  metadata: JSON
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
}

input AccountCreateManyUserInputEnvelope {
  data: [AccountCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input AccountCreateNestedManyWithoutUserInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  create: [AccountCreateWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
}

input AccountCreateOrConnectWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateWithoutUserInput {
  access_token: String
  expires_at: Int
  id_token: String
  metadata: JSON
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
}

type AccountGroupBy {
  _avg: AccountAvgAggregate
  _count: AccountCountAggregate
  _max: AccountMaxAggregate
  _min: AccountMinAggregate
  _sum: AccountSumAggregate
  access_token: String
  createdAt: DateTimeISO!
  expires_at: Int
  id_token: String
  metadata: JSON
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  updatedAt: DateTimeISO!
  userId: String!
}

input AccountListRelationFilter {
  every: AccountWhereInput
  none: AccountWhereInput
  some: AccountWhereInput
}

type AccountMaxAggregate {
  access_token: String
  createdAt: DateTimeISO
  expires_at: Int
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  updatedAt: DateTimeISO
  userId: String
}

input AccountMaxOrderByAggregateInput {
  access_token: SortOrder
  expires_at: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  userId: SortOrder
}

type AccountMinAggregate {
  access_token: String
  createdAt: DateTimeISO
  expires_at: Int
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  updatedAt: DateTimeISO
  userId: String
}

input AccountMinOrderByAggregateInput {
  access_token: SortOrder
  expires_at: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  userId: SortOrder
}

input AccountOrderByRelationAggregateInput {
  _count: SortOrder
}

enum AccountOrderByRelevanceFieldEnum {
  access_token
  id_token
  provider
  providerAccountId
  refresh_token
  scope
  session_state
  token_type
  type
  userId
}

input AccountOrderByRelevanceInput {
  fields: [AccountOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input AccountOrderByWithAggregationInput {
  _avg: AccountAvgOrderByAggregateInput
  _count: AccountCountOrderByAggregateInput
  _max: AccountMaxOrderByAggregateInput
  _min: AccountMinOrderByAggregateInput
  _sum: AccountSumOrderByAggregateInput
  access_token: SortOrderInput
  expires_at: SortOrderInput
  id_token: SortOrderInput
  metadata: SortOrderInput
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrderInput
  scope: SortOrderInput
  session_state: SortOrderInput
  token_type: SortOrderInput
  type: SortOrder
  userId: SortOrder
}

input AccountOrderByWithRelationInput {
  _relevance: AccountOrderByRelevanceInput
  access_token: SortOrderInput
  expires_at: SortOrderInput
  id_token: SortOrderInput
  metadata: SortOrderInput
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrderInput
  scope: SortOrderInput
  session_state: SortOrderInput
  token_type: SortOrderInput
  type: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input AccountProviderProviderAccountIdCompoundUniqueInput {
  provider: String!
  providerAccountId: String!
}

enum AccountScalarFieldEnum {
  access_token
  createdAt
  expires_at
  id_token
  metadata
  provider
  providerAccountId
  refresh_token
  scope
  session_state
  token_type
  type
  updatedAt
  userId
}

input AccountScalarWhereInput {
  AND: [AccountScalarWhereInput!]
  NOT: [AccountScalarWhereInput!]
  OR: [AccountScalarWhereInput!]
  access_token: StringNullableFilter
  expires_at: IntNullableFilter
  id_token: StringNullableFilter
  metadata: JsonNullableFilter
  provider: StringFilter
  providerAccountId: StringFilter
  refresh_token: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
  token_type: StringNullableFilter
  type: StringFilter
  userId: StringFilter
}

input AccountScalarWhereWithAggregatesInput {
  AND: [AccountScalarWhereWithAggregatesInput!]
  NOT: [AccountScalarWhereWithAggregatesInput!]
  OR: [AccountScalarWhereWithAggregatesInput!]
  access_token: StringNullableWithAggregatesFilter
  expires_at: IntNullableWithAggregatesFilter
  id_token: StringNullableWithAggregatesFilter
  metadata: JsonNullableWithAggregatesFilter
  provider: StringWithAggregatesFilter
  providerAccountId: StringWithAggregatesFilter
  refresh_token: StringNullableWithAggregatesFilter
  scope: StringNullableWithAggregatesFilter
  session_state: StringNullableWithAggregatesFilter
  token_type: StringNullableWithAggregatesFilter
  type: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type AccountSumAggregate {
  expires_at: Int
}

input AccountSumOrderByAggregateInput {
  expires_at: SortOrder
}

input AccountUpdateInput {
  access_token: NullableStringFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  metadata: JSON
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAccountsNestedInput
}

input AccountUpdateManyMutationInput {
  access_token: NullableStringFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  metadata: JSON
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input AccountUpdateManyWithWhereWithoutUserInput {
  data: AccountUpdateManyMutationInput!
  where: AccountScalarWhereInput!
}

input AccountUpdateManyWithoutUserNestedInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  create: [AccountCreateWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
  delete: [AccountWhereUniqueInput!]
  deleteMany: [AccountScalarWhereInput!]
  disconnect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
  update: [AccountUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AccountUpdateManyWithWhereWithoutUserInput!]
  upsert: [AccountUpsertWithWhereUniqueWithoutUserInput!]
}

input AccountUpdateWithWhereUniqueWithoutUserInput {
  data: AccountUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountUpdateWithoutUserInput {
  access_token: NullableStringFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  metadata: JSON
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input AccountUpsertWithWhereUniqueWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  update: AccountUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  access_token: StringNullableFilter
  expires_at: IntNullableFilter
  id_token: StringNullableFilter
  metadata: JsonNullableFilter
  provider: StringFilter
  providerAccountId: StringFilter
  refresh_token: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
  token_type: StringNullableFilter
  type: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input AccountWhereUniqueInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  access_token: StringNullableFilter
  expires_at: IntNullableFilter
  id_token: StringNullableFilter
  metadata: JsonNullableFilter
  provider: StringFilter
  providerAccountId: StringFilter
  provider_providerAccountId: AccountProviderProviderAccountIdCompoundUniqueInput
  refresh_token: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
  token_type: StringNullableFilter
  type: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

type AffectedRowsOutput {
  count: Int!
}

type AggregateAccount {
  _avg: AccountAvgAggregate
  _count: AccountCountAggregate
  _max: AccountMaxAggregate
  _min: AccountMinAggregate
  _sum: AccountSumAggregate
}

type AggregateCompany {
  _count: CompanyCountAggregate
  _max: CompanyMaxAggregate
  _min: CompanyMinAggregate
}

type AggregateCompanyCategory {
  _count: CompanyCategoryCountAggregate
  _max: CompanyCategoryMaxAggregate
  _min: CompanyCategoryMinAggregate
}

type AggregateJobListing {
  _count: JobListingCountAggregate
  _max: JobListingMaxAggregate
  _min: JobListingMinAggregate
}

type AggregateJobListingCategory {
  _count: JobListingCategoryCountAggregate
  _max: JobListingCategoryMaxAggregate
  _min: JobListingCategoryMinAggregate
}

type AggregateSession {
  _count: SessionCountAggregate
  _max: SessionMaxAggregate
  _min: SessionMinAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

type AggregateVerificationToken {
  _count: VerificationTokenCountAggregate
  _max: VerificationTokenMaxAggregate
  _min: VerificationTokenMinAggregate
}

type Company {
  _count: CompanyCount
  about_raw: String!
  banner_image_url: URL
  benefits: [String!]!
  brand_image_url: URL
  career_description_raw: String!
  categories(cursor: CompanyCategoryWhereUniqueInput, distinct: [CompanyCategoryScalarFieldEnum!], orderBy: [CompanyCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CompanyCategoryWhereInput): [CompanyCategory!]!
  company_values: [String!]!
  contacts: CompanyContacts
  createdAt: DateTimeISO!
  email: EmailAddress!
  hiring_process: [String!]!
  id: ID!
  listings(cursor: JobListingWhereUniqueInput, distinct: [JobListingScalarFieldEnum!], orderBy: [JobListingOrderByWithRelationInput!], skip: Int, take: Int, where: JobListingWhereInput): [JobListing!]!
  local_info: CompanyLocalInfo
  metadata: JSONObject
  name: String!
  updatedAt: DateTimeISO!
  work_environment: [String!]!
  worldwide_info: CompanyWorldwideInfo
}

type CompanyCategory {
  _count: CompanyCategoryCount
  companies(cursor: CompanyWhereUniqueInput, distinct: [CompanyScalarFieldEnum!], orderBy: [CompanyOrderByWithRelationInput!], skip: Int, take: Int, where: CompanyWhereInput): [Company!]!
  description: String!
  id: ID!
  name: String!
}

type CompanyCategoryCount {
  companies(where: CompanyWhereInput): Int!
}

type CompanyCategoryCountAggregate {
  _all: Int!
  description: Int!
  id: Int!
  name: Int!
}

input CompanyCategoryCountOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

input CompanyCategoryCreateInput {
  companies: CompanyCreateNestedManyWithoutCategoriesInput
  description: String!
  id: String
  name: String!
}

input CompanyCategoryCreateManyInput {
  description: String!
  id: String
  name: String!
}

input CompanyCategoryCreateNestedManyWithoutCompaniesInput {
  connect: [CompanyCategoryWhereUniqueInput!]
  connectOrCreate: [CompanyCategoryCreateOrConnectWithoutCompaniesInput!]
  create: [CompanyCategoryCreateWithoutCompaniesInput!]
}

input CompanyCategoryCreateOrConnectWithoutCompaniesInput {
  create: CompanyCategoryCreateWithoutCompaniesInput!
  where: CompanyCategoryWhereUniqueInput!
}

input CompanyCategoryCreateWithoutCompaniesInput {
  description: String!
  id: String
  name: String!
}

type CompanyCategoryGroupBy {
  _count: CompanyCategoryCountAggregate
  _max: CompanyCategoryMaxAggregate
  _min: CompanyCategoryMinAggregate
  description: String!
  id: String!
  name: String!
}

input CompanyCategoryListRelationFilter {
  every: CompanyCategoryWhereInput
  none: CompanyCategoryWhereInput
  some: CompanyCategoryWhereInput
}

type CompanyCategoryMaxAggregate {
  description: String
  id: String
  name: String
}

input CompanyCategoryMaxOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

type CompanyCategoryMinAggregate {
  description: String
  id: String
  name: String
}

input CompanyCategoryMinOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

input CompanyCategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

enum CompanyCategoryOrderByRelevanceFieldEnum {
  description
  id
  name
}

input CompanyCategoryOrderByRelevanceInput {
  fields: [CompanyCategoryOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input CompanyCategoryOrderByWithAggregationInput {
  _count: CompanyCategoryCountOrderByAggregateInput
  _max: CompanyCategoryMaxOrderByAggregateInput
  _min: CompanyCategoryMinOrderByAggregateInput
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

input CompanyCategoryOrderByWithRelationInput {
  _relevance: CompanyCategoryOrderByRelevanceInput
  companies: CompanyOrderByRelationAggregateInput
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

enum CompanyCategoryScalarFieldEnum {
  description
  id
  name
}

input CompanyCategoryScalarWhereInput {
  AND: [CompanyCategoryScalarWhereInput!]
  NOT: [CompanyCategoryScalarWhereInput!]
  OR: [CompanyCategoryScalarWhereInput!]
  description: StringFilter
  id: StringFilter
  name: StringFilter
}

input CompanyCategoryScalarWhereWithAggregatesInput {
  AND: [CompanyCategoryScalarWhereWithAggregatesInput!]
  NOT: [CompanyCategoryScalarWhereWithAggregatesInput!]
  OR: [CompanyCategoryScalarWhereWithAggregatesInput!]
  description: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input CompanyCategoryUpdateInput {
  companies: CompanyUpdateManyWithoutCategoriesNestedInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input CompanyCategoryUpdateManyMutationInput {
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input CompanyCategoryUpdateManyWithWhereWithoutCompaniesInput {
  data: CompanyCategoryUpdateManyMutationInput!
  where: CompanyCategoryScalarWhereInput!
}

input CompanyCategoryUpdateManyWithoutCompaniesNestedInput {
  connect: [CompanyCategoryWhereUniqueInput!]
  connectOrCreate: [CompanyCategoryCreateOrConnectWithoutCompaniesInput!]
  create: [CompanyCategoryCreateWithoutCompaniesInput!]
  delete: [CompanyCategoryWhereUniqueInput!]
  deleteMany: [CompanyCategoryScalarWhereInput!]
  disconnect: [CompanyCategoryWhereUniqueInput!]
  set: [CompanyCategoryWhereUniqueInput!]
  update: [CompanyCategoryUpdateWithWhereUniqueWithoutCompaniesInput!]
  updateMany: [CompanyCategoryUpdateManyWithWhereWithoutCompaniesInput!]
  upsert: [CompanyCategoryUpsertWithWhereUniqueWithoutCompaniesInput!]
}

input CompanyCategoryUpdateWithWhereUniqueWithoutCompaniesInput {
  data: CompanyCategoryUpdateWithoutCompaniesInput!
  where: CompanyCategoryWhereUniqueInput!
}

input CompanyCategoryUpdateWithoutCompaniesInput {
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input CompanyCategoryUpsertWithWhereUniqueWithoutCompaniesInput {
  create: CompanyCategoryCreateWithoutCompaniesInput!
  update: CompanyCategoryUpdateWithoutCompaniesInput!
  where: CompanyCategoryWhereUniqueInput!
}

input CompanyCategoryWhereInput {
  AND: [CompanyCategoryWhereInput!]
  NOT: [CompanyCategoryWhereInput!]
  OR: [CompanyCategoryWhereInput!]
  companies: CompanyListRelationFilter
  description: StringFilter
  id: StringFilter
  name: StringFilter
}

input CompanyCategoryWhereUniqueInput {
  AND: [CompanyCategoryWhereInput!]
  NOT: [CompanyCategoryWhereInput!]
  OR: [CompanyCategoryWhereInput!]
  companies: CompanyListRelationFilter
  description: StringFilter
  id: String
  name: StringFilter
}

type CompanyContact {
  address: String!
  city: String!
  coordinates: Coordinates
  phone_number: String!
}

type CompanyContacts {
  address: String!
  company_bulstat: String!
  contacts: [CompanyContact!]!
  email: EmailAddress!
  facebook_url: URL!
  linkedin_url: URL!
  name: String!
  phone_number: String!
  twitter_url: URL!
  website_url: URL!
  youtube_url: URL!
}

type CompanyCount {
  categories(where: CompanyCategoryWhereInput): Int!
  listings(where: JobListingWhereInput): Int!
}

type CompanyCountAggregate {
  _all: Int!
  about_raw: Int!
  banner_image_url: Int!
  benefits: Int!
  brand_image_url: Int!
  career_description_raw: Int!
  company_values: Int!
  contacts: Int!
  createdAt: Int!
  email: Int!
  hiring_process: Int!
  id: Int!
  local_info: Int!
  metadata: Int!
  name: Int!
  updatedAt: Int!
  work_environment: Int!
  worldwide_info: Int!
}

input CompanyCountOrderByAggregateInput {
  about_raw: SortOrder
  banner_image_url: SortOrder
  benefits: SortOrder
  brand_image_url: SortOrder
  career_description_raw: SortOrder
  company_values: SortOrder
  contacts: SortOrder
  email: SortOrder
  hiring_process: SortOrder
  id: SortOrder
  local_info: SortOrder
  metadata: SortOrder
  name: SortOrder
  work_environment: SortOrder
  worldwide_info: SortOrder
}

input CompanyCreateInput {
  about_raw: String!
  banner_image_url: String
  benefits: CompanyCreatebenefitsInput
  brand_image_url: String
  career_description_raw: String!
  categories: CompanyCategoryCreateNestedManyWithoutCompaniesInput
  company_values: CompanyCreatecompany_valuesInput
  contacts: JSON
  email: String!
  hiring_process: CompanyCreatehiring_processInput
  id: String
  listings: JobListingCreateNestedManyWithoutCompanyInput
  local_info: JSON
  metadata: JSON
  name: String!
  work_environment: CompanyCreatework_environmentInput
  worldwide_info: JSON
}

input CompanyCreateManyInput {
  about_raw: String!
  banner_image_url: String
  benefits: CompanyCreatebenefitsInput
  brand_image_url: String
  career_description_raw: String!
  company_values: CompanyCreatecompany_valuesInput
  contacts: JSON
  email: String!
  hiring_process: CompanyCreatehiring_processInput
  id: String
  local_info: JSON
  metadata: JSON
  name: String!
  work_environment: CompanyCreatework_environmentInput
  worldwide_info: JSON
}

input CompanyCreateNestedManyWithoutCategoriesInput {
  connect: [CompanyWhereUniqueInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutCategoriesInput!]
  create: [CompanyCreateWithoutCategoriesInput!]
}

input CompanyCreateNestedOneWithoutListingsInput {
  connect: CompanyWhereUniqueInput
  connectOrCreate: CompanyCreateOrConnectWithoutListingsInput
  create: CompanyCreateWithoutListingsInput
}

input CompanyCreateOrConnectWithoutCategoriesInput {
  create: CompanyCreateWithoutCategoriesInput!
  where: CompanyWhereUniqueInput!
}

input CompanyCreateOrConnectWithoutListingsInput {
  create: CompanyCreateWithoutListingsInput!
  where: CompanyWhereUniqueInput!
}

input CompanyCreateWithoutCategoriesInput {
  about_raw: String!
  banner_image_url: String
  benefits: CompanyCreatebenefitsInput
  brand_image_url: String
  career_description_raw: String!
  company_values: CompanyCreatecompany_valuesInput
  contacts: JSON
  email: String!
  hiring_process: CompanyCreatehiring_processInput
  id: String
  listings: JobListingCreateNestedManyWithoutCompanyInput
  local_info: JSON
  metadata: JSON
  name: String!
  work_environment: CompanyCreatework_environmentInput
  worldwide_info: JSON
}

input CompanyCreateWithoutListingsInput {
  about_raw: String!
  banner_image_url: String
  benefits: CompanyCreatebenefitsInput
  brand_image_url: String
  career_description_raw: String!
  categories: CompanyCategoryCreateNestedManyWithoutCompaniesInput
  company_values: CompanyCreatecompany_valuesInput
  contacts: JSON
  email: String!
  hiring_process: CompanyCreatehiring_processInput
  id: String
  local_info: JSON
  metadata: JSON
  name: String!
  work_environment: CompanyCreatework_environmentInput
  worldwide_info: JSON
}

input CompanyCreatebenefitsInput {
  set: [String!]!
}

input CompanyCreatecompany_valuesInput {
  set: [String!]!
}

input CompanyCreatehiring_processInput {
  set: [String!]!
}

input CompanyCreatework_environmentInput {
  set: [String!]!
}

type CompanyGroupBy {
  _count: CompanyCountAggregate
  _max: CompanyMaxAggregate
  _min: CompanyMinAggregate
  about_raw: String!
  banner_image_url: String
  benefits: [String!]
  brand_image_url: String
  career_description_raw: String!
  company_values: [String!]
  contacts: JSON!
  createdAt: DateTimeISO!
  email: String!
  hiring_process: [String!]
  id: String!
  local_info: JSON!
  metadata: JSON
  name: String!
  updatedAt: DateTimeISO!
  work_environment: [String!]
  worldwide_info: JSON!
}

input CompanyListRelationFilter {
  every: CompanyWhereInput
  none: CompanyWhereInput
  some: CompanyWhereInput
}

type CompanyLocalInfo {
  employeeCount: Int
  locations: [String!]!
  since: DateTimeISO
}

type CompanyMaxAggregate {
  about_raw: String
  banner_image_url: String
  brand_image_url: String
  career_description_raw: String
  createdAt: DateTimeISO
  email: String
  id: String
  name: String
  updatedAt: DateTimeISO
}

input CompanyMaxOrderByAggregateInput {
  about_raw: SortOrder
  banner_image_url: SortOrder
  brand_image_url: SortOrder
  career_description_raw: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
}

type CompanyMinAggregate {
  about_raw: String
  banner_image_url: String
  brand_image_url: String
  career_description_raw: String
  createdAt: DateTimeISO
  email: String
  id: String
  name: String
  updatedAt: DateTimeISO
}

input CompanyMinOrderByAggregateInput {
  about_raw: SortOrder
  banner_image_url: SortOrder
  brand_image_url: SortOrder
  career_description_raw: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
}

input CompanyOrderByRelationAggregateInput {
  _count: SortOrder
}

enum CompanyOrderByRelevanceFieldEnum {
  about_raw
  banner_image_url
  benefits
  brand_image_url
  career_description_raw
  company_values
  email
  hiring_process
  id
  name
  work_environment
}

input CompanyOrderByRelevanceInput {
  fields: [CompanyOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input CompanyOrderByWithAggregationInput {
  _count: CompanyCountOrderByAggregateInput
  _max: CompanyMaxOrderByAggregateInput
  _min: CompanyMinOrderByAggregateInput
  about_raw: SortOrder
  banner_image_url: SortOrderInput
  benefits: SortOrder
  brand_image_url: SortOrderInput
  career_description_raw: SortOrder
  company_values: SortOrder
  contacts: SortOrder
  email: SortOrder
  hiring_process: SortOrder
  id: SortOrder
  local_info: SortOrder
  metadata: SortOrderInput
  name: SortOrder
  work_environment: SortOrder
  worldwide_info: SortOrder
}

input CompanyOrderByWithRelationInput {
  _relevance: CompanyOrderByRelevanceInput
  about_raw: SortOrder
  banner_image_url: SortOrderInput
  benefits: SortOrder
  brand_image_url: SortOrderInput
  career_description_raw: SortOrder
  categories: CompanyCategoryOrderByRelationAggregateInput
  company_values: SortOrder
  contacts: SortOrder
  email: SortOrder
  hiring_process: SortOrder
  id: SortOrder
  listings: JobListingOrderByRelationAggregateInput
  local_info: SortOrder
  metadata: SortOrderInput
  name: SortOrder
  work_environment: SortOrder
  worldwide_info: SortOrder
}

input CompanyRelationFilter {
  is: CompanyWhereInput
  isNot: CompanyWhereInput
}

enum CompanyScalarFieldEnum {
  about_raw
  banner_image_url
  benefits
  brand_image_url
  career_description_raw
  company_values
  contacts
  createdAt
  email
  hiring_process
  id
  local_info
  metadata
  name
  updatedAt
  work_environment
  worldwide_info
}

input CompanyScalarWhereInput {
  AND: [CompanyScalarWhereInput!]
  NOT: [CompanyScalarWhereInput!]
  OR: [CompanyScalarWhereInput!]
  about_raw: StringFilter
  banner_image_url: StringNullableFilter
  benefits: StringNullableListFilter
  brand_image_url: StringNullableFilter
  career_description_raw: StringFilter
  company_values: StringNullableListFilter
  contacts: JsonFilter
  email: StringFilter
  hiring_process: StringNullableListFilter
  id: StringFilter
  local_info: JsonFilter
  metadata: JsonNullableFilter
  name: StringFilter
  work_environment: StringNullableListFilter
  worldwide_info: JsonFilter
}

input CompanyScalarWhereWithAggregatesInput {
  AND: [CompanyScalarWhereWithAggregatesInput!]
  NOT: [CompanyScalarWhereWithAggregatesInput!]
  OR: [CompanyScalarWhereWithAggregatesInput!]
  about_raw: StringWithAggregatesFilter
  banner_image_url: StringNullableWithAggregatesFilter
  benefits: StringNullableListFilter
  brand_image_url: StringNullableWithAggregatesFilter
  career_description_raw: StringWithAggregatesFilter
  company_values: StringNullableListFilter
  contacts: JsonWithAggregatesFilter
  email: StringWithAggregatesFilter
  hiring_process: StringNullableListFilter
  id: StringWithAggregatesFilter
  local_info: JsonWithAggregatesFilter
  metadata: JsonNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  work_environment: StringNullableListFilter
  worldwide_info: JsonWithAggregatesFilter
}

input CompanyUpdateInput {
  about_raw: StringFieldUpdateOperationsInput
  banner_image_url: NullableStringFieldUpdateOperationsInput
  benefits: CompanyUpdatebenefitsInput
  brand_image_url: NullableStringFieldUpdateOperationsInput
  career_description_raw: StringFieldUpdateOperationsInput
  categories: CompanyCategoryUpdateManyWithoutCompaniesNestedInput
  company_values: CompanyUpdatecompany_valuesInput
  contacts: JSON
  email: StringFieldUpdateOperationsInput
  hiring_process: CompanyUpdatehiring_processInput
  id: StringFieldUpdateOperationsInput
  listings: JobListingUpdateManyWithoutCompanyNestedInput
  local_info: JSON
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  work_environment: CompanyUpdatework_environmentInput
  worldwide_info: JSON
}

input CompanyUpdateManyMutationInput {
  about_raw: StringFieldUpdateOperationsInput
  banner_image_url: NullableStringFieldUpdateOperationsInput
  benefits: CompanyUpdatebenefitsInput
  brand_image_url: NullableStringFieldUpdateOperationsInput
  career_description_raw: StringFieldUpdateOperationsInput
  company_values: CompanyUpdatecompany_valuesInput
  contacts: JSON
  email: StringFieldUpdateOperationsInput
  hiring_process: CompanyUpdatehiring_processInput
  id: StringFieldUpdateOperationsInput
  local_info: JSON
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  work_environment: CompanyUpdatework_environmentInput
  worldwide_info: JSON
}

input CompanyUpdateManyWithWhereWithoutCategoriesInput {
  data: CompanyUpdateManyMutationInput!
  where: CompanyScalarWhereInput!
}

input CompanyUpdateManyWithoutCategoriesNestedInput {
  connect: [CompanyWhereUniqueInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutCategoriesInput!]
  create: [CompanyCreateWithoutCategoriesInput!]
  delete: [CompanyWhereUniqueInput!]
  deleteMany: [CompanyScalarWhereInput!]
  disconnect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutCategoriesInput!]
  updateMany: [CompanyUpdateManyWithWhereWithoutCategoriesInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutCategoriesInput!]
}

input CompanyUpdateOneRequiredWithoutListingsNestedInput {
  connect: CompanyWhereUniqueInput
  connectOrCreate: CompanyCreateOrConnectWithoutListingsInput
  create: CompanyCreateWithoutListingsInput
  update: CompanyUpdateToOneWithWhereWithoutListingsInput
  upsert: CompanyUpsertWithoutListingsInput
}

input CompanyUpdateToOneWithWhereWithoutListingsInput {
  data: CompanyUpdateWithoutListingsInput!
  where: CompanyWhereInput
}

input CompanyUpdateWithWhereUniqueWithoutCategoriesInput {
  data: CompanyUpdateWithoutCategoriesInput!
  where: CompanyWhereUniqueInput!
}

input CompanyUpdateWithoutCategoriesInput {
  about_raw: StringFieldUpdateOperationsInput
  banner_image_url: NullableStringFieldUpdateOperationsInput
  benefits: CompanyUpdatebenefitsInput
  brand_image_url: NullableStringFieldUpdateOperationsInput
  career_description_raw: StringFieldUpdateOperationsInput
  company_values: CompanyUpdatecompany_valuesInput
  contacts: JSON
  email: StringFieldUpdateOperationsInput
  hiring_process: CompanyUpdatehiring_processInput
  id: StringFieldUpdateOperationsInput
  listings: JobListingUpdateManyWithoutCompanyNestedInput
  local_info: JSON
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  work_environment: CompanyUpdatework_environmentInput
  worldwide_info: JSON
}

input CompanyUpdateWithoutListingsInput {
  about_raw: StringFieldUpdateOperationsInput
  banner_image_url: NullableStringFieldUpdateOperationsInput
  benefits: CompanyUpdatebenefitsInput
  brand_image_url: NullableStringFieldUpdateOperationsInput
  career_description_raw: StringFieldUpdateOperationsInput
  categories: CompanyCategoryUpdateManyWithoutCompaniesNestedInput
  company_values: CompanyUpdatecompany_valuesInput
  contacts: JSON
  email: StringFieldUpdateOperationsInput
  hiring_process: CompanyUpdatehiring_processInput
  id: StringFieldUpdateOperationsInput
  local_info: JSON
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  work_environment: CompanyUpdatework_environmentInput
  worldwide_info: JSON
}

input CompanyUpdatebenefitsInput {
  push: [String!]
  set: [String!]
}

input CompanyUpdatecompany_valuesInput {
  push: [String!]
  set: [String!]
}

input CompanyUpdatehiring_processInput {
  push: [String!]
  set: [String!]
}

input CompanyUpdatework_environmentInput {
  push: [String!]
  set: [String!]
}

input CompanyUpsertWithWhereUniqueWithoutCategoriesInput {
  create: CompanyCreateWithoutCategoriesInput!
  update: CompanyUpdateWithoutCategoriesInput!
  where: CompanyWhereUniqueInput!
}

input CompanyUpsertWithoutListingsInput {
  create: CompanyCreateWithoutListingsInput!
  update: CompanyUpdateWithoutListingsInput!
  where: CompanyWhereInput
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  about_raw: StringFilter
  banner_image_url: StringNullableFilter
  benefits: StringNullableListFilter
  brand_image_url: StringNullableFilter
  career_description_raw: StringFilter
  categories: CompanyCategoryListRelationFilter
  company_values: StringNullableListFilter
  contacts: JsonFilter
  email: StringFilter
  hiring_process: StringNullableListFilter
  id: StringFilter
  listings: JobListingListRelationFilter
  local_info: JsonFilter
  metadata: JsonNullableFilter
  name: StringFilter
  work_environment: StringNullableListFilter
  worldwide_info: JsonFilter
}

input CompanyWhereUniqueInput {
  AND: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  about_raw: StringFilter
  banner_image_url: StringNullableFilter
  benefits: StringNullableListFilter
  brand_image_url: StringNullableFilter
  career_description_raw: StringFilter
  categories: CompanyCategoryListRelationFilter
  company_values: StringNullableListFilter
  contacts: JsonFilter
  email: String
  hiring_process: StringNullableListFilter
  id: String
  listings: JobListingListRelationFilter
  local_info: JsonFilter
  metadata: JsonNullableFilter
  name: StringFilter
  work_environment: StringNullableListFilter
  worldwide_info: JsonFilter
}

type CompanyWorldwideInfo {
  employeeCount: Int
  founded: DateTimeISO
  headquarters: String!
  locations: [String!]!
}

type Coordinates {
  latitude: Latitude
  longitude: Longitude
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input DateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DateTimeNullableFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableFilter
  notIn: [DateTimeISO!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

input EnumJobListingEmploymentTypeNullableFilter {
  equals: JobListingEmploymentType
  in: [JobListingEmploymentType!]
  not: NestedEnumJobListingEmploymentTypeNullableFilter
  notIn: [JobListingEmploymentType!]
}

input EnumJobListingEmploymentTypeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumJobListingEmploymentTypeNullableFilter
  _min: NestedEnumJobListingEmploymentTypeNullableFilter
  equals: JobListingEmploymentType
  in: [JobListingEmploymentType!]
  not: NestedEnumJobListingEmploymentTypeNullableWithAggregatesFilter
  notIn: [JobListingEmploymentType!]
}

input EnumJobListingLevelNullableFilter {
  equals: JobListingLevel
  in: [JobListingLevel!]
  not: NestedEnumJobListingLevelNullableFilter
  notIn: [JobListingLevel!]
}

input EnumJobListingLevelNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumJobListingLevelNullableFilter
  _min: NestedEnumJobListingLevelNullableFilter
  equals: JobListingLevel
  in: [JobListingLevel!]
  not: NestedEnumJobListingLevelNullableWithAggregatesFilter
  notIn: [JobListingLevel!]
}

input EnumWorkFromHomeNullableFilter {
  equals: WorkFromHome
  in: [WorkFromHome!]
  not: NestedEnumWorkFromHomeNullableFilter
  notIn: [WorkFromHome!]
}

input EnumWorkFromHomeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumWorkFromHomeNullableFilter
  _min: NestedEnumWorkFromHomeNullableFilter
  equals: WorkFromHome
  in: [WorkFromHome!]
  not: NestedEnumWorkFromHomeNullableWithAggregatesFilter
  notIn: [WorkFromHome!]
}

input GetTopCompaniesInput {
  limit: Int = 10
  skip: Int = 0
}

input GetTopListingCategoriesInput {
  limit: Int! = 10
  skip: Int! = 0
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type JobListing {
  _count: JobListingCount
  companyId: String!
  createdAt: DateTimeISO!
  description_raw: String!
  external_application_url: String
  id: ID!
  keywords: [String!]!
  languages: [String!]!
  level: JobListingLevel
  location: String!
  name: String!
  parameters: JSON!
  type: JobListingEmploymentType
  updatedAt: DateTimeISO!
  work_from: WorkFromHome
}

type JobListingCategory {
  _count: JobListingCategoryCount
  description: String!
  id: ID!
  name: String!
}

type JobListingCategoryCount {
  listings(where: JobListingWhereInput): Int!
}

type JobListingCategoryCountAggregate {
  _all: Int!
  description: Int!
  id: Int!
  name: Int!
}

input JobListingCategoryCountOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

input JobListingCategoryCreateInput {
  description: String!
  id: String
  listings: JobListingCreateNestedManyWithoutCategoriesInput
  name: String!
}

input JobListingCategoryCreateManyInput {
  description: String!
  id: String
  name: String!
}

input JobListingCategoryCreateNestedManyWithoutListingsInput {
  connect: [JobListingCategoryWhereUniqueInput!]
  connectOrCreate: [JobListingCategoryCreateOrConnectWithoutListingsInput!]
  create: [JobListingCategoryCreateWithoutListingsInput!]
}

input JobListingCategoryCreateOrConnectWithoutListingsInput {
  create: JobListingCategoryCreateWithoutListingsInput!
  where: JobListingCategoryWhereUniqueInput!
}

input JobListingCategoryCreateWithoutListingsInput {
  description: String!
  id: String
  name: String!
}

type JobListingCategoryGroupBy {
  _count: JobListingCategoryCountAggregate
  _max: JobListingCategoryMaxAggregate
  _min: JobListingCategoryMinAggregate
  description: String!
  id: String!
  name: String!
}

input JobListingCategoryListRelationFilter {
  every: JobListingCategoryWhereInput
  none: JobListingCategoryWhereInput
  some: JobListingCategoryWhereInput
}

type JobListingCategoryMaxAggregate {
  description: String
  id: String
  name: String
}

input JobListingCategoryMaxOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

type JobListingCategoryMinAggregate {
  description: String
  id: String
  name: String
}

input JobListingCategoryMinOrderByAggregateInput {
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

input JobListingCategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

enum JobListingCategoryOrderByRelevanceFieldEnum {
  description
  id
  name
}

input JobListingCategoryOrderByRelevanceInput {
  fields: [JobListingCategoryOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input JobListingCategoryOrderByWithAggregationInput {
  _count: JobListingCategoryCountOrderByAggregateInput
  _max: JobListingCategoryMaxOrderByAggregateInput
  _min: JobListingCategoryMinOrderByAggregateInput
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

input JobListingCategoryOrderByWithRelationInput {
  _relevance: JobListingCategoryOrderByRelevanceInput
  description: SortOrder
  id: SortOrder
  listings: JobListingOrderByRelationAggregateInput
  name: SortOrder
}

enum JobListingCategoryScalarFieldEnum {
  description
  id
  name
}

input JobListingCategoryScalarWhereInput {
  AND: [JobListingCategoryScalarWhereInput!]
  NOT: [JobListingCategoryScalarWhereInput!]
  OR: [JobListingCategoryScalarWhereInput!]
  description: StringFilter
  id: StringFilter
  name: StringFilter
}

input JobListingCategoryScalarWhereWithAggregatesInput {
  AND: [JobListingCategoryScalarWhereWithAggregatesInput!]
  NOT: [JobListingCategoryScalarWhereWithAggregatesInput!]
  OR: [JobListingCategoryScalarWhereWithAggregatesInput!]
  description: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input JobListingCategoryUpdateInput {
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  listings: JobListingUpdateManyWithoutCategoriesNestedInput
  name: StringFieldUpdateOperationsInput
}

input JobListingCategoryUpdateManyMutationInput {
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input JobListingCategoryUpdateManyWithWhereWithoutListingsInput {
  data: JobListingCategoryUpdateManyMutationInput!
  where: JobListingCategoryScalarWhereInput!
}

input JobListingCategoryUpdateManyWithoutListingsNestedInput {
  connect: [JobListingCategoryWhereUniqueInput!]
  connectOrCreate: [JobListingCategoryCreateOrConnectWithoutListingsInput!]
  create: [JobListingCategoryCreateWithoutListingsInput!]
  delete: [JobListingCategoryWhereUniqueInput!]
  deleteMany: [JobListingCategoryScalarWhereInput!]
  disconnect: [JobListingCategoryWhereUniqueInput!]
  set: [JobListingCategoryWhereUniqueInput!]
  update: [JobListingCategoryUpdateWithWhereUniqueWithoutListingsInput!]
  updateMany: [JobListingCategoryUpdateManyWithWhereWithoutListingsInput!]
  upsert: [JobListingCategoryUpsertWithWhereUniqueWithoutListingsInput!]
}

input JobListingCategoryUpdateWithWhereUniqueWithoutListingsInput {
  data: JobListingCategoryUpdateWithoutListingsInput!
  where: JobListingCategoryWhereUniqueInput!
}

input JobListingCategoryUpdateWithoutListingsInput {
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input JobListingCategoryUpsertWithWhereUniqueWithoutListingsInput {
  create: JobListingCategoryCreateWithoutListingsInput!
  update: JobListingCategoryUpdateWithoutListingsInput!
  where: JobListingCategoryWhereUniqueInput!
}

input JobListingCategoryWhereInput {
  AND: [JobListingCategoryWhereInput!]
  NOT: [JobListingCategoryWhereInput!]
  OR: [JobListingCategoryWhereInput!]
  description: StringFilter
  id: StringFilter
  listings: JobListingListRelationFilter
  name: StringFilter
}

input JobListingCategoryWhereUniqueInput {
  AND: [JobListingCategoryWhereInput!]
  NOT: [JobListingCategoryWhereInput!]
  OR: [JobListingCategoryWhereInput!]
  description: StringFilter
  id: String
  listings: JobListingListRelationFilter
  name: StringFilter
}

type JobListingCount {
  categories(where: JobListingCategoryWhereInput): Int!
}

type JobListingCountAggregate {
  _all: Int!
  companyId: Int!
  createdAt: Int!
  description_raw: Int!
  external_application_url: Int!
  id: Int!
  keywords: Int!
  languages: Int!
  level: Int!
  location: Int!
  name: Int!
  parameters: Int!
  type: Int!
  updatedAt: Int!
  work_from: Int!
}

input JobListingCountOrderByAggregateInput {
  companyId: SortOrder
  description_raw: SortOrder
  external_application_url: SortOrder
  id: SortOrder
  keywords: SortOrder
  languages: SortOrder
  level: SortOrder
  location: SortOrder
  name: SortOrder
  parameters: SortOrder
  type: SortOrder
  work_from: SortOrder
}

input JobListingCreateInput {
  categories: JobListingCategoryCreateNestedManyWithoutListingsInput
  company: CompanyCreateNestedOneWithoutListingsInput!
  description_raw: String!
  external_application_url: String
  id: String
  keywords: JobListingCreatekeywordsInput
  languages: JobListingCreatelanguagesInput
  level: JobListingLevel
  location: String!
  name: String!
  parameters: JSON
  type: JobListingEmploymentType
  work_from: WorkFromHome
}

input JobListingCreateManyCompanyInput {
  description_raw: String!
  external_application_url: String
  id: String
  keywords: JobListingCreatekeywordsInput
  languages: JobListingCreatelanguagesInput
  level: JobListingLevel
  location: String!
  name: String!
  parameters: JSON
  type: JobListingEmploymentType
  work_from: WorkFromHome
}

input JobListingCreateManyCompanyInputEnvelope {
  data: [JobListingCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input JobListingCreateManyInput {
  companyId: String!
  description_raw: String!
  external_application_url: String
  id: String
  keywords: JobListingCreatekeywordsInput
  languages: JobListingCreatelanguagesInput
  level: JobListingLevel
  location: String!
  name: String!
  parameters: JSON
  type: JobListingEmploymentType
  work_from: WorkFromHome
}

input JobListingCreateNestedManyWithoutCategoriesInput {
  connect: [JobListingWhereUniqueInput!]
  connectOrCreate: [JobListingCreateOrConnectWithoutCategoriesInput!]
  create: [JobListingCreateWithoutCategoriesInput!]
}

input JobListingCreateNestedManyWithoutCompanyInput {
  connect: [JobListingWhereUniqueInput!]
  connectOrCreate: [JobListingCreateOrConnectWithoutCompanyInput!]
  create: [JobListingCreateWithoutCompanyInput!]
  createMany: JobListingCreateManyCompanyInputEnvelope
}

input JobListingCreateOrConnectWithoutCategoriesInput {
  create: JobListingCreateWithoutCategoriesInput!
  where: JobListingWhereUniqueInput!
}

input JobListingCreateOrConnectWithoutCompanyInput {
  create: JobListingCreateWithoutCompanyInput!
  where: JobListingWhereUniqueInput!
}

input JobListingCreateWithoutCategoriesInput {
  company: CompanyCreateNestedOneWithoutListingsInput!
  description_raw: String!
  external_application_url: String
  id: String
  keywords: JobListingCreatekeywordsInput
  languages: JobListingCreatelanguagesInput
  level: JobListingLevel
  location: String!
  name: String!
  parameters: JSON
  type: JobListingEmploymentType
  work_from: WorkFromHome
}

input JobListingCreateWithoutCompanyInput {
  categories: JobListingCategoryCreateNestedManyWithoutListingsInput
  description_raw: String!
  external_application_url: String
  id: String
  keywords: JobListingCreatekeywordsInput
  languages: JobListingCreatelanguagesInput
  level: JobListingLevel
  location: String!
  name: String!
  parameters: JSON
  type: JobListingEmploymentType
  work_from: WorkFromHome
}

input JobListingCreatekeywordsInput {
  set: [String!]!
}

input JobListingCreatelanguagesInput {
  set: [String!]!
}

enum JobListingEmploymentType {
  FlexibleTime
  ForStudents
  FreelanceProject
  FullTime
  PartTime
  Permanent
  RefugeeStatus
  Temporary
}

type JobListingGroupBy {
  _count: JobListingCountAggregate
  _max: JobListingMaxAggregate
  _min: JobListingMinAggregate
  companyId: String!
  createdAt: DateTimeISO!
  description_raw: String!
  external_application_url: String
  id: String!
  keywords: [String!]
  languages: [String!]
  level: JobListingLevel
  location: String!
  name: String!
  parameters: JSON!
  type: JobListingEmploymentType
  updatedAt: DateTimeISO!
  work_from: WorkFromHome
}

enum JobListingLevel {
  Experts
  Management
  Staff
}

input JobListingListRelationFilter {
  every: JobListingWhereInput
  none: JobListingWhereInput
  some: JobListingWhereInput
}

type JobListingMaxAggregate {
  companyId: String
  createdAt: DateTimeISO
  description_raw: String
  external_application_url: String
  id: String
  level: JobListingLevel
  location: String
  name: String
  type: JobListingEmploymentType
  updatedAt: DateTimeISO
  work_from: WorkFromHome
}

input JobListingMaxOrderByAggregateInput {
  companyId: SortOrder
  description_raw: SortOrder
  external_application_url: SortOrder
  id: SortOrder
  level: SortOrder
  location: SortOrder
  name: SortOrder
  type: SortOrder
  work_from: SortOrder
}

type JobListingMinAggregate {
  companyId: String
  createdAt: DateTimeISO
  description_raw: String
  external_application_url: String
  id: String
  level: JobListingLevel
  location: String
  name: String
  type: JobListingEmploymentType
  updatedAt: DateTimeISO
  work_from: WorkFromHome
}

input JobListingMinOrderByAggregateInput {
  companyId: SortOrder
  description_raw: SortOrder
  external_application_url: SortOrder
  id: SortOrder
  level: SortOrder
  location: SortOrder
  name: SortOrder
  type: SortOrder
  work_from: SortOrder
}

input JobListingOrderByRelationAggregateInput {
  _count: SortOrder
}

enum JobListingOrderByRelevanceFieldEnum {
  companyId
  description_raw
  external_application_url
  id
  keywords
  languages
  location
  name
}

input JobListingOrderByRelevanceInput {
  fields: [JobListingOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input JobListingOrderByWithAggregationInput {
  _count: JobListingCountOrderByAggregateInput
  _max: JobListingMaxOrderByAggregateInput
  _min: JobListingMinOrderByAggregateInput
  companyId: SortOrder
  description_raw: SortOrder
  external_application_url: SortOrderInput
  id: SortOrder
  keywords: SortOrder
  languages: SortOrder
  level: SortOrderInput
  location: SortOrder
  name: SortOrder
  parameters: SortOrder
  type: SortOrderInput
  work_from: SortOrderInput
}

input JobListingOrderByWithRelationInput {
  _relevance: JobListingOrderByRelevanceInput
  categories: JobListingCategoryOrderByRelationAggregateInput
  company: CompanyOrderByWithRelationInput
  companyId: SortOrder
  description_raw: SortOrder
  external_application_url: SortOrderInput
  id: SortOrder
  keywords: SortOrder
  languages: SortOrder
  level: SortOrderInput
  location: SortOrder
  name: SortOrder
  parameters: SortOrder
  type: SortOrderInput
  work_from: SortOrderInput
}

enum JobListingScalarFieldEnum {
  companyId
  createdAt
  description_raw
  external_application_url
  id
  keywords
  languages
  level
  location
  name
  parameters
  type
  updatedAt
  work_from
}

input JobListingScalarWhereInput {
  AND: [JobListingScalarWhereInput!]
  NOT: [JobListingScalarWhereInput!]
  OR: [JobListingScalarWhereInput!]
  companyId: StringFilter
  description_raw: StringFilter
  external_application_url: StringNullableFilter
  id: StringFilter
  keywords: StringNullableListFilter
  languages: StringNullableListFilter
  level: EnumJobListingLevelNullableFilter
  location: StringFilter
  name: StringFilter
  parameters: JsonFilter
  type: EnumJobListingEmploymentTypeNullableFilter
  work_from: EnumWorkFromHomeNullableFilter
}

input JobListingScalarWhereWithAggregatesInput {
  AND: [JobListingScalarWhereWithAggregatesInput!]
  NOT: [JobListingScalarWhereWithAggregatesInput!]
  OR: [JobListingScalarWhereWithAggregatesInput!]
  companyId: StringWithAggregatesFilter
  description_raw: StringWithAggregatesFilter
  external_application_url: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  keywords: StringNullableListFilter
  languages: StringNullableListFilter
  level: EnumJobListingLevelNullableWithAggregatesFilter
  location: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  parameters: JsonWithAggregatesFilter
  type: EnumJobListingEmploymentTypeNullableWithAggregatesFilter
  work_from: EnumWorkFromHomeNullableWithAggregatesFilter
}

input JobListingUpdateInput {
  categories: JobListingCategoryUpdateManyWithoutListingsNestedInput
  company: CompanyUpdateOneRequiredWithoutListingsNestedInput
  description_raw: StringFieldUpdateOperationsInput
  external_application_url: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  keywords: JobListingUpdatekeywordsInput
  languages: JobListingUpdatelanguagesInput
  level: NullableEnumJobListingLevelFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  parameters: JSON
  type: NullableEnumJobListingEmploymentTypeFieldUpdateOperationsInput
  work_from: NullableEnumWorkFromHomeFieldUpdateOperationsInput
}

input JobListingUpdateManyMutationInput {
  description_raw: StringFieldUpdateOperationsInput
  external_application_url: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  keywords: JobListingUpdatekeywordsInput
  languages: JobListingUpdatelanguagesInput
  level: NullableEnumJobListingLevelFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  parameters: JSON
  type: NullableEnumJobListingEmploymentTypeFieldUpdateOperationsInput
  work_from: NullableEnumWorkFromHomeFieldUpdateOperationsInput
}

input JobListingUpdateManyWithWhereWithoutCategoriesInput {
  data: JobListingUpdateManyMutationInput!
  where: JobListingScalarWhereInput!
}

input JobListingUpdateManyWithWhereWithoutCompanyInput {
  data: JobListingUpdateManyMutationInput!
  where: JobListingScalarWhereInput!
}

input JobListingUpdateManyWithoutCategoriesNestedInput {
  connect: [JobListingWhereUniqueInput!]
  connectOrCreate: [JobListingCreateOrConnectWithoutCategoriesInput!]
  create: [JobListingCreateWithoutCategoriesInput!]
  delete: [JobListingWhereUniqueInput!]
  deleteMany: [JobListingScalarWhereInput!]
  disconnect: [JobListingWhereUniqueInput!]
  set: [JobListingWhereUniqueInput!]
  update: [JobListingUpdateWithWhereUniqueWithoutCategoriesInput!]
  updateMany: [JobListingUpdateManyWithWhereWithoutCategoriesInput!]
  upsert: [JobListingUpsertWithWhereUniqueWithoutCategoriesInput!]
}

input JobListingUpdateManyWithoutCompanyNestedInput {
  connect: [JobListingWhereUniqueInput!]
  connectOrCreate: [JobListingCreateOrConnectWithoutCompanyInput!]
  create: [JobListingCreateWithoutCompanyInput!]
  createMany: JobListingCreateManyCompanyInputEnvelope
  delete: [JobListingWhereUniqueInput!]
  deleteMany: [JobListingScalarWhereInput!]
  disconnect: [JobListingWhereUniqueInput!]
  set: [JobListingWhereUniqueInput!]
  update: [JobListingUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [JobListingUpdateManyWithWhereWithoutCompanyInput!]
  upsert: [JobListingUpsertWithWhereUniqueWithoutCompanyInput!]
}

input JobListingUpdateWithWhereUniqueWithoutCategoriesInput {
  data: JobListingUpdateWithoutCategoriesInput!
  where: JobListingWhereUniqueInput!
}

input JobListingUpdateWithWhereUniqueWithoutCompanyInput {
  data: JobListingUpdateWithoutCompanyInput!
  where: JobListingWhereUniqueInput!
}

input JobListingUpdateWithoutCategoriesInput {
  company: CompanyUpdateOneRequiredWithoutListingsNestedInput
  description_raw: StringFieldUpdateOperationsInput
  external_application_url: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  keywords: JobListingUpdatekeywordsInput
  languages: JobListingUpdatelanguagesInput
  level: NullableEnumJobListingLevelFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  parameters: JSON
  type: NullableEnumJobListingEmploymentTypeFieldUpdateOperationsInput
  work_from: NullableEnumWorkFromHomeFieldUpdateOperationsInput
}

input JobListingUpdateWithoutCompanyInput {
  categories: JobListingCategoryUpdateManyWithoutListingsNestedInput
  description_raw: StringFieldUpdateOperationsInput
  external_application_url: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  keywords: JobListingUpdatekeywordsInput
  languages: JobListingUpdatelanguagesInput
  level: NullableEnumJobListingLevelFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  parameters: JSON
  type: NullableEnumJobListingEmploymentTypeFieldUpdateOperationsInput
  work_from: NullableEnumWorkFromHomeFieldUpdateOperationsInput
}

input JobListingUpdatekeywordsInput {
  push: [String!]
  set: [String!]
}

input JobListingUpdatelanguagesInput {
  push: [String!]
  set: [String!]
}

input JobListingUpsertWithWhereUniqueWithoutCategoriesInput {
  create: JobListingCreateWithoutCategoriesInput!
  update: JobListingUpdateWithoutCategoriesInput!
  where: JobListingWhereUniqueInput!
}

input JobListingUpsertWithWhereUniqueWithoutCompanyInput {
  create: JobListingCreateWithoutCompanyInput!
  update: JobListingUpdateWithoutCompanyInput!
  where: JobListingWhereUniqueInput!
}

input JobListingWhereInput {
  AND: [JobListingWhereInput!]
  NOT: [JobListingWhereInput!]
  OR: [JobListingWhereInput!]
  categories: JobListingCategoryListRelationFilter
  company: CompanyRelationFilter
  companyId: StringFilter
  description_raw: StringFilter
  external_application_url: StringNullableFilter
  id: StringFilter
  keywords: StringNullableListFilter
  languages: StringNullableListFilter
  level: EnumJobListingLevelNullableFilter
  location: StringFilter
  name: StringFilter
  parameters: JsonFilter
  type: EnumJobListingEmploymentTypeNullableFilter
  work_from: EnumWorkFromHomeNullableFilter
}

input JobListingWhereUniqueInput {
  AND: [JobListingWhereInput!]
  NOT: [JobListingWhereInput!]
  OR: [JobListingWhereInput!]
  categories: JobListingCategoryListRelationFilter
  company: CompanyRelationFilter
  companyId: StringFilter
  description_raw: StringFilter
  external_application_url: StringNullableFilter
  id: String
  keywords: StringNullableListFilter
  languages: StringNullableListFilter
  level: EnumJobListingLevelNullableFilter
  location: StringFilter
  name: StringFilter
  parameters: JsonFilter
  type: EnumJobListingEmploymentTypeNullableFilter
  work_from: EnumWorkFromHomeNullableFilter
}

input JsonFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input JsonNullableFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input JsonNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedJsonNullableFilter
  _min: NestedJsonNullableFilter
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input JsonWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedJsonFilter
  _min: NestedJsonFilter
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

"""
A field whose value is a valid decimal degrees latitude number (53.471): https://en.wikipedia.org/wiki/Latitude
"""
scalar Latitude

"""
A field whose value is a valid decimal degrees longitude number (53.471): https://en.wikipedia.org/wiki/Longitude
"""
scalar Longitude

type Mutation {
  createManyAccount(data: [AccountCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyCompany(data: [CompanyCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyCompanyCategory(data: [CompanyCategoryCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyJobListing(data: [JobListingCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyJobListingCategory(data: [JobListingCategoryCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManySession(data: [SessionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyVerificationToken(data: [VerificationTokenCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createOneAccount(data: AccountCreateInput!, relationLoadStrategy: RelationLoadStrategy): Account!
  createOneCompany(data: CompanyCreateInput!, relationLoadStrategy: RelationLoadStrategy): Company!
  createOneCompanyCategory(data: CompanyCategoryCreateInput!, relationLoadStrategy: RelationLoadStrategy): CompanyCategory!
  createOneJobListing(data: JobListingCreateInput!, relationLoadStrategy: RelationLoadStrategy): JobListing!
  createOneJobListingCategory(data: JobListingCategoryCreateInput!, relationLoadStrategy: RelationLoadStrategy): JobListingCategory!
  createOneSession(data: SessionCreateInput!, relationLoadStrategy: RelationLoadStrategy): Session!
  createOneUser(data: UserCreateInput!, relationLoadStrategy: RelationLoadStrategy): User!
  createOneVerificationToken(data: VerificationTokenCreateInput!, relationLoadStrategy: RelationLoadStrategy): VerificationToken!
  deleteManyAccount(where: AccountWhereInput): AffectedRowsOutput!
  deleteManyCompany(where: CompanyWhereInput): AffectedRowsOutput!
  deleteManyCompanyCategory(where: CompanyCategoryWhereInput): AffectedRowsOutput!
  deleteManyJobListing(where: JobListingWhereInput): AffectedRowsOutput!
  deleteManyJobListingCategory(where: JobListingCategoryWhereInput): AffectedRowsOutput!
  deleteManySession(where: SessionWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteManyVerificationToken(where: VerificationTokenWhereInput): AffectedRowsOutput!
  deleteOneAccount(relationLoadStrategy: RelationLoadStrategy, where: AccountWhereUniqueInput!): Account
  deleteOneCompany(relationLoadStrategy: RelationLoadStrategy, where: CompanyWhereUniqueInput!): Company
  deleteOneCompanyCategory(relationLoadStrategy: RelationLoadStrategy, where: CompanyCategoryWhereUniqueInput!): CompanyCategory
  deleteOneJobListing(relationLoadStrategy: RelationLoadStrategy, where: JobListingWhereUniqueInput!): JobListing
  deleteOneJobListingCategory(relationLoadStrategy: RelationLoadStrategy, where: JobListingCategoryWhereUniqueInput!): JobListingCategory
  deleteOneSession(relationLoadStrategy: RelationLoadStrategy, where: SessionWhereUniqueInput!): Session
  deleteOneUser(relationLoadStrategy: RelationLoadStrategy, where: UserWhereUniqueInput!): User
  deleteOneVerificationToken(relationLoadStrategy: RelationLoadStrategy, where: VerificationTokenWhereUniqueInput!): VerificationToken
  fileUpload(file: Upload!): Boolean!
  generateSignUpEmailCode(email: EmailAddress!): SignUpWithEmailCodeResponse!
  sendVerificationEmail: SendVerificationEmailResponse!
  signIn(signInModel: UserSignInInput!): User
  signInWithEmailCode(code: Int!, email: EmailAddress!, identifier: String!): User
  signOut: Boolean!
  signUp(signUpModel: UserSignUpInput!): User!
  signUpWithEmailCode(code: Int!, email: EmailAddress!, firstName: String!, identifier: String!, lastName: String!): User!
  updateManyAccount(data: AccountUpdateManyMutationInput!, where: AccountWhereInput): AffectedRowsOutput!
  updateManyCompany(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): AffectedRowsOutput!
  updateManyCompanyCategory(data: CompanyCategoryUpdateManyMutationInput!, where: CompanyCategoryWhereInput): AffectedRowsOutput!
  updateManyJobListing(data: JobListingUpdateManyMutationInput!, where: JobListingWhereInput): AffectedRowsOutput!
  updateManyJobListingCategory(data: JobListingCategoryUpdateManyMutationInput!, where: JobListingCategoryWhereInput): AffectedRowsOutput!
  updateManySession(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateManyVerificationToken(data: VerificationTokenUpdateManyMutationInput!, where: VerificationTokenWhereInput): AffectedRowsOutput!
  updateOneAccount(data: AccountUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: AccountWhereUniqueInput!): Account
  updateOneCompany(data: CompanyUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: CompanyWhereUniqueInput!): Company
  updateOneCompanyCategory(data: CompanyCategoryUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: CompanyCategoryWhereUniqueInput!): CompanyCategory
  updateOneJobListing(data: JobListingUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: JobListingWhereUniqueInput!): JobListing
  updateOneJobListingCategory(data: JobListingCategoryUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: JobListingCategoryWhereUniqueInput!): JobListingCategory
  updateOneSession(data: SessionUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: SessionWhereUniqueInput!): Session
  updateOneUser(data: UserUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: UserWhereUniqueInput!): User
  updateOneVerificationToken(data: VerificationTokenUpdateInput!, relationLoadStrategy: RelationLoadStrategy, where: VerificationTokenWhereUniqueInput!): VerificationToken
  upsertOneAccount(create: AccountCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account!
  upsertOneCompany(create: CompanyCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company!
  upsertOneCompanyCategory(create: CompanyCategoryCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: CompanyCategoryUpdateInput!, where: CompanyCategoryWhereUniqueInput!): CompanyCategory!
  upsertOneJobListing(create: JobListingCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: JobListingUpdateInput!, where: JobListingWhereUniqueInput!): JobListing!
  upsertOneJobListingCategory(create: JobListingCategoryCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: JobListingCategoryUpdateInput!, where: JobListingCategoryWhereUniqueInput!): JobListingCategory!
  upsertOneSession(create: SessionCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session!
  upsertOneUser(create: UserCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertOneVerificationToken(create: VerificationTokenCreateInput!, relationLoadStrategy: RelationLoadStrategy, update: VerificationTokenUpdateInput!, where: VerificationTokenWhereUniqueInput!): VerificationToken!
  verifyEmail: VerifyEmailResponse!
}

input NestedDateTimeFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeNullableFilter {
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTimeISO
  gt: DateTimeISO
  gte: DateTimeISO
  in: [DateTimeISO!]
  lt: DateTimeISO
  lte: DateTimeISO
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTimeISO!]
}

input NestedEnumJobListingEmploymentTypeNullableFilter {
  equals: JobListingEmploymentType
  in: [JobListingEmploymentType!]
  not: NestedEnumJobListingEmploymentTypeNullableFilter
  notIn: [JobListingEmploymentType!]
}

input NestedEnumJobListingEmploymentTypeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumJobListingEmploymentTypeNullableFilter
  _min: NestedEnumJobListingEmploymentTypeNullableFilter
  equals: JobListingEmploymentType
  in: [JobListingEmploymentType!]
  not: NestedEnumJobListingEmploymentTypeNullableWithAggregatesFilter
  notIn: [JobListingEmploymentType!]
}

input NestedEnumJobListingLevelNullableFilter {
  equals: JobListingLevel
  in: [JobListingLevel!]
  not: NestedEnumJobListingLevelNullableFilter
  notIn: [JobListingLevel!]
}

input NestedEnumJobListingLevelNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumJobListingLevelNullableFilter
  _min: NestedEnumJobListingLevelNullableFilter
  equals: JobListingLevel
  in: [JobListingLevel!]
  not: NestedEnumJobListingLevelNullableWithAggregatesFilter
  notIn: [JobListingLevel!]
}

input NestedEnumWorkFromHomeNullableFilter {
  equals: WorkFromHome
  in: [WorkFromHome!]
  not: NestedEnumWorkFromHomeNullableFilter
  notIn: [WorkFromHome!]
}

input NestedEnumWorkFromHomeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedEnumWorkFromHomeNullableFilter
  _min: NestedEnumWorkFromHomeNullableFilter
  equals: WorkFromHome
  in: [WorkFromHome!]
  not: NestedEnumWorkFromHomeNullableWithAggregatesFilter
  notIn: [WorkFromHome!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedJsonFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input NestedJsonNullableFilter {
  array_contains: JSON
  array_ends_with: JSON
  array_starts_with: JSON
  equals: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  not: JSON
  path: [String!]
  string_contains: String
  string_ends_with: String
  string_starts_with: String
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTimeISO
}

input NullableEnumJobListingEmploymentTypeFieldUpdateOperationsInput {
  set: JobListingEmploymentType
}

input NullableEnumJobListingLevelFieldUpdateOperationsInput {
  set: JobListingLevel
}

input NullableEnumWorkFromHomeFieldUpdateOperationsInput {
  set: WorkFromHome
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

type Query {
  account(relationLoadStrategy: RelationLoadStrategy, where: AccountWhereUniqueInput!): Account
  accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: AccountWhereInput): [Account!]!
  aggregateAccount(cursor: AccountWhereUniqueInput, orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): AggregateAccount!
  aggregateCompany(cursor: CompanyWhereUniqueInput, orderBy: [CompanyOrderByWithRelationInput!], skip: Int, take: Int, where: CompanyWhereInput): AggregateCompany!
  aggregateCompanyCategory(cursor: CompanyCategoryWhereUniqueInput, orderBy: [CompanyCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: CompanyCategoryWhereInput): AggregateCompanyCategory!
  aggregateJobListing(cursor: JobListingWhereUniqueInput, orderBy: [JobListingOrderByWithRelationInput!], skip: Int, take: Int, where: JobListingWhereInput): AggregateJobListing!
  aggregateJobListingCategory(cursor: JobListingCategoryWhereUniqueInput, orderBy: [JobListingCategoryOrderByWithRelationInput!], skip: Int, take: Int, where: JobListingCategoryWhereInput): AggregateJobListingCategory!
  aggregateSession(cursor: SessionWhereUniqueInput, orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): AggregateSession!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  aggregateVerificationToken(cursor: VerificationTokenWhereUniqueInput, orderBy: [VerificationTokenOrderByWithRelationInput!], skip: Int, take: Int, where: VerificationTokenWhereInput): AggregateVerificationToken!
  companies(cursor: CompanyWhereUniqueInput, distinct: [CompanyScalarFieldEnum!], orderBy: [CompanyOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: CompanyWhereInput): [Company!]!
  company(relationLoadStrategy: RelationLoadStrategy, where: CompanyWhereUniqueInput!): Company
  companyCategories(cursor: CompanyCategoryWhereUniqueInput, distinct: [CompanyCategoryScalarFieldEnum!], orderBy: [CompanyCategoryOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: CompanyCategoryWhereInput): [CompanyCategory!]!
  companyCategory(relationLoadStrategy: RelationLoadStrategy, where: CompanyCategoryWhereUniqueInput!): CompanyCategory
  findById(id: String!): User!
  findFirstAccount(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: AccountWhereInput): Account
  findFirstAccountOrThrow(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: AccountWhereInput): Account
  findFirstCompany(cursor: CompanyWhereUniqueInput, distinct: [CompanyScalarFieldEnum!], orderBy: [CompanyOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: CompanyWhereInput): Company
  findFirstCompanyCategory(cursor: CompanyCategoryWhereUniqueInput, distinct: [CompanyCategoryScalarFieldEnum!], orderBy: [CompanyCategoryOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: CompanyCategoryWhereInput): CompanyCategory
  findFirstCompanyCategoryOrThrow(cursor: CompanyCategoryWhereUniqueInput, distinct: [CompanyCategoryScalarFieldEnum!], orderBy: [CompanyCategoryOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: CompanyCategoryWhereInput): CompanyCategory
  findFirstCompanyOrThrow(cursor: CompanyWhereUniqueInput, distinct: [CompanyScalarFieldEnum!], orderBy: [CompanyOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: CompanyWhereInput): Company
  findFirstJobListing(cursor: JobListingWhereUniqueInput, distinct: [JobListingScalarFieldEnum!], orderBy: [JobListingOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: JobListingWhereInput): JobListing
  findFirstJobListingCategory(cursor: JobListingCategoryWhereUniqueInput, distinct: [JobListingCategoryScalarFieldEnum!], orderBy: [JobListingCategoryOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: JobListingCategoryWhereInput): JobListingCategory
  findFirstJobListingCategoryOrThrow(cursor: JobListingCategoryWhereUniqueInput, distinct: [JobListingCategoryScalarFieldEnum!], orderBy: [JobListingCategoryOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: JobListingCategoryWhereInput): JobListingCategory
  findFirstJobListingOrThrow(cursor: JobListingWhereUniqueInput, distinct: [JobListingScalarFieldEnum!], orderBy: [JobListingOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: JobListingWhereInput): JobListing
  findFirstSession(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: SessionWhereInput): Session
  findFirstSessionOrThrow(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: SessionWhereInput): Session
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: UserWhereInput): User
  findFirstUserOrThrow(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: UserWhereInput): User
  findFirstVerificationToken(cursor: VerificationTokenWhereUniqueInput, distinct: [VerificationTokenScalarFieldEnum!], orderBy: [VerificationTokenOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: VerificationTokenWhereInput): VerificationToken
  findFirstVerificationTokenOrThrow(cursor: VerificationTokenWhereUniqueInput, distinct: [VerificationTokenScalarFieldEnum!], orderBy: [VerificationTokenOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: VerificationTokenWhereInput): VerificationToken
  getAccount(relationLoadStrategy: RelationLoadStrategy, where: AccountWhereUniqueInput!): Account
  getCompany(relationLoadStrategy: RelationLoadStrategy, where: CompanyWhereUniqueInput!): Company
  getCompanyCategory(relationLoadStrategy: RelationLoadStrategy, where: CompanyCategoryWhereUniqueInput!): CompanyCategory
  getJobListing(relationLoadStrategy: RelationLoadStrategy, where: JobListingWhereUniqueInput!): JobListing
  getJobListingCategory(relationLoadStrategy: RelationLoadStrategy, where: JobListingCategoryWhereUniqueInput!): JobListingCategory
  getSession(relationLoadStrategy: RelationLoadStrategy, where: SessionWhereUniqueInput!): Session
  getTopCompanies(input: GetTopCompaniesInput!): [Company!]!
  getTopListingCategories(input: GetTopListingCategoriesInput!): [JobListingCategory!]!
  getUser(relationLoadStrategy: RelationLoadStrategy, where: UserWhereUniqueInput!): User
  getVerificationToken(relationLoadStrategy: RelationLoadStrategy, where: VerificationTokenWhereUniqueInput!): VerificationToken
  googleLoginUrl(redirect_url: String): String!
  groupByAccount(by: [AccountScalarFieldEnum!]!, having: AccountScalarWhereWithAggregatesInput, orderBy: [AccountOrderByWithAggregationInput!], skip: Int, take: Int, where: AccountWhereInput): [AccountGroupBy!]!
  groupByCompany(by: [CompanyScalarFieldEnum!]!, having: CompanyScalarWhereWithAggregatesInput, orderBy: [CompanyOrderByWithAggregationInput!], skip: Int, take: Int, where: CompanyWhereInput): [CompanyGroupBy!]!
  groupByCompanyCategory(by: [CompanyCategoryScalarFieldEnum!]!, having: CompanyCategoryScalarWhereWithAggregatesInput, orderBy: [CompanyCategoryOrderByWithAggregationInput!], skip: Int, take: Int, where: CompanyCategoryWhereInput): [CompanyCategoryGroupBy!]!
  groupByJobListing(by: [JobListingScalarFieldEnum!]!, having: JobListingScalarWhereWithAggregatesInput, orderBy: [JobListingOrderByWithAggregationInput!], skip: Int, take: Int, where: JobListingWhereInput): [JobListingGroupBy!]!
  groupByJobListingCategory(by: [JobListingCategoryScalarFieldEnum!]!, having: JobListingCategoryScalarWhereWithAggregatesInput, orderBy: [JobListingCategoryOrderByWithAggregationInput!], skip: Int, take: Int, where: JobListingCategoryWhereInput): [JobListingCategoryGroupBy!]!
  groupBySession(by: [SessionScalarFieldEnum!]!, having: SessionScalarWhereWithAggregatesInput, orderBy: [SessionOrderByWithAggregationInput!], skip: Int, take: Int, where: SessionWhereInput): [SessionGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  groupByVerificationToken(by: [VerificationTokenScalarFieldEnum!]!, having: VerificationTokenScalarWhereWithAggregatesInput, orderBy: [VerificationTokenOrderByWithAggregationInput!], skip: Int, take: Int, where: VerificationTokenWhereInput): [VerificationTokenGroupBy!]!
  jobListing(relationLoadStrategy: RelationLoadStrategy, where: JobListingWhereUniqueInput!): JobListing
  jobListingCategories(cursor: JobListingCategoryWhereUniqueInput, distinct: [JobListingCategoryScalarFieldEnum!], orderBy: [JobListingCategoryOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: JobListingCategoryWhereInput): [JobListingCategory!]!
  jobListingCategory(relationLoadStrategy: RelationLoadStrategy, where: JobListingCategoryWhereUniqueInput!): JobListingCategory
  jobListings(cursor: JobListingWhereUniqueInput, distinct: [JobListingScalarFieldEnum!], orderBy: [JobListingOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: JobListingWhereInput): [JobListing!]!
  me: User
  search(search: UsersSearchInput! = {limit: 10, search: ""}): [UserSearchResponse!]!
  session(relationLoadStrategy: RelationLoadStrategy, where: SessionWhereUniqueInput!): Session
  sessions(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: SessionWhereInput): [Session!]!
  user(relationLoadStrategy: RelationLoadStrategy, where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: UserWhereInput): [User!]!
  verificationToken(relationLoadStrategy: RelationLoadStrategy, where: VerificationTokenWhereUniqueInput!): VerificationToken
  verificationTokens(cursor: VerificationTokenWhereUniqueInput, distinct: [VerificationTokenScalarFieldEnum!], orderBy: [VerificationTokenOrderByWithRelationInput!], relationLoadStrategy: RelationLoadStrategy, skip: Int, take: Int, where: VerificationTokenWhereInput): [VerificationToken!]!
}

enum QueryMode {
  default
  insensitive
}

enum RelationLoadStrategy {
  join
  query
}

type SendVerificationEmailResponse {
  error: String
  success: Boolean!
}

type Session {
  createdAt: DateTimeISO!
  expiresAt: DateTimeISO!
  id: ID!
  sessionToken: String!
  updatedAt: DateTimeISO!
  userId: String!
}

type SessionCountAggregate {
  _all: Int!
  createdAt: Int!
  expiresAt: Int!
  id: Int!
  sessionToken: Int!
  updatedAt: Int!
  userId: Int!
}

input SessionCountOrderByAggregateInput {
  expiresAt: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  userId: SortOrder
}

input SessionCreateInput {
  expiresAt: DateTimeISO!
  id: String
  sessionToken: String!
  user: UserCreateNestedOneWithoutSessionsInput!
}

input SessionCreateManyInput {
  expiresAt: DateTimeISO!
  id: String
  sessionToken: String!
  userId: String!
}

input SessionCreateManyUserInput {
  expiresAt: DateTimeISO!
  id: String
  sessionToken: String!
}

input SessionCreateManyUserInputEnvelope {
  data: [SessionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input SessionCreateNestedManyWithoutUserInput {
  connect: [SessionWhereUniqueInput!]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput!]
  create: [SessionCreateWithoutUserInput!]
  createMany: SessionCreateManyUserInputEnvelope
}

input SessionCreateOrConnectWithoutUserInput {
  create: SessionCreateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionCreateWithoutUserInput {
  expiresAt: DateTimeISO!
  id: String
  sessionToken: String!
}

type SessionGroupBy {
  _count: SessionCountAggregate
  _max: SessionMaxAggregate
  _min: SessionMinAggregate
  createdAt: DateTimeISO!
  expiresAt: DateTimeISO!
  id: String!
  sessionToken: String!
  updatedAt: DateTimeISO!
  userId: String!
}

input SessionListRelationFilter {
  every: SessionWhereInput
  none: SessionWhereInput
  some: SessionWhereInput
}

type SessionMaxAggregate {
  createdAt: DateTimeISO
  expiresAt: DateTimeISO
  id: String
  sessionToken: String
  updatedAt: DateTimeISO
  userId: String
}

input SessionMaxOrderByAggregateInput {
  expiresAt: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  userId: SortOrder
}

type SessionMinAggregate {
  createdAt: DateTimeISO
  expiresAt: DateTimeISO
  id: String
  sessionToken: String
  updatedAt: DateTimeISO
  userId: String
}

input SessionMinOrderByAggregateInput {
  expiresAt: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  userId: SortOrder
}

input SessionOrderByRelationAggregateInput {
  _count: SortOrder
}

enum SessionOrderByRelevanceFieldEnum {
  id
  sessionToken
  userId
}

input SessionOrderByRelevanceInput {
  fields: [SessionOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input SessionOrderByWithAggregationInput {
  _count: SessionCountOrderByAggregateInput
  _max: SessionMaxOrderByAggregateInput
  _min: SessionMinOrderByAggregateInput
  expiresAt: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  userId: SortOrder
}

input SessionOrderByWithRelationInput {
  _relevance: SessionOrderByRelevanceInput
  expiresAt: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum SessionScalarFieldEnum {
  createdAt
  expiresAt
  id
  sessionToken
  updatedAt
  userId
}

input SessionScalarWhereInput {
  AND: [SessionScalarWhereInput!]
  NOT: [SessionScalarWhereInput!]
  OR: [SessionScalarWhereInput!]
  expiresAt: DateTimeFilter
  id: StringFilter
  sessionToken: StringFilter
  userId: StringFilter
}

input SessionScalarWhereWithAggregatesInput {
  AND: [SessionScalarWhereWithAggregatesInput!]
  NOT: [SessionScalarWhereWithAggregatesInput!]
  OR: [SessionScalarWhereWithAggregatesInput!]
  expiresAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  sessionToken: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input SessionUpdateInput {
  expiresAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutSessionsNestedInput
}

input SessionUpdateManyMutationInput {
  expiresAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
}

input SessionUpdateManyWithWhereWithoutUserInput {
  data: SessionUpdateManyMutationInput!
  where: SessionScalarWhereInput!
}

input SessionUpdateManyWithoutUserNestedInput {
  connect: [SessionWhereUniqueInput!]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput!]
  create: [SessionCreateWithoutUserInput!]
  createMany: SessionCreateManyUserInputEnvelope
  delete: [SessionWhereUniqueInput!]
  deleteMany: [SessionScalarWhereInput!]
  disconnect: [SessionWhereUniqueInput!]
  set: [SessionWhereUniqueInput!]
  update: [SessionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [SessionUpdateManyWithWhereWithoutUserInput!]
  upsert: [SessionUpsertWithWhereUniqueWithoutUserInput!]
}

input SessionUpdateWithWhereUniqueWithoutUserInput {
  data: SessionUpdateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionUpdateWithoutUserInput {
  expiresAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
}

input SessionUpsertWithWhereUniqueWithoutUserInput {
  create: SessionCreateWithoutUserInput!
  update: SessionUpdateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  expiresAt: DateTimeFilter
  id: StringFilter
  sessionToken: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input SessionWhereUniqueInput {
  AND: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  expiresAt: DateTimeFilter
  id: String
  sessionToken: String
  user: UserRelationFilter
  userId: StringFilter
}

type SignUpWithEmailCodeResponse {
  code: Int
  error: String
  expires: DateTimeISO
  identifier: String
  success: Boolean!
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  search: String
  startsWith: String
}

type Subscription {
  randomNumber: Int!
  userSignedUp: User!
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"""The `Upload` scalar type represents a file upload."""
scalar Upload

"""Always after the prisma-client-js generator"""
type User {
  _count: UserCount
  accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): [Account!]!
  cookieConsent: Boolean
  cookiePreferences: UserCookiePreferences
  createdAt: DateTimeISO!
  email: EmailAddress!
  emailVerified: DateTimeISO
  first_name: String!
  id: ID!
  image: String
  last_name: String!

  """[UserMetadata]"""
  metadata: JSON
  name: String!
  sessions(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): [Session!]!
  updatedAt: DateTimeISO!
}

type UserCookiePreferences {
  functionality: Boolean!
  marketing: Boolean!
  necessary: Boolean!
  statistics: Boolean!
}

type UserCount {
  accounts(where: AccountWhereInput): Int!
  sessions(where: SessionWhereInput): Int!
}

type UserCountAggregate {
  _all: Int!
  createdAt: Int!
  email: Int!
  emailVerified: Int!
  first_name: Int!
  id: Int!
  image: Int!
  last_name: Int!
  metadata: Int!
  name: Int!
  password: Int!
  updatedAt: Int!
}

input UserCountOrderByAggregateInput {
  email: SortOrder
  emailVerified: SortOrder
  first_name: SortOrder
  id: SortOrder
  image: SortOrder
  last_name: SortOrder
  metadata: SortOrder
  name: SortOrder
}

input UserCreateInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTimeISO
  first_name: String!
  id: String
  image: String
  last_name: String!
  metadata: JSON
  name: String!
  sessions: SessionCreateNestedManyWithoutUserInput
}

input UserCreateManyInput {
  email: String!
  emailVerified: DateTimeISO
  first_name: String!
  id: String
  image: String
  last_name: String!
  metadata: JSON
  name: String!
}

input UserCreateNestedOneWithoutAccountsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserCreateWithoutAccountsInput
}

input UserCreateNestedOneWithoutSessionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSessionsInput
  create: UserCreateWithoutSessionsInput
}

input UserCreateOrConnectWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSessionsInput {
  create: UserCreateWithoutSessionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAccountsInput {
  email: String!
  emailVerified: DateTimeISO
  first_name: String!
  id: String
  image: String
  last_name: String!
  metadata: JSON
  name: String!
  sessions: SessionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutSessionsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  email: String!
  emailVerified: DateTimeISO
  first_name: String!
  id: String
  image: String
  last_name: String!
  metadata: JSON
  name: String!
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  createdAt: DateTimeISO!
  email: String!
  emailVerified: DateTimeISO
  first_name: String!
  id: String!
  image: String
  last_name: String!
  metadata: JSON
  name: String!
  password: String
  updatedAt: DateTimeISO!
}

type UserMaxAggregate {
  createdAt: DateTimeISO
  email: String
  emailVerified: DateTimeISO
  first_name: String
  id: String
  image: String
  last_name: String
  name: String
  password: String
  updatedAt: DateTimeISO
}

input UserMaxOrderByAggregateInput {
  email: SortOrder
  emailVerified: SortOrder
  first_name: SortOrder
  id: SortOrder
  image: SortOrder
  last_name: SortOrder
  name: SortOrder
}

type UserMinAggregate {
  createdAt: DateTimeISO
  email: String
  emailVerified: DateTimeISO
  first_name: String
  id: String
  image: String
  last_name: String
  name: String
  password: String
  updatedAt: DateTimeISO
}

input UserMinOrderByAggregateInput {
  email: SortOrder
  emailVerified: SortOrder
  first_name: SortOrder
  id: SortOrder
  image: SortOrder
  last_name: SortOrder
  name: SortOrder
}

enum UserOrderByRelevanceFieldEnum {
  email
  first_name
  id
  image
  last_name
  name
  password
}

input UserOrderByRelevanceInput {
  fields: [UserOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  email: SortOrder
  emailVerified: SortOrderInput
  first_name: SortOrder
  id: SortOrder
  image: SortOrderInput
  last_name: SortOrder
  metadata: SortOrderInput
  name: SortOrder
}

input UserOrderByWithRelationInput {
  _relevance: UserOrderByRelevanceInput
  accounts: AccountOrderByRelationAggregateInput
  email: SortOrder
  emailVerified: SortOrderInput
  first_name: SortOrder
  id: SortOrder
  image: SortOrderInput
  last_name: SortOrder
  metadata: SortOrderInput
  name: SortOrder
  sessions: SessionOrderByRelationAggregateInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  createdAt
  email
  emailVerified
  first_name
  id
  image
  last_name
  metadata
  name
  password
  updatedAt
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  email: StringWithAggregatesFilter
  emailVerified: DateTimeNullableWithAggregatesFilter
  first_name: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  image: StringNullableWithAggregatesFilter
  last_name: StringWithAggregatesFilter
  metadata: JsonNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
}

type UserSearchResponse {
  _count: UserCount
  accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): [Account!]!
  cookieConsent: Boolean
  cookiePreferences: UserCookiePreferences
  createdAt: DateTimeISO!
  email: EmailAddress!
  emailVerified: DateTimeISO
  first_name: String!
  id: ID!
  image: String
  last_name: String!

  """[UserMetadata]"""
  metadata: JSON
  name: String!
  sessions(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): [Session!]!
  updatedAt: DateTimeISO!
}

input UserSignInInput {
  email: String! = ""
  password: String! = ""
  username: String! = ""
}

input UserSignUpInput {
  email: String! = ""
  password: String! = ""
  username: String! = ""
}

input UserUpdateInput {
  accounts: AccountUpdateManyWithoutUserNestedInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  first_name: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  last_name: StringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  sessions: SessionUpdateManyWithoutUserNestedInput
}

input UserUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  first_name: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  last_name: StringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutAccountsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserCreateWithoutAccountsInput
  update: UserUpdateToOneWithWhereWithoutAccountsInput
  upsert: UserUpsertWithoutAccountsInput
}

input UserUpdateOneRequiredWithoutSessionsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSessionsInput
  create: UserCreateWithoutSessionsInput
  update: UserUpdateToOneWithWhereWithoutSessionsInput
  upsert: UserUpsertWithoutSessionsInput
}

input UserUpdateToOneWithWhereWithoutAccountsInput {
  data: UserUpdateWithoutAccountsInput!
  where: UserWhereInput
}

input UserUpdateToOneWithWhereWithoutSessionsInput {
  data: UserUpdateWithoutSessionsInput!
  where: UserWhereInput
}

input UserUpdateWithoutAccountsInput {
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  first_name: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  last_name: StringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
  sessions: SessionUpdateManyWithoutUserNestedInput
}

input UserUpdateWithoutSessionsInput {
  accounts: AccountUpdateManyWithoutUserNestedInput
  email: StringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  first_name: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  last_name: StringFieldUpdateOperationsInput
  metadata: JSON
  name: StringFieldUpdateOperationsInput
}

input UserUpsertWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput!
  update: UserUpdateWithoutAccountsInput!
  where: UserWhereInput
}

input UserUpsertWithoutSessionsInput {
  create: UserCreateWithoutSessionsInput!
  update: UserUpdateWithoutSessionsInput!
  where: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  accounts: AccountListRelationFilter
  email: StringFilter
  emailVerified: DateTimeNullableFilter
  first_name: StringFilter
  id: StringFilter
  image: StringNullableFilter
  last_name: StringFilter
  metadata: JsonNullableFilter
  name: StringFilter
  sessions: SessionListRelationFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  accounts: AccountListRelationFilter
  email: String
  emailVerified: DateTimeNullableFilter
  first_name: StringFilter
  id: String
  image: StringNullableFilter
  last_name: StringFilter
  metadata: JsonNullableFilter
  name: StringFilter
  sessions: SessionListRelationFilter
}

input UsersSearchInput {
  limit: Int! = 10
  search: String! = ""
}

type VerificationToken {
  expires: DateTimeISO!
  identifier: String!
  token: String!
}

type VerificationTokenCountAggregate {
  _all: Int!
  expires: Int!
  identifier: Int!
  token: Int!
}

input VerificationTokenCountOrderByAggregateInput {
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

input VerificationTokenCreateInput {
  expires: DateTimeISO!
  identifier: String!
  token: String!
}

input VerificationTokenCreateManyInput {
  expires: DateTimeISO!
  identifier: String!
  token: String!
}

type VerificationTokenGroupBy {
  _count: VerificationTokenCountAggregate
  _max: VerificationTokenMaxAggregate
  _min: VerificationTokenMinAggregate
  expires: DateTimeISO!
  identifier: String!
  token: String!
}

input VerificationTokenIdentifierTokenCompoundUniqueInput {
  identifier: String!
  token: String!
}

type VerificationTokenMaxAggregate {
  expires: DateTimeISO
  identifier: String
  token: String
}

input VerificationTokenMaxOrderByAggregateInput {
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

type VerificationTokenMinAggregate {
  expires: DateTimeISO
  identifier: String
  token: String
}

input VerificationTokenMinOrderByAggregateInput {
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

enum VerificationTokenOrderByRelevanceFieldEnum {
  identifier
  token
}

input VerificationTokenOrderByRelevanceInput {
  fields: [VerificationTokenOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input VerificationTokenOrderByWithAggregationInput {
  _count: VerificationTokenCountOrderByAggregateInput
  _max: VerificationTokenMaxOrderByAggregateInput
  _min: VerificationTokenMinOrderByAggregateInput
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

input VerificationTokenOrderByWithRelationInput {
  _relevance: VerificationTokenOrderByRelevanceInput
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

enum VerificationTokenScalarFieldEnum {
  expires
  identifier
  token
}

input VerificationTokenScalarWhereWithAggregatesInput {
  AND: [VerificationTokenScalarWhereWithAggregatesInput!]
  NOT: [VerificationTokenScalarWhereWithAggregatesInput!]
  OR: [VerificationTokenScalarWhereWithAggregatesInput!]
  expires: DateTimeWithAggregatesFilter
  identifier: StringWithAggregatesFilter
  token: StringWithAggregatesFilter
}

input VerificationTokenUpdateInput {
  expires: DateTimeFieldUpdateOperationsInput
  identifier: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input VerificationTokenUpdateManyMutationInput {
  expires: DateTimeFieldUpdateOperationsInput
  identifier: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input VerificationTokenWhereInput {
  AND: [VerificationTokenWhereInput!]
  NOT: [VerificationTokenWhereInput!]
  OR: [VerificationTokenWhereInput!]
  expires: DateTimeFilter
  identifier: StringFilter
  token: StringFilter
}

input VerificationTokenWhereUniqueInput {
  AND: [VerificationTokenWhereInput!]
  NOT: [VerificationTokenWhereInput!]
  OR: [VerificationTokenWhereInput!]
  expires: DateTimeFilter
  identifier: StringFilter
  identifier_token: VerificationTokenIdentifierTokenCompoundUniqueInput
  token: StringFilter
}

type VerifyEmailResponse {
  error: String
  success: Boolean!
}

enum WorkFromHome {
  FullyRemote
  Hybrid
}