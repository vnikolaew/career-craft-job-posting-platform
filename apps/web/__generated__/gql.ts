/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n    query GetTopJobCategories($input: GetTopListingCategoriesInput!) {\n        getTopListingCategories(input: $input) {\n            id\n            name\n            description\n            _count {\n                listings\n            }\n        }\n    }\n": types.GetTopJobCategoriesDocument,
    "\n    query GetTopEmployers($input: GetTopCompaniesInput!) {\n        getTopCompanies(input: $input) {\n            id\n            name\n            banner_image_url\n            brand_image_url\n            listingsCount\n            _count {\n                listings\n            }\n        }\n    }\n": types.GetTopEmployersDocument,
    "\n    query TotalJobListingsCountQuery {\n        jobListings {\n            id\n            name\n            createdAt\n        }\n        me {\n            id\n            name\n            first_name\n            last_name\n            email\n            image\n            metadata\n            cookieConsent\n            cookiePreferences {\n                functionality\n                marketing\n                necessary\n                statistics\n            }\n            saved_listings {\n                id\n                listing_id\n                metadata\n                createdAt\n            }\n        }\n    }\n": types.TotalJobListingsCountQueryDocument,
    "\n    query GetJobListings($ids: [String!]) {\n        jobListings(where: {id: {in: $ids}}) {\n            id\n            name\n            categories {\n                category_id\n            }\n            description_raw\n            createdAt\n            external_application_url\n            keywords\n            languages\n            location\n            level\n            parameters\n            type\n            work_from\n            company_id\n            company {\n                id\n                name\n                about_raw\n                email\n                brand_image_url\n            }\n\n        }\n    }\n": types.GetJobListingsDocument,
    "\n    query GetAllUsersWithSubscriptions {\n        getAllUsersWithSubscriptions {\n            id\n            name\n            email\n        }\n    }\n\n": types.GetAllUsersWithSubscriptionsDocument,
    "\n    query GetSubscriptionsJobListingsForUser($userId: String!) {\n        getSubscriptionsJobListingsForUser(userId: $userId){\n            entries {\n                listingIds\n                subscriptionId\n            }\n        }\n    }\n": types.GetSubscriptionsJobListingsForUserDocument,
    "\n    mutation UnSaveJobListing($jobListingId: String!) {\n        unSaveJobListing(listingId: $jobListingId)\n    }\n": types.UnSaveJobListingDocument,
    "\n    mutation SaveJobListing($jobListingId: String!) {\n        saveJobListing(listingId: $jobListingId) {\n            id\n            listing_id\n            userId\n            metadata\n            createdAt\n        }\n    }\n": types.SaveJobListingDocument,
    "\n    query GetCompanyListingsCountQuery($id: String!) {\n        getJobListing(where: { id: $id}) {\n            id\n            name\n            company {\n                _count {\n                    listings\n                }\n            }\n        }\n    }\n": types.GetCompanyListingsCountQueryDocument,
    "\n    query GetCompanyWithListingsQuery($id: String!) {\n        getCompany(where: {id: $id}) {\n            id\n            name\n            brand_image_url\n            banner_image_url\n            listings {\n                id\n                name\n                location\n                languages\n                createdAt\n                description_raw\n                keywords\n                level\n                parameters\n                type\n                work_from\n                parametersTyped {\n                    salary {\n                        currency\n                        __typename\n                        ... on RangeJobListingSalary {\n                            min\n                            max\n                        }\n                        ... on FixedJobListingSalary {\n                            value\n                        }\n                    }\n                    remoteInterview\n                    internship\n                    furlough\n                    from\n                }\n                isSaved @client\n            }\n        }\n    }\n": types.GetCompanyWithListingsQueryDocument,
    "\n    query GetAllCompanies {\n        companies {\n            id\n            name\n        }\n    }\n": types.GetAllCompaniesDocument,
    "\n    query GetCompanyQuery($id: String!) {\n        getCompany(where: {id: $id}) {\n            id\n            name\n            about_raw\n            career_description_raw\n            benefits\n            company_values\n            work_environment\n            hiring_process\n            createdAt\n            updatedAt\n            metadata\n            email\n            brand_image_url\n            banner_image_url\n            companyCategories {\n                id\n                name\n                description\n            }\n            listings {\n                id\n                name\n                location\n                languages\n                createdAt\n                description_raw\n                keywords\n                level\n                parameters\n                type\n                work_from\n            }\n            contacts {\n                name\n                contacts {\n                    city\n                    coordinates {\n                        latitude\n                        longitude\n                    }\n                    address\n                    phone_number\n                }\n                company_bulstat\n                email\n                phone_number\n                address\n                website_url\n                facebook_url\n                twitter_url\n                linkedin_url\n                youtube_url\n            }\n            local_info {\n                since\n                employeeCount\n                locations\n            }\n            worldwide_info {\n                founded\n                employeeCount\n                headquarters\n                locations\n            }\n        }\n    }\n": types.GetCompanyQueryDocument,
    "\n    mutation FileUpload($file: Upload!) {\n        fileUpload(file: $file)\n    }\n": types.FileUploadDocument,
    "\n    query GetJobListing($id: String!) {\n        getJobListing(where: { id: $id }) {\n            id\n            name\n            description_raw\n            external_application_url\n            level\n            work_from\n            type\n            location\n            languages\n            parameters\n            keywords\n            company_id\n            createdAt\n            updatedAt\n            company {\n                id\n                email\n                name\n                brand_image_url\n                banner_image_url\n                companyCategories {\n                    id\n                    name\n                    description\n                }\n                worldwide_info {\n                    employeeCount\n                    headquarters\n                    locations\n                    founded\n                }\n                _count {\n                    listings\n                }\n            }\n        }\n    }\n": types.GetJobListingDocument,
    "\n    query GetCompanyJob($id: String!) {\n        getJobListing(where: { id: $id }) {\n            id\n            name\n            description_raw\n            external_application_url\n            level\n            work_from\n            type\n            location\n            languages\n            parameters\n            keywords\n            company_id\n            createdAt\n            updatedAt\n            company {\n                id\n                name\n                _count {\n                    listings\n                }\n            }\n        }\n    }\n": types.GetCompanyJobDocument,
    "\n    query GetAllCategoriesQuery($input: GetCategoriesDetailsInput!) {\n        getCompanyCategoriesDetails(input: $input) {\n            id\n            name\n            description\n            totalJobListings\n        }\n    }\n": types.GetAllCategoriesQueryDocument,
    "\n    query GetAllCompaniesQuery {\n        companies(orderBy: {listings: {_count: desc}}) {\n            id\n            name\n            email\n            brand_image_url\n            _count {\n                listings\n            }\n        }\n    }\n": types.GetAllCompaniesQueryDocument,
    "\n    query GetAllEmploymentTypesQuery {\n        getAllEmploymentTypes {\n            name\n            totalJobsCount\n        }\n    }\n": types.GetAllEmploymentTypesQueryDocument,
    "\n    query GetAllLevelsQuery {\n        getJobListingLevelsDetails {\n            name\n            totalJobsCount\n        }\n    }\n": types.GetAllLevelsQueryDocument,
    "\n    query GetAllKeywordsQuery {\n        getAllKeywords {\n            name\n            totalJobsCount\n        }\n    }\n": types.GetAllKeywordsQueryDocument,
    "\n    query GetAllLanguagesQuery {\n        getAllLanguages {\n            name\n            totalJobsCount\n        }\n    }\n": types.GetAllLanguagesQueryDocument,
    "\n    query GetAllLocationsQuery {\n        getAllLocations {\n            name\n            totalJobsCount\n        }\n    }\n": types.GetAllLocationsQueryDocument,
    "\n    query GetAllJobCategoriesQuery {\n        jobListingCategories {\n            id\n            name\n            description\n            _count {\n                listings\n            }\n        }\n    }\n": types.GetAllJobCategoriesQueryDocument,
    "\n    query GetJobListingsWithFilter($filter: SearchJobListingsInput!, $categories: [String!]) {\n        getMostRelevantCompanies(input: {categories: $categories, limit: 10, skip: 0}) {\n            id\n            name\n            _count {\n                listings\n                categories\n            }\n            companyCategories {\n                id\n                name\n            }\n            email\n            contacts {\n                name\n                company_bulstat\n                contacts {\n                    city\n                    address\n                    phone_number\n                }\n                email\n                phone_number\n                address\n                website_url\n                facebook_url\n                twitter_url\n                linkedin_url\n                youtube_url\n            }\n        }\n\n        companies {\n            id\n            name\n        }\n\n        searchJobListings(input: $filter) {\n            id\n            name\n            company_id\n            createdAt\n            type\n            work_from\n            parameters\n            parametersTyped {\n                from\n                furlough\n                internship\n                remoteInterview\n                salary {\n                    currency\n                    __typename\n                    ... on FixedJobListingSalary {\n                        value\n                    }\n                    ... on RangeJobListingSalary {\n                        min\n                        max\n                    }\n                }\n            }\n            keywords\n            level\n            isSaved\n            languages\n            location\n            description_raw\n            external_application_url\n            categories {\n                category_id\n            }\n            company {\n                id\n                _count {\n                    listings\n                }\n                companyCategories {\n                    id\n                    name\n                }\n                name\n                email\n                brand_image_url\n                local_info {\n                    employeeCount\n                    locations\n                    since\n                }\n                worldwide_info {\n                    locations\n                    employeeCount\n                    founded\n                    headquarters\n                }\n            }\n        }\n\n    }\n\n": types.GetJobListingsWithFilterDocument,
    "\n    mutation SignInWithEmailCode($code: Int!, $email: EmailAddress!, $identifier: String!) {\n        signInWithEmailCode(code: $code, email: $email, identifier: $identifier) {\n            id\n            first_name\n            last_name\n            name\n            metadata\n            image\n            email\n        }\n    }\n": types.SignInWithEmailCodeDocument,
    "\n    mutation GenerateEmailCode($email: EmailAddress!) {\n        generateSignUpEmailCode(email: $email) {\n            code\n            error\n            identifier\n            expires\n            success\n        }\n    }\n": types.GenerateEmailCodeDocument,
    "\n    mutation SignUpWithEmailCode($code: Int!, $email: EmailAddress!, $firstName: String!, $lastName: String!, $identifier: String!) {\n        signUpWithEmailCode(code: $code, email: $email, firstName: $firstName, lastName: $lastName, identifier: $identifier) {\n            id\n            first_name\n            last_name\n            name\n            metadata\n            image\n            email\n        }\n    }\n": types.SignUpWithEmailCodeDocument,
    "\n    query MeQueryGSById {\n        me {\n            id\n            name\n        }\n    }\n": types.MeQueryGsByIdDocument,
    "\n    query GetSubscriptionByIdQuery($subscriptionId: String!, $meId: String!) {\n        jobListingSubscription(where: { id: $subscriptionId, user_id: {equals: $meId} }) {\n            id\n            company_id\n            user_id\n            user_email\n            user {\n                id\n                name\n                email\n            }\n            categories {\n                id\n                name\n            }\n            job_categories {\n                id\n                name\n            }\n            metadata\n            notification_frequency\n            description\n            location\n            level\n            work_from\n            type\n            languages\n            parameters\n            keywords\n            createdAt\n            updatedAt\n            company {\n                id\n                name\n            }\n        }}\n": types.GetSubscriptionByIdQueryDocument,
    "\n    mutation DeleteAllSubscriptions {\n        deleteAllSubscriptions {\n            deleted_count\n            success\n        }\n    }\n": types.DeleteAllSubscriptionsDocument,
    "\n    query GetMySubscriptions($input: GetSubscriptionsInput!) {\n        mySubscriptions(input: $input) {\n            id\n            company_id\n            user_id\n            metadata\n            notification_frequency\n            location\n            level\n            work_from\n            type\n            languages\n            parameters\n            keywords\n            createdAt\n            updatedAt\n            description\n            company {\n                id\n                name\n                email\n            }\n            categories {\n                id\n                name\n                description\n            }\n            \n        }\n    }\n": types.GetMySubscriptionsDocument,
    "\n    query MeQuerySlim {\n        me {\n            id\n            name\n            email\n        }\n    }\n": types.MeQuerySlimDocument,
    "\n    query GetSubscriptionById($subscriptionId: String!) {\n        jobListingSubscription(where: { id: $subscriptionId}) {\n            id\n            user_id\n            company_id\n            company {\n                id\n                name\n            }\n            createdAt\n            metadata\n        }\n    }\n": types.GetSubscriptionByIdDocument,
    "\n    mutation ConfirmSubscription($key: String!, $subscriptionId: String!) {\n        confirmJobListingSubscription(subscriptionKey: $key, subscriptionId: $subscriptionId) {\n            id\n            user_id\n            createdAt\n            metadata\n        }\n    }\n": types.ConfirmSubscriptionDocument,
    "\n    mutation SignOut {\n        signOut\n    }\n": types.SignOutDocument,
    "\n    mutation SignIn($signInModel: UserSignInInput!) {\n        signIn(signInModel: $signInModel) {\n            id\n            name\n            first_name\n            last_name\n            email\n            image\n            metadata\n            cookieConsent\n            cookiePreferences {\n                functionality\n                marketing\n                necessary\n                statistics\n            }\n            createdAt\n        }\n    }\n": types.SignInDocument,
    "\n    query MeQuery {\n        me {\n            id\n            name\n            first_name\n            last_name\n            email\n            image\n            metadata\n            cookieConsent\n            cookiePreferences {\n                functionality\n                marketing\n                necessary\n                statistics\n            }\n            saved_listings {\n                id\n                listing_id\n                metadata\n                createdAt\n            }\n        }\n    }\n": types.MeQueryDocument,
    "\n    query GoogleLoginQuery($redirectUrl: String!) {\n        googleLoginUrl(redirect_url: $redirectUrl)\n    }\n": types.GoogleLoginQueryDocument,
    "\n    mutation SubscribeToCompanyListings($input: SubscribeToJobListingsInput!) {\n        subscribeToCompanyListings(input: $input) {\n            id\n            user_id\n            metadata\n            createdAt\n            updatedAt\n            work_from\n            level\n            type\n            location\n            languages\n            parameters\n            keywords\n            description\n            categories {\n                id\n                name\n                description\n            }\n            job_categories {\n                id\n                name\n            }\n        }\n    }\n": types.SubscribeToCompanyListingsDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetTopJobCategories($input: GetTopListingCategoriesInput!) {\n        getTopListingCategories(input: $input) {\n            id\n            name\n            description\n            _count {\n                listings\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetTopJobCategories($input: GetTopListingCategoriesInput!) {\n        getTopListingCategories(input: $input) {\n            id\n            name\n            description\n            _count {\n                listings\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetTopEmployers($input: GetTopCompaniesInput!) {\n        getTopCompanies(input: $input) {\n            id\n            name\n            banner_image_url\n            brand_image_url\n            listingsCount\n            _count {\n                listings\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetTopEmployers($input: GetTopCompaniesInput!) {\n        getTopCompanies(input: $input) {\n            id\n            name\n            banner_image_url\n            brand_image_url\n            listingsCount\n            _count {\n                listings\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query TotalJobListingsCountQuery {\n        jobListings {\n            id\n            name\n            createdAt\n        }\n        me {\n            id\n            name\n            first_name\n            last_name\n            email\n            image\n            metadata\n            cookieConsent\n            cookiePreferences {\n                functionality\n                marketing\n                necessary\n                statistics\n            }\n            saved_listings {\n                id\n                listing_id\n                metadata\n                createdAt\n            }\n        }\n    }\n"): (typeof documents)["\n    query TotalJobListingsCountQuery {\n        jobListings {\n            id\n            name\n            createdAt\n        }\n        me {\n            id\n            name\n            first_name\n            last_name\n            email\n            image\n            metadata\n            cookieConsent\n            cookiePreferences {\n                functionality\n                marketing\n                necessary\n                statistics\n            }\n            saved_listings {\n                id\n                listing_id\n                metadata\n                createdAt\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetJobListings($ids: [String!]) {\n        jobListings(where: {id: {in: $ids}}) {\n            id\n            name\n            categories {\n                category_id\n            }\n            description_raw\n            createdAt\n            external_application_url\n            keywords\n            languages\n            location\n            level\n            parameters\n            type\n            work_from\n            company_id\n            company {\n                id\n                name\n                about_raw\n                email\n                brand_image_url\n            }\n\n        }\n    }\n"): (typeof documents)["\n    query GetJobListings($ids: [String!]) {\n        jobListings(where: {id: {in: $ids}}) {\n            id\n            name\n            categories {\n                category_id\n            }\n            description_raw\n            createdAt\n            external_application_url\n            keywords\n            languages\n            location\n            level\n            parameters\n            type\n            work_from\n            company_id\n            company {\n                id\n                name\n                about_raw\n                email\n                brand_image_url\n            }\n\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetAllUsersWithSubscriptions {\n        getAllUsersWithSubscriptions {\n            id\n            name\n            email\n        }\n    }\n\n"): (typeof documents)["\n    query GetAllUsersWithSubscriptions {\n        getAllUsersWithSubscriptions {\n            id\n            name\n            email\n        }\n    }\n\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetSubscriptionsJobListingsForUser($userId: String!) {\n        getSubscriptionsJobListingsForUser(userId: $userId){\n            entries {\n                listingIds\n                subscriptionId\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetSubscriptionsJobListingsForUser($userId: String!) {\n        getSubscriptionsJobListingsForUser(userId: $userId){\n            entries {\n                listingIds\n                subscriptionId\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation UnSaveJobListing($jobListingId: String!) {\n        unSaveJobListing(listingId: $jobListingId)\n    }\n"): (typeof documents)["\n    mutation UnSaveJobListing($jobListingId: String!) {\n        unSaveJobListing(listingId: $jobListingId)\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation SaveJobListing($jobListingId: String!) {\n        saveJobListing(listingId: $jobListingId) {\n            id\n            listing_id\n            userId\n            metadata\n            createdAt\n        }\n    }\n"): (typeof documents)["\n    mutation SaveJobListing($jobListingId: String!) {\n        saveJobListing(listingId: $jobListingId) {\n            id\n            listing_id\n            userId\n            metadata\n            createdAt\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetCompanyListingsCountQuery($id: String!) {\n        getJobListing(where: { id: $id}) {\n            id\n            name\n            company {\n                _count {\n                    listings\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetCompanyListingsCountQuery($id: String!) {\n        getJobListing(where: { id: $id}) {\n            id\n            name\n            company {\n                _count {\n                    listings\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetCompanyWithListingsQuery($id: String!) {\n        getCompany(where: {id: $id}) {\n            id\n            name\n            brand_image_url\n            banner_image_url\n            listings {\n                id\n                name\n                location\n                languages\n                createdAt\n                description_raw\n                keywords\n                level\n                parameters\n                type\n                work_from\n                parametersTyped {\n                    salary {\n                        currency\n                        __typename\n                        ... on RangeJobListingSalary {\n                            min\n                            max\n                        }\n                        ... on FixedJobListingSalary {\n                            value\n                        }\n                    }\n                    remoteInterview\n                    internship\n                    furlough\n                    from\n                }\n                isSaved @client\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetCompanyWithListingsQuery($id: String!) {\n        getCompany(where: {id: $id}) {\n            id\n            name\n            brand_image_url\n            banner_image_url\n            listings {\n                id\n                name\n                location\n                languages\n                createdAt\n                description_raw\n                keywords\n                level\n                parameters\n                type\n                work_from\n                parametersTyped {\n                    salary {\n                        currency\n                        __typename\n                        ... on RangeJobListingSalary {\n                            min\n                            max\n                        }\n                        ... on FixedJobListingSalary {\n                            value\n                        }\n                    }\n                    remoteInterview\n                    internship\n                    furlough\n                    from\n                }\n                isSaved @client\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetAllCompanies {\n        companies {\n            id\n            name\n        }\n    }\n"): (typeof documents)["\n    query GetAllCompanies {\n        companies {\n            id\n            name\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetCompanyQuery($id: String!) {\n        getCompany(where: {id: $id}) {\n            id\n            name\n            about_raw\n            career_description_raw\n            benefits\n            company_values\n            work_environment\n            hiring_process\n            createdAt\n            updatedAt\n            metadata\n            email\n            brand_image_url\n            banner_image_url\n            companyCategories {\n                id\n                name\n                description\n            }\n            listings {\n                id\n                name\n                location\n                languages\n                createdAt\n                description_raw\n                keywords\n                level\n                parameters\n                type\n                work_from\n            }\n            contacts {\n                name\n                contacts {\n                    city\n                    coordinates {\n                        latitude\n                        longitude\n                    }\n                    address\n                    phone_number\n                }\n                company_bulstat\n                email\n                phone_number\n                address\n                website_url\n                facebook_url\n                twitter_url\n                linkedin_url\n                youtube_url\n            }\n            local_info {\n                since\n                employeeCount\n                locations\n            }\n            worldwide_info {\n                founded\n                employeeCount\n                headquarters\n                locations\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetCompanyQuery($id: String!) {\n        getCompany(where: {id: $id}) {\n            id\n            name\n            about_raw\n            career_description_raw\n            benefits\n            company_values\n            work_environment\n            hiring_process\n            createdAt\n            updatedAt\n            metadata\n            email\n            brand_image_url\n            banner_image_url\n            companyCategories {\n                id\n                name\n                description\n            }\n            listings {\n                id\n                name\n                location\n                languages\n                createdAt\n                description_raw\n                keywords\n                level\n                parameters\n                type\n                work_from\n            }\n            contacts {\n                name\n                contacts {\n                    city\n                    coordinates {\n                        latitude\n                        longitude\n                    }\n                    address\n                    phone_number\n                }\n                company_bulstat\n                email\n                phone_number\n                address\n                website_url\n                facebook_url\n                twitter_url\n                linkedin_url\n                youtube_url\n            }\n            local_info {\n                since\n                employeeCount\n                locations\n            }\n            worldwide_info {\n                founded\n                employeeCount\n                headquarters\n                locations\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation FileUpload($file: Upload!) {\n        fileUpload(file: $file)\n    }\n"): (typeof documents)["\n    mutation FileUpload($file: Upload!) {\n        fileUpload(file: $file)\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetJobListing($id: String!) {\n        getJobListing(where: { id: $id }) {\n            id\n            name\n            description_raw\n            external_application_url\n            level\n            work_from\n            type\n            location\n            languages\n            parameters\n            keywords\n            company_id\n            createdAt\n            updatedAt\n            company {\n                id\n                email\n                name\n                brand_image_url\n                banner_image_url\n                companyCategories {\n                    id\n                    name\n                    description\n                }\n                worldwide_info {\n                    employeeCount\n                    headquarters\n                    locations\n                    founded\n                }\n                _count {\n                    listings\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetJobListing($id: String!) {\n        getJobListing(where: { id: $id }) {\n            id\n            name\n            description_raw\n            external_application_url\n            level\n            work_from\n            type\n            location\n            languages\n            parameters\n            keywords\n            company_id\n            createdAt\n            updatedAt\n            company {\n                id\n                email\n                name\n                brand_image_url\n                banner_image_url\n                companyCategories {\n                    id\n                    name\n                    description\n                }\n                worldwide_info {\n                    employeeCount\n                    headquarters\n                    locations\n                    founded\n                }\n                _count {\n                    listings\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetCompanyJob($id: String!) {\n        getJobListing(where: { id: $id }) {\n            id\n            name\n            description_raw\n            external_application_url\n            level\n            work_from\n            type\n            location\n            languages\n            parameters\n            keywords\n            company_id\n            createdAt\n            updatedAt\n            company {\n                id\n                name\n                _count {\n                    listings\n                }\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetCompanyJob($id: String!) {\n        getJobListing(where: { id: $id }) {\n            id\n            name\n            description_raw\n            external_application_url\n            level\n            work_from\n            type\n            location\n            languages\n            parameters\n            keywords\n            company_id\n            createdAt\n            updatedAt\n            company {\n                id\n                name\n                _count {\n                    listings\n                }\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetAllCategoriesQuery($input: GetCategoriesDetailsInput!) {\n        getCompanyCategoriesDetails(input: $input) {\n            id\n            name\n            description\n            totalJobListings\n        }\n    }\n"): (typeof documents)["\n    query GetAllCategoriesQuery($input: GetCategoriesDetailsInput!) {\n        getCompanyCategoriesDetails(input: $input) {\n            id\n            name\n            description\n            totalJobListings\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetAllCompaniesQuery {\n        companies(orderBy: {listings: {_count: desc}}) {\n            id\n            name\n            email\n            brand_image_url\n            _count {\n                listings\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetAllCompaniesQuery {\n        companies(orderBy: {listings: {_count: desc}}) {\n            id\n            name\n            email\n            brand_image_url\n            _count {\n                listings\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetAllEmploymentTypesQuery {\n        getAllEmploymentTypes {\n            name\n            totalJobsCount\n        }\n    }\n"): (typeof documents)["\n    query GetAllEmploymentTypesQuery {\n        getAllEmploymentTypes {\n            name\n            totalJobsCount\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetAllLevelsQuery {\n        getJobListingLevelsDetails {\n            name\n            totalJobsCount\n        }\n    }\n"): (typeof documents)["\n    query GetAllLevelsQuery {\n        getJobListingLevelsDetails {\n            name\n            totalJobsCount\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetAllKeywordsQuery {\n        getAllKeywords {\n            name\n            totalJobsCount\n        }\n    }\n"): (typeof documents)["\n    query GetAllKeywordsQuery {\n        getAllKeywords {\n            name\n            totalJobsCount\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetAllLanguagesQuery {\n        getAllLanguages {\n            name\n            totalJobsCount\n        }\n    }\n"): (typeof documents)["\n    query GetAllLanguagesQuery {\n        getAllLanguages {\n            name\n            totalJobsCount\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetAllLocationsQuery {\n        getAllLocations {\n            name\n            totalJobsCount\n        }\n    }\n"): (typeof documents)["\n    query GetAllLocationsQuery {\n        getAllLocations {\n            name\n            totalJobsCount\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetAllJobCategoriesQuery {\n        jobListingCategories {\n            id\n            name\n            description\n            _count {\n                listings\n            }\n        }\n    }\n"): (typeof documents)["\n    query GetAllJobCategoriesQuery {\n        jobListingCategories {\n            id\n            name\n            description\n            _count {\n                listings\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetJobListingsWithFilter($filter: SearchJobListingsInput!, $categories: [String!]) {\n        getMostRelevantCompanies(input: {categories: $categories, limit: 10, skip: 0}) {\n            id\n            name\n            _count {\n                listings\n                categories\n            }\n            companyCategories {\n                id\n                name\n            }\n            email\n            contacts {\n                name\n                company_bulstat\n                contacts {\n                    city\n                    address\n                    phone_number\n                }\n                email\n                phone_number\n                address\n                website_url\n                facebook_url\n                twitter_url\n                linkedin_url\n                youtube_url\n            }\n        }\n\n        companies {\n            id\n            name\n        }\n\n        searchJobListings(input: $filter) {\n            id\n            name\n            company_id\n            createdAt\n            type\n            work_from\n            parameters\n            parametersTyped {\n                from\n                furlough\n                internship\n                remoteInterview\n                salary {\n                    currency\n                    __typename\n                    ... on FixedJobListingSalary {\n                        value\n                    }\n                    ... on RangeJobListingSalary {\n                        min\n                        max\n                    }\n                }\n            }\n            keywords\n            level\n            isSaved\n            languages\n            location\n            description_raw\n            external_application_url\n            categories {\n                category_id\n            }\n            company {\n                id\n                _count {\n                    listings\n                }\n                companyCategories {\n                    id\n                    name\n                }\n                name\n                email\n                brand_image_url\n                local_info {\n                    employeeCount\n                    locations\n                    since\n                }\n                worldwide_info {\n                    locations\n                    employeeCount\n                    founded\n                    headquarters\n                }\n            }\n        }\n\n    }\n\n"): (typeof documents)["\n    query GetJobListingsWithFilter($filter: SearchJobListingsInput!, $categories: [String!]) {\n        getMostRelevantCompanies(input: {categories: $categories, limit: 10, skip: 0}) {\n            id\n            name\n            _count {\n                listings\n                categories\n            }\n            companyCategories {\n                id\n                name\n            }\n            email\n            contacts {\n                name\n                company_bulstat\n                contacts {\n                    city\n                    address\n                    phone_number\n                }\n                email\n                phone_number\n                address\n                website_url\n                facebook_url\n                twitter_url\n                linkedin_url\n                youtube_url\n            }\n        }\n\n        companies {\n            id\n            name\n        }\n\n        searchJobListings(input: $filter) {\n            id\n            name\n            company_id\n            createdAt\n            type\n            work_from\n            parameters\n            parametersTyped {\n                from\n                furlough\n                internship\n                remoteInterview\n                salary {\n                    currency\n                    __typename\n                    ... on FixedJobListingSalary {\n                        value\n                    }\n                    ... on RangeJobListingSalary {\n                        min\n                        max\n                    }\n                }\n            }\n            keywords\n            level\n            isSaved\n            languages\n            location\n            description_raw\n            external_application_url\n            categories {\n                category_id\n            }\n            company {\n                id\n                _count {\n                    listings\n                }\n                companyCategories {\n                    id\n                    name\n                }\n                name\n                email\n                brand_image_url\n                local_info {\n                    employeeCount\n                    locations\n                    since\n                }\n                worldwide_info {\n                    locations\n                    employeeCount\n                    founded\n                    headquarters\n                }\n            }\n        }\n\n    }\n\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation SignInWithEmailCode($code: Int!, $email: EmailAddress!, $identifier: String!) {\n        signInWithEmailCode(code: $code, email: $email, identifier: $identifier) {\n            id\n            first_name\n            last_name\n            name\n            metadata\n            image\n            email\n        }\n    }\n"): (typeof documents)["\n    mutation SignInWithEmailCode($code: Int!, $email: EmailAddress!, $identifier: String!) {\n        signInWithEmailCode(code: $code, email: $email, identifier: $identifier) {\n            id\n            first_name\n            last_name\n            name\n            metadata\n            image\n            email\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation GenerateEmailCode($email: EmailAddress!) {\n        generateSignUpEmailCode(email: $email) {\n            code\n            error\n            identifier\n            expires\n            success\n        }\n    }\n"): (typeof documents)["\n    mutation GenerateEmailCode($email: EmailAddress!) {\n        generateSignUpEmailCode(email: $email) {\n            code\n            error\n            identifier\n            expires\n            success\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation SignUpWithEmailCode($code: Int!, $email: EmailAddress!, $firstName: String!, $lastName: String!, $identifier: String!) {\n        signUpWithEmailCode(code: $code, email: $email, firstName: $firstName, lastName: $lastName, identifier: $identifier) {\n            id\n            first_name\n            last_name\n            name\n            metadata\n            image\n            email\n        }\n    }\n"): (typeof documents)["\n    mutation SignUpWithEmailCode($code: Int!, $email: EmailAddress!, $firstName: String!, $lastName: String!, $identifier: String!) {\n        signUpWithEmailCode(code: $code, email: $email, firstName: $firstName, lastName: $lastName, identifier: $identifier) {\n            id\n            first_name\n            last_name\n            name\n            metadata\n            image\n            email\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query MeQueryGSById {\n        me {\n            id\n            name\n        }\n    }\n"): (typeof documents)["\n    query MeQueryGSById {\n        me {\n            id\n            name\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetSubscriptionByIdQuery($subscriptionId: String!, $meId: String!) {\n        jobListingSubscription(where: { id: $subscriptionId, user_id: {equals: $meId} }) {\n            id\n            company_id\n            user_id\n            user_email\n            user {\n                id\n                name\n                email\n            }\n            categories {\n                id\n                name\n            }\n            job_categories {\n                id\n                name\n            }\n            metadata\n            notification_frequency\n            description\n            location\n            level\n            work_from\n            type\n            languages\n            parameters\n            keywords\n            createdAt\n            updatedAt\n            company {\n                id\n                name\n            }\n        }}\n"): (typeof documents)["\n    query GetSubscriptionByIdQuery($subscriptionId: String!, $meId: String!) {\n        jobListingSubscription(where: { id: $subscriptionId, user_id: {equals: $meId} }) {\n            id\n            company_id\n            user_id\n            user_email\n            user {\n                id\n                name\n                email\n            }\n            categories {\n                id\n                name\n            }\n            job_categories {\n                id\n                name\n            }\n            metadata\n            notification_frequency\n            description\n            location\n            level\n            work_from\n            type\n            languages\n            parameters\n            keywords\n            createdAt\n            updatedAt\n            company {\n                id\n                name\n            }\n        }}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation DeleteAllSubscriptions {\n        deleteAllSubscriptions {\n            deleted_count\n            success\n        }\n    }\n"): (typeof documents)["\n    mutation DeleteAllSubscriptions {\n        deleteAllSubscriptions {\n            deleted_count\n            success\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetMySubscriptions($input: GetSubscriptionsInput!) {\n        mySubscriptions(input: $input) {\n            id\n            company_id\n            user_id\n            metadata\n            notification_frequency\n            location\n            level\n            work_from\n            type\n            languages\n            parameters\n            keywords\n            createdAt\n            updatedAt\n            description\n            company {\n                id\n                name\n                email\n            }\n            categories {\n                id\n                name\n                description\n            }\n            \n        }\n    }\n"): (typeof documents)["\n    query GetMySubscriptions($input: GetSubscriptionsInput!) {\n        mySubscriptions(input: $input) {\n            id\n            company_id\n            user_id\n            metadata\n            notification_frequency\n            location\n            level\n            work_from\n            type\n            languages\n            parameters\n            keywords\n            createdAt\n            updatedAt\n            description\n            company {\n                id\n                name\n                email\n            }\n            categories {\n                id\n                name\n                description\n            }\n            \n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query MeQuerySlim {\n        me {\n            id\n            name\n            email\n        }\n    }\n"): (typeof documents)["\n    query MeQuerySlim {\n        me {\n            id\n            name\n            email\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GetSubscriptionById($subscriptionId: String!) {\n        jobListingSubscription(where: { id: $subscriptionId}) {\n            id\n            user_id\n            company_id\n            company {\n                id\n                name\n            }\n            createdAt\n            metadata\n        }\n    }\n"): (typeof documents)["\n    query GetSubscriptionById($subscriptionId: String!) {\n        jobListingSubscription(where: { id: $subscriptionId}) {\n            id\n            user_id\n            company_id\n            company {\n                id\n                name\n            }\n            createdAt\n            metadata\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation ConfirmSubscription($key: String!, $subscriptionId: String!) {\n        confirmJobListingSubscription(subscriptionKey: $key, subscriptionId: $subscriptionId) {\n            id\n            user_id\n            createdAt\n            metadata\n        }\n    }\n"): (typeof documents)["\n    mutation ConfirmSubscription($key: String!, $subscriptionId: String!) {\n        confirmJobListingSubscription(subscriptionKey: $key, subscriptionId: $subscriptionId) {\n            id\n            user_id\n            createdAt\n            metadata\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation SignOut {\n        signOut\n    }\n"): (typeof documents)["\n    mutation SignOut {\n        signOut\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation SignIn($signInModel: UserSignInInput!) {\n        signIn(signInModel: $signInModel) {\n            id\n            name\n            first_name\n            last_name\n            email\n            image\n            metadata\n            cookieConsent\n            cookiePreferences {\n                functionality\n                marketing\n                necessary\n                statistics\n            }\n            createdAt\n        }\n    }\n"): (typeof documents)["\n    mutation SignIn($signInModel: UserSignInInput!) {\n        signIn(signInModel: $signInModel) {\n            id\n            name\n            first_name\n            last_name\n            email\n            image\n            metadata\n            cookieConsent\n            cookiePreferences {\n                functionality\n                marketing\n                necessary\n                statistics\n            }\n            createdAt\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query MeQuery {\n        me {\n            id\n            name\n            first_name\n            last_name\n            email\n            image\n            metadata\n            cookieConsent\n            cookiePreferences {\n                functionality\n                marketing\n                necessary\n                statistics\n            }\n            saved_listings {\n                id\n                listing_id\n                metadata\n                createdAt\n            }\n        }\n    }\n"): (typeof documents)["\n    query MeQuery {\n        me {\n            id\n            name\n            first_name\n            last_name\n            email\n            image\n            metadata\n            cookieConsent\n            cookiePreferences {\n                functionality\n                marketing\n                necessary\n                statistics\n            }\n            saved_listings {\n                id\n                listing_id\n                metadata\n                createdAt\n            }\n        }\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query GoogleLoginQuery($redirectUrl: String!) {\n        googleLoginUrl(redirect_url: $redirectUrl)\n    }\n"): (typeof documents)["\n    query GoogleLoginQuery($redirectUrl: String!) {\n        googleLoginUrl(redirect_url: $redirectUrl)\n    }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    mutation SubscribeToCompanyListings($input: SubscribeToJobListingsInput!) {\n        subscribeToCompanyListings(input: $input) {\n            id\n            user_id\n            metadata\n            createdAt\n            updatedAt\n            work_from\n            level\n            type\n            location\n            languages\n            parameters\n            keywords\n            description\n            categories {\n                id\n                name\n                description\n            }\n            job_categories {\n                id\n                name\n            }\n        }\n    }\n"): (typeof documents)["\n    mutation SubscribeToCompanyListings($input: SubscribeToJobListingsInput!) {\n        subscribeToCompanyListings(input: $input) {\n            id\n            user_id\n            metadata\n            createdAt\n            updatedAt\n            work_from\n            level\n            type\n            location\n            languages\n            parameters\n            keywords\n            description\n            categories {\n                id\n                name\n                description\n            }\n            job_categories {\n                id\n                name\n            }\n        }\n    }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;